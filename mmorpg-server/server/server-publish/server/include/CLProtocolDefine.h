#ifndef _CL_PROTOCOL_DEFINE_H_
#define _CL_PROTOCOL_DEFINE_H_

#include <AvalonProtocol.h>
#include "CLDefine.h"

#define CL_PACKET_COMPRESSED_FLAG (UInt32(1) << 31)

#define AVALON_DEFINE_COMPRESS_PROTOCOLID(Id) \
	public:\
	const static Avalon::UInt32 __ID = Id | CL_PACKET_COMPRESSED_FLAG; \
	Avalon::UInt32 GetProtocolID() const {\
		return __ID; \
	}\
	private:


/**
 *@brief 协议号相关宏定义
 *		协议号由两部分组成，处理该协议的服务器类型和具体协议id    所以也可以根据协议id得到服务器类型（CL_GET_SERVERTYPE_FROM_PROTOCOLID）
 *		每类服务器可以定义CL_SERVERTYPE_OFFSET_IN_PROTOCOLID(100000)个协议，同时自己内部又可以按功能系统进一步细分某类服务器的协议，每类功能可以定义 100个协议 （某类服务器可以定义 100000/100 = 1000种功能系统类别）
 */
#define CL_SERVERTYPE_OFFSET_IN_PROTOCOLID 100000

#define CL_PROTOCOLID_BEGIN() \
	enum ProtocolID{
#define CL_PROTOCOLID_END() \
	};

#define CL_SYS_PROTOCOLID_BEGIN() \
	SYS_PROTOCOLID_BEGIN = 0,
#define CL_SYS_PROTOCOLID_END() \
	SYS_PROTOCOLID_END = CL_SERVERTYPE_OFFSET_IN_PROTOCOLID - 1,
#define CL_IS_SYS_PROTOCOL(Id) \
	(Id <= CLProtocol::SYS_PROTOCOLID_END)

#define CL_SERVER_PROTOCOLID_BEGIN(Type) \
	Type##_PROTOCOLID_BEGIN = Type * CL_SERVERTYPE_OFFSET_IN_PROTOCOLID,
#define CL_SERVER_PROTOCOLID_END(Type) \
	Type##_PROTOCOLID_END = (Type + 1) * CL_SERVERTYPE_OFFSET_IN_PROTOCOLID - 1,
#define CL_GET_SERVERTYPE_FROM_PROTOCOLID(ProtocolID) \
	(ProtocolID / CL_SERVERTYPE_OFFSET_IN_PROTOCOLID)

#define CL_FUNCTION_PROTOCOLID_BEGIN(Type, Id) \
	Type##_PROTOCOLID_BEGIN_##Id = Type * CL_SERVERTYPE_OFFSET_IN_PROTOCOLID + Id * 100,

#define CL_DEFINE_PROTOCOLID(Identify) \
	Identify,

#define CL_GET_FUNCTIONTYPE_FROM_PROTOCOLID(ProtocolID) \
	 static_cast<CLProtocol::FunctionType>(ProtocolID % CL_SERVERTYPE_OFFSET_IN_PROTOCOLID / 100)


namespace CLProtocol
{
	/**
	 *@brief 功能类型   （added by aprilliu, 功能类型的编码应该是针对每类服务器进行的，不用统一编码， 每类服务器可以定义100000/100 = 1000种功能类型）
	 */
	enum FunctionType
	{
		FUNCTION_SYS = 0,
		FUNCTION_SCENE,		//场景相关
		FUNCTION_LOGIN,		//登陆
		FUNCTION_ENTERGAME,	//进入游戏
		FUNCTION_LEAVEGAME, //离开游戏
		FUNCTION_MOVE,		//移动相关
		FUNCTION_OBJECT,	//obj同步相关
		FUNCTION_SKILL,		//技能相关
		FUNCTION_CHAT,		//聊天
		FUNCTION_ITEM,		//道具
		FUNCTION_NPC,		//npc交互相关
		FUNCTION_TASK,		//任务
		FUNCTION_SETTING,	//设置
		FUNCTION_ACTION,	//持续性动作，同时只允许一个动作
		FUNCTION_TRADE,		//交易
		FUNCTION_MAIL,		//邮件系统
		FUNCTION_TEAM,		//组队系统
		FUNCTION_RELATION,	//关系系统
		FUNCTION_ITEM_THING,	//道具事务
		FUNCTION_GUILD,		//公会
		FUNCTION_BACKYARD,	//后院				========废弃
		FUNCTION_COPYSCENE,	//副本
		FUNCTION_PET,		//宠物
		FUNCTION_MOUNT,		//坐骑
		FUNCTION_BATTLESCENE,	//战场
		FUNCTION_AEROBAT,	//飞行器            =======废弃
		FUNCTION_SORTLIST,	//排行榜
		FUNCTION_TREASURE,	//龙脉宝图
		FUNCTION_MALL,		//商城
		FUNCTION_ROUTINE,	//日常
		FUNCTION_AUTOHOOK,	//自动挂机
		FUNCTION_TRIBEWAR,	//部落战争
		FUNCTION_GIFTBAG,	//礼包
		FUNCTION_VIP,		//vip功能
		FUNCTION_DATACENTER,//数据中心
		FUNCTION_ESCORT,	//护送
		FUNCTION_PETEXPLORE,	//宠物探险
		FUNCTION_CHALLENGE,	//擂台赛			=====废弃
		FUNCTION_TITLE,		//称号
		FUNCTION_AUCTION,	//拍卖行
		FUNCTION_BILLING,	//支付
		FUNCTION_LOTTERY,	//祈福抽奖
		FUNCTION_TRAINSOUL,	//炼魂				=====废弃
		FUNCTION_FABAO,		//法宝              =====废弃
		FUNCTION_GSACTIVITY,	// 开服活动
		FUNCTION_ACHIEVEMENT,	// 目标成就     =====废弃 
		FUNCTION_CONSOLE,	//客服后台
		FUNCTION_INVITEGAME,	// 邀请好友游戏
		FUNCTION_LIFESAP,	//命元				=====废弃
		FUNCTION_WORLDLEVEL,	// 世界等级
		FUNCTION_COUNTRY,	//阵营              =====废弃
		FUNCTION_TIGERMACHINE,	// 老虎机		=====废弃
		FUNCTION_BIDAUCTION,//竞标拍卖			=====废弃
		FUNCTION_DARKTOWER,	//黑暗塔
		FUNCTION_STORY,		//剧情
		FUNCTION_MARRIAGE,	//结婚
		FUNCTION_AWARDPOOL,	//奖池				=====废弃
		FUNCTION_FEED,		//分享
		FUNCTION_ARENA,		//竞技场			=====废弃
		FUNCTION_CROSS_GUILD_BATTLE,	//跨服工会战
		FUNCTION_WING,		//翅膀
		FUNCTION_FLIPCARD,	//翻牌				=====废弃
		FUNCTION_FISH,		//捕鱼
		FUNCTION_DUJIE,     //渡劫
		FUNCTION_DRAGONMARK,//龙纹
		FUNCTION_FASHION,	//时装
		FUNCTION_CHANGEZONE,	//跨服
		FUNCTION_MATCH,		//匹配
        FUNCTION_DUNGEON,   //地下城
		FUNCTION_WARPSTONE,	//异次元石头
		FUNCTION_RETINUE,	//随从
		FUNCTION_QUICKBUY,	//快速购买
		FUNCTION_TOWER,		//死亡之塔
		FUNCTION_REDPACKET,	//红包
		FUNCTION_OPERATION,	//运营活动
		FUNCTION_REPLAY,	//录像
		FUNCTION_VERIFY,	//验证
		FUNCTION_PREMIUM_LEAGUE,	// 赏金联赛
		FUNCTION_ROOM,				// 房间
		FUNCTION_GAMBING,	//夺宝
		FUNCTION_COUNT,		//计数相关
		FUNCTION_SCORE_WAR,	//33积分赛
		FUNCTION_DIG,		//宝藏
		FUNCTION_BETHORSE,	//赌马
		FUNCTION_SECURITY_LOCK,	//安全锁
		FUNCTION_GUILD_DUNGEON,	// 公会地下城
		FUNCTION_ADVENTURE_TEAM,//冒险队
		FUNCTION_ROLE,		//角色
		FUNCTION_SHOP,		//商店
		FUNCTION_BATTLE,	//吃鸡
		FUNCTION_BLACKMARKET, //黑市商店
		FUNCTION_HEAD_FRAME,  //头像框
		FUCTIION_NEW_TITLE,	 //头衔系统
		FUCTIION_DAIIY_TODO, //每日必做
		FUCTIION_ACCOUNT,	//账号相关
		FUNCTION_ADVENTURE_PASS,  //冒险通行证
		FUNCTION_2V2_SCORE_WAR,	//22积分赛
		FUNCTION_FRIEND_PRESENT_ITEM, //好友赠送
		FUNCTION_CHAMPION,  //冠军赛
	 	FUNCTION_HONOR,		//荣誉系统
		FUNCTION_LOST_DUNGEON, //迷失地牢
		FUNCTION_GOLD_CONSIGNMENT, //金币寄售
		FUNCTION_MONOPOLY,		//大富翁
	};

	/**
	 *@brief 协议号相关定义
	 */
	CL_PROTOCOLID_BEGIN()
		/**
		 *@brief 系统协议
		 */
		CL_SYS_PROTOCOLID_BEGIN()
		CL_DEFINE_PROTOCOLID(SYS_LOGIN_REQ)				//服务器间请求登录
		CL_DEFINE_PROTOCOLID(SYS_LOGIN_RET)				//服务器间登录返回
		CL_DEFINE_PROTOCOLID(SYS_NETADDRESS_REQ)		//向adminserver请求网络地址
		CL_DEFINE_PROTOCOLID(SYS_NETADDRESS_RET)		//adminserver返回网络地址
		CL_DEFINE_PROTOCOLID(SYS_NOTIFY_CONNECTED)		//通知新连接验证通过
		CL_DEFINE_PROTOCOLID(SYS_NOTIFY_DISCONNECTED)	//通知连接断开
		CL_DEFINE_PROTOCOLID(SYS_NOTIFY_SHUTDOWN)		//通知停服
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_INNODES)		//服务器之间中转协议
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_INNODES_TYPE)	//中转到某种类型的服务器
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_GMCOMMAND)	//scene->world 中转gm指令
		CL_DEFINE_PROTOCOLID(SYS_NOTIFY_INFO)			//系统提示信息
		CL_DEFINE_PROTOCOLID(SYS_NET_LOGGER)			//网络日志
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_TO_PLAYER)	//转发消息给玩家
		CL_DEFINE_PROTOCOLID(SYS_DB_LOGGER)				//数据库日志
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_PLAYERPROTOCOL_INNODES)	//转发玩家协议
        CL_DEFINE_PROTOCOLID(SYS_ASYNC_WAIT_MSG)        //异步等待协议
        CL_DEFINE_PROTOCOLID(SYS_ASYNC_WAIT_MSG_RET)    //异步等待协议返回
        CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_RACE_RPROTOCOL_INNODES)	//转发比赛协议
        CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_RACE_RPROTOCOL_TO_SCENE_PLAYER)	//转发比赛协议到Scene
		CL_DEFINE_PROTOCOLID(SYS_SERVICE_SWITCH_STATUS_CHANGE)	//修改服务开关
		CL_DEFINE_PROTOCOLID(SYS_DUNGEON_CONFIG_UPDATE)			//地下城配置
		CL_DEFINE_PROTOCOLID(SYS_DUNGEON_OPEN_STATUS_CHANGE)	//地下城开放情况变化
		CL_DEFINE_PROTOCOLID(SYS_TRANSFER_PROTOCOL)	//消息中转到其他区服

		//added by aprilliu 2016.2.23
		CL_DEFINE_PROTOCOLID(SYS_REGISTER_REQ)			//服务器间注册消息，比如：用于Relay Server注册到 Match Server
		CL_DEFINE_PROTOCOLID(SYS_REGISTER_RET)			//注册消息响应
		//added by huchenhui 2016.08.18
		CL_DEFINE_PROTOCOLID(SYS_ANNOUNCEMENT_INFO)		//公告
		CL_DEFINE_PROTOCOLID(SYS_PLAYER_FOREVER_DELETED)		//玩家被删除了

		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_FROM_GLOBAL_TO_NODE)			//全局活动服务器->节点中转协议
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_PLAYER_FORM_NODE_TO_GLOBAL)	//节点->全局活动服务器中转玩家相关协议

		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_PLAYER_TO_TEAM_COPY)	//player->团本服务器相关协议
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_PLAYER_TO_UNION)	//player->Union相关协议
		CL_DEFINE_PROTOCOLID(SYS_TRANSMIT_TO_UNION)		    //向Union转发协议
		CL_DEFINE_PROTOCOLID(SYS_MSG_CONFIRM_REQ)		    //消息确认请求
		CL_DEFINE_PROTOCOLID(SYS_MSG_CONFIRM_RES)		    //消息确认回复

		CL_SYS_PROTOCOLID_END()

		/**
		 *@brief 登录服务器协议
		 */ 
		CL_SERVER_PROTOCOLID_BEGIN(ST_LOGIN)
		CL_DEFINE_PROTOCOLID(LOGIN_HASHSEED_REQ)		//客户端请求密码hash种子
		CL_DEFINE_PROTOCOLID(LOGIN_HASHSEED_RET)		//登录服务器返回hash种子
		CL_DEFINE_PROTOCOLID(LOGIN_VERIFY_ACCOUNT_REQ)	//客户端请求验证账号
		CL_DEFINE_PROTOCOLID(LOGIN_VERIFY_ACCOUNT_RET)	//登录服务器返回验证结果并返回区网关地址
		CL_DEFINE_PROTOCOLID(LOGIN_NOTIFY_NEW_PLAYER)	//新的验证请求

		CL_SERVER_PROTOCOLID_END(ST_LOGIN)

		/*
		 *@brief 管理服务器协议
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_ADMIN)
		CL_DEFINE_PROTOCOLID(ADMIN_SYNC_GATEPLAYER_NUM)	//网关向admin同步登陆人数
		CL_DEFINE_PROTOCOLID(ADMIN_CONSOLE_REQUSET)		//客服后台请求
		CL_DEFINE_PROTOCOLID(ADMIN_CONSOLE_RESPONSE)	//客服后台回复
		CL_DEFINE_PROTOCOLID(ADMIN_SYNC_WORLDPLAYER_NUM)//world向admin同步登陆人数
		CL_DEFINE_PROTOCOLID(ADMIN_SYNC_LOGIN_QUEUE_INFO)//gate向admin同步排队信息
		//管理服登陆协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_ADMIN, FUNCTION_LOGIN)
		CL_DEFINE_PROTOCOLID(ADMIN_LOGIN_VERIFY_REQ)	//客户端请求验证账号
		CL_DEFINE_PROTOCOLID(ADMIN_LOGIN_VERIFY_RET)	//验证账号返回，并返回网关地址
		CL_DEFINE_PROTOCOLID(ADMIN_LOGIN_NEWPLAYER)		//通知逻辑层新的玩家
		CL_DEFINE_PROTOCOLID(ADMIN_LOGIN_PLAYER_GATE_INFO_REQ)	//查询已经分配给玩家的gateserver
		CL_DEFINE_PROTOCOLID(ADMIN_LOGIN_PLAYER_GATE_INFO_RET)	//返回已经分配给玩家的gateserver
		//支付相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_ADMIN, FUNCTION_BILLING)
		CL_DEFINE_PROTOCOLID(ADMIN_BILLING_GIVEITEM_REQ)	//发货请求
		CL_DEFINE_PROTOCOLID(ADMIN_BILLING_GIVEITEM_RET)	//发货返回
		CL_DEFINE_PROTOCOLID(ADMIN_BILLING_ROLEINFO_REQ)	//角色信息请求
		CL_DEFINE_PROTOCOLID(ADMIN_BILLING_ROLEINFO_RET)	//角色信息返回
		//跨服相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_ADMIN, FUNCTION_CHANGEZONE)
		CL_SERVER_PROTOCOLID_END(ST_ADMIN)

		/*
		 *@brief 档案服务器协议
		 */ 
		CL_SERVER_PROTOCOLID_BEGIN(ST_RECORD)
		CL_DEFINE_PROTOCOLID(RECORD_GUIDSEED_REQ)		//请求guid种子
		CL_DEFINE_PROTOCOLID(RECORD_GUIDSEED_RET)		//返回guid种子
		CL_DEFINE_PROTOCOLID(RECORD_INSERT_REQ)			//请求创建记录
		CL_DEFINE_PROTOCOLID(RECORD_INSERT_RET)			//创建返回
		CL_DEFINE_PROTOCOLID(RECORD_UPDATE_REQ)			//请求保存数据
		CL_DEFINE_PROTOCOLID(RECORD_UPDATE_RET)			//保存返回
		CL_DEFINE_PROTOCOLID(RECORD_DELETE_REQ)			//请求删除记录
		CL_DEFINE_PROTOCOLID(RECORD_DELETE_RET)			//删除返回
		CL_DEFINE_PROTOCOLID(RECORD_SELECT_REQ)			//请求查询
		CL_DEFINE_PROTOCOLID(RECORD_SELECT_RET)			//查询返回
		CL_DEFINE_PROTOCOLID(RECORD_FLUSH_REQ)			//请求回写所有数据
		CL_DEFINE_PROTOCOLID(RECORD_FLUSH_RET)			//回写数据返回
		CL_DEFINE_PROTOCOLID(RECORD_CHANGENAME_REQ)		//请求改名
		CL_DEFINE_PROTOCOLID(RECORD_CHANGENAME_RET)		//改名返回
		CL_DEFINE_PROTOCOLID(RECORD_TRANSMIT_REQUEST)	//转发请求
		CL_DEFINE_PROTOCOLID(RECORD_TRANSMIT_RESPONSE)	//转发回复
		CL_DEFINE_PROTOCOLID(RECORD_NOTIFY_OTHER_DISCONNECTED)	//通知和其他record的连接中断
		CL_DEFINE_PROTOCOLID(RECORD_AUTO_GUID_INSERT_REQ) //自增guid插入请求
 
		CL_SERVER_PROTOCOLID_END(ST_RECORD)

		/**
		 *@brief 网关服务器协议
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_GATE)

		CL_DEFINE_PROTOCOLID(GATE_TRANSMIT_PACKET)		//网关转发消息
		CL_DEFINE_PROTOCOLID(GATE_BROADCAST_AROUND)		//广播消息到周围
		CL_DEFINE_PROTOCOLID(GATE_BROADCAST_EXCEPT)		//广播消息到新区域
		CL_DEFINE_PROTOCOLID(GATE_SYNC_GRIDINDEX)		//同步格子索引
		CL_DEFINE_PROTOCOLID(GATE_BROADCAST_ALL)		//广播到所有
		CL_DEFINE_PROTOCOLID(GATE_SYNC_PLAYER_BASEINFO)	//同步玩家基本信息到网关
		//网关场景协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_SCENE)
		CL_DEFINE_PROTOCOLID(GATE_REGISTER_SCENE)		//注册场景
		CL_DEFINE_PROTOCOLID(GATE_UNREGISTER_SCENE)		//注销场景
		//网关登陆协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_LOGIN)
		CL_DEFINE_PROTOCOLID(GATE_SEND_ACCOUNT_INFO)	//登录服将账号信息发往网关
		CL_DEFINE_PROTOCOLID(GATE_NETADDRESS_RET)		//网关向登录服返回地址
		CL_DEFINE_PROTOCOLID(GATE_CLIENTLOGIN_REQ)		//客户端请求连接到网关
		CL_DEFINE_PROTOCOLID(GATE_CLIENTLOGIN_RET)		//返回连接结果
		CL_DEFINE_PROTOCOLID(GATE_NOVICE_GUIDE_CHOOSE_REQ)	// client->gate新手引导选择请求
		//网关进入游戏协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_ENTERGAME)
		CL_DEFINE_PROTOCOLID(GATE_SEND_ROLEINFO)		//服务器发送角色信息给客户端
		CL_DEFINE_PROTOCOLID(GATE_CREATEROLE_REQ)		//请求创建角色
		CL_DEFINE_PROTOCOLID(GATE_CREATEROLE_RET)		//返回创建结果
		CL_DEFINE_PROTOCOLID(GATE_DELETEROLE_REQ)		//请求删除角色
		CL_DEFINE_PROTOCOLID(GATE_RECOVERROLE_REQ)		//请求回复角色
		CL_DEFINE_PROTOCOLID(GATE_ENTERGAME_REQ)		//进入游戏请求
		CL_DEFINE_PROTOCOLID(GATE_ENTERGAME_RET)		//返回进入结果
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_ENTERSCENE)	//通知进入场景
		CL_DEFINE_PROTOCOLID(GATE_SYNC_SERVER_TIME)		//发送服务器时间
		CL_DEFINE_PROTOCOLID(GATE_SEND_ROLE_VISIABLEEQUIPS)	//发送角色可见装备
		CL_DEFINE_PROTOCOLID(GATE_RECONNECT_GAME_REQ)	//请求重连
		CL_DEFINE_PROTOCOLID(GATE_RECONNECT_GAME_RES)	//重连返回
		CL_DEFINE_PROTOCOLID(GATE_FINISH_NEWBEE_GUIDE)	//通过新手引导
		CL_DEFINE_PROTOCOLID(GATE_RECOVERROLE_RES)		//回复角色返回
		CL_DEFINE_PROTOCOLID(GATE_DELETEROLE_RES)		//删除角色返回
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_LOGIN_WAIT_INFO)//通知玩家排队信息
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_ALLOW_LOGIN)	//通知玩家可以登录了
		CL_DEFINE_PROTOCOLID(GATE_LEAVE_LOGIN_QUEUE)	//玩家退出排队
		CL_DEFINE_PROTOCOLID(GATE_ROLE_SWITCH_REQ)		//角色切换请求
		CL_DEFINE_PROTOCOLID(GATE_ROLE_SWITCH_RES)		//角色切换返回
		CL_DEFINE_PROTOCOLID(GATE_SEND_LOGIN_PUSH_INFO) //发送登录推送信息
		CL_DEFINE_PROTOCOLID(GATE_CONVERT_ACCOUNT_REQ)  //请求转移账号信息
		CL_DEFINE_PROTOCOLID(GATE_CONVERT_ACCOUNT_RES)  //返回转移账号信息
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_SYSTEM_SWITCH)	//同步给用户各种系统开关
		CL_DEFINE_PROTOCOLID(GATE_SET_ROLE_PREFERENCES_REQ)//请求修改角色偏好
		CL_DEFINE_PROTOCOLID(GATE_SET_ROLE_PREFERENCES_RET)//请求修改角色偏好

		//网关离开游戏协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_LEAVEGAME)
		CL_DEFINE_PROTOCOLID(GATE_LEAVEGAME_REQ)		//客户端请求离开游戏
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_LEAVESCENE)	//通知离开场景
		CL_DEFINE_PROTOCOLID(GATE_KICKOFF_REQ)			//请求踢玩家下线
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_KICKOFF)		//网关通知客户端被踢下线
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_LEAVE_TIME)	//网关通知客户端离开时间

		//网关关系相关协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_RELATION)
		CL_DEFINE_PROTOCOLID(GATE_SYNC_BLACKLIST)		//向网关同步黑名单
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_NEWBLACKLIST)	//通知网关新的黑名单
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_DELBLACKLIST)	//通知网关删除黑名单

		//跨服相关协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_CHANGEZONE)
		CL_DEFINE_PROTOCOLID(GATE_CHANGEZONE_CHECK_REQ)	//向另一个区的网关同步角色基本信息
		CL_DEFINE_PROTOCOLID(GATE_CHANGEZONE_CHECK_RET)	
		CL_DEFINE_PROTOCOLID(GATE_CHANGEZONE_NOTIFY)	//通知网关开始跨服

		//安全锁
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_SECURITY_LOCK)
		CL_DEFINE_PROTOCOLID(GATE_SECURITY_LOCK_REMOVE_REQ)			 // client->gate解除安全锁 
		CL_DEFINE_PROTOCOLID(GATE_SECURITY_LOCK_REMOVE_RES)			 // gate->client解除安全锁返回
		CL_DEFINE_PROTOCOLID(GATE_TO_WORLD_SECURITY_LOCK_REMOVE_REQ) // gate->world解除安全锁 
		CL_DEFINE_PROTOCOLID(GATE_TO_WORLD_SECURITY_LOCK_REMOVE_RES) // world->gate解除安全锁返回
		CL_DEFINE_PROTOCOLID(GATE_SECURITY_LOCK_CHECK_REQ)			 // gate->world检查安全锁
		CL_DEFINE_PROTOCOLID(GATE_SECURITY_LOCK_CHECK_RES)			 // world->gate检查安全锁返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GATE, FUNCTION_ADVENTURE_TEAM)
		CL_DEFINE_PROTOCOLID(GATE_SYNC_ADVENTURE_TEAM_INFO)			// server->client同步冒险队信息
		CL_DEFINE_PROTOCOLID(GATE_NOTIFY_RECALCULATE_TOTAL_ROLE_VALUE_SCORE) // gate->world 通知重新计算角色总评分

		CL_SERVER_PROTOCOLID_END(ST_GATE)

		/**
		 *@brief场景服务器协议
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_SCENE)
		//场景协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_SCENE)
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_LOADMAP)			//通知场景加载地图
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_LOAD_DYNMAP)		//通知场景加载动态地图
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_LOAD_BATTLESCENE)	//通知场景加载战场
        CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_LOAD_DUNGEON_ENTRY_MAP)	//通知场景加载地下城入口地图
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_NAME)				//同步场景名
		CL_DEFINE_PROTOCOLID(SCENE_SUMMON_NPC)				//world通知召唤npc
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_IDSEED)				//同步id生成种子到world
		CL_DEFINE_PROTOCOLID(SCENE_SET_PARAM)				//设置场景参数
		CL_DEFINE_PROTOCOLID(SCENE_TEST_NETDELAY)			//测试网络延迟
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PLAYERNUM)			//同步人数到World
		CL_DEFINE_PROTOCOLID(SCENE_SUMMON_NPC_BYPOS)		//world通知在指定坐标召唤npc
		CL_DEFINE_PROTOCOLID(SCENE_BROADCAST_EFFECT)        //全服同步特效
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_WORLD_ENTERSCENE)	//通知world玩家进入场景
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_WORLD_LOAD_START) //通知world玩家加载开始
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_WORLD_LOAD_FINISH)//通知world玩家加载完成
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_WORLD_LEAVE)		//通知world玩家离开SceneServer
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_LOADING_INFO)		//client->scene 通知客户端loading情况
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_LOADING_INFO)		//scene->client 请求客户端loading情况

		//进入游戏
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ENTERGAME)
		CL_DEFINE_PROTOCOLID(SCENE_ENTERGAME_REQ)			//通知场景玩家进入游戏
		CL_DEFINE_PROTOCOLID(SCENE_ENTERGAME_RET)			//进入游戏返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ENTERSCENE)		//通知客户端进入场景
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_WALLOW_FACTOR)		//同步防沉迷收益系数 ================ 废弃
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_BULLETIN_RECORD)  //客户端通知服务器记录版本号
        CL_DEFINE_PROTOCOLID(SCENE_GAME_RECONN_REQ)         //玩家重连请求
        CL_DEFINE_PROTOCOLID(SCENE_GAME_RECONN_RET)         //玩家重连返回
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_ACCOUNT_REQ)       //查询账号信息
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_ACCOUNT_RET)       //查询账号信息返回
		CL_DEFINE_PROTOCOLID(SCENE_NOVICE_GUIDE_CHOOSE_REQ) //新手引导选择请求

		//离开游戏
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_LEAVEGAME)
		CL_DEFINE_PROTOCOLID(SCENE_LEAVEGAME_REQ)			//通知场景玩家离开游戏
		CL_DEFINE_PROTOCOLID(SCENE_LOGIC_LEAVEGAME_REQ)		//逻辑下线
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SHAREDATA_TO_WORLD)	//下线同步玩家数据

		//移动相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_MOVE)
		CL_DEFINE_PROTOCOLID(SCENE_MOVE_REQUIT)				//客户端移动请求
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PLAYER_MOVE)		//服务器同步移动
        CL_DEFINE_PROTOCOLID(SCENE_PLAYER_CHANGESCENE_REQ)	//玩家请求切换场景
		CL_DEFINE_PROTOCOLID(SCENE_BEGIN_CHANGESCENE_REQ)	//请求开始切换场景
		CL_DEFINE_PROTOCOLID(SCENE_BEGIN_CHANGESCENE_RET)	//返回开始切换场景
		CL_DEFINE_PROTOCOLID(SCENE_TRANS_OBJECTDATA)		//切换场景
		CL_DEFINE_PROTOCOLID(SCENE_CHANGESCENE)				//切换场景返回
		CL_DEFINE_PROTOCOLID(SCENE_TELEPORT)				//瞬移
		CL_DEFINE_PROTOCOLID(SCENE_ENTERSCENE_PULL_PLAYER)	//强制拉人
		CL_DEFINE_PROTOCOLID(SCENE_LEAVE_DYNSCENE)			//离开动态场景
		CL_DEFINE_PROTOCOLID(SCENE_FLY_TO_NPC)				//飞到npc那
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MOVE)				//服务器同步npc和pet移动
		CL_DEFINE_PROTOCOLID(SCENE_STOP_MOVE)				//停止移动
		CL_DEFINE_PROTOCOLID(SCENE_PLAYER_POS_REQ)			//查询玩家的位置
		CL_DEFINE_PROTOCOLID(SCENE_PLAYER_POS_RET)			//查询玩家的位置返回
		CL_DEFINE_PROTOCOLID(SCENE_FLY_TO_POS)				//飞到静态地图的指定位置
        CL_DEFINE_PROTOCOLID(SCENE_RETURN_TO_TOWN_REQ)      //通知scene把玩家放回到城镇

		//object相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_OBJECT)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SELF)				//同步自身数据
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SCENEOBJECT)		//同步周围object
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_OBJECTPROPERTY)		//同步obj属性更新
		CL_DEFINE_PROTOCOLID(SCENE_DELETE_SCENEOBJECT)		//删除object
		CL_DEFINE_PROTOCOLID(SCENE_SELECT_OBJECT)			//选中object
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SELECT_OBJPROPERTY)	//同步点选关注的属性
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SOCIAL_DATA)		//向场景同步社会关系
		CL_DEFINE_PROTOCOLID(SCENE_ADDEXP_REQ)				//world向场景请求增加经验
		CL_DEFINE_PROTOCOLID(SCENE_WATCH_PLAYER_REQ)		//观察玩家
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_WATCH_INFO)			//同步玩家被观察信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PUNISHMENT)			//向场景同步惩罚
		CL_DEFINE_PROTOCOLID(SCENE_OBJECTDATA_REQ)			//请求某个场景对象数据
		CL_DEFINE_PROTOCOLID(SCENE_SUMMONOBJ_SET_MODE)		//设置召唤物的行为模式
		CL_DEFINE_PROTOCOLID(SCENE_PLAYER_POWER_REQ)		//请求玩家的战斗力数据
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PLAYER_POWER)		//同步玩家的战斗力数据
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_EVENT)				//同步玩家的事件
		CL_DEFINE_PROTOCOLID(SCENE_CLEAR_REDPOINT)			//清除公会红点
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PLAYER_AVATAR)		//向world同步玩家外观
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ACCOUNT_INFO)		//向world同步账号相关信息
		CL_DEFINE_PROTOCOLID(SCENE_SET_CUSTOM_DATA)			//设置用户自定义字段
		CL_DEFINE_PROTOCOLID(SCENE_NPC_LIST)				//npc列表
		CL_DEFINE_PROTOCOLID(SCENE_NPC_ADD)					//新增npc
		CL_DEFINE_PROTOCOLID(SCENE_NPC_DEL)					//删除npc
		CL_DEFINE_PROTOCOLID(SCENE_NPC_UPDATE)				//修改npc状态
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LIST)				//场景item列表
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_ADD)				//场景新增item
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEL)				//场景删除item
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_UPDATE)				//场景更新item
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_SYNC)				//场景同步item
		CL_DEFINE_PROTOCOLID(SCENE_GAME_PARAM_SYNC)			//同步游戏参数
		CL_DEFINE_PROTOCOLID(SCENE_CLIENT_LOG)				//客户端埋点
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_INC_EXP)			//通知客户端获得经验
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_OFFLINE_EVENT)		//同步玩家的离线事件

		//技能相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_SKILL)
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_SKILLS_REQ)		//请求技能变化  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_SKILLS_RES)		//响应升级变化  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_USE_SKILL_REQ)			//请求施放一个技能
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_USE_SKILL)		//通知周围玩家使用了一个技能
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_SHOW_QUICKMOVE_EFFECTIVE)	// 空缺
		CL_DEFINE_PROTOCOLID(SCENE_REVIVE_REQ)				//请求复活
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_DEATH)			//通知死亡
		CL_DEFINE_PROTOCOLID(SCENE_SWITCH_PKMODE)			//切换pk模式
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_HPMP_CHANGE)		//通知血量和法力变化
		CL_DEFINE_PROTOCOLID(SCENE_USE_SKILL_RET)			//释放技能返回
		CL_DEFINE_PROTOCOLID(SCENE_ADD_BUFF)				//添加buff
		CL_DEFINE_PROTOCOLID(SCENE_REMOVE_BUFF_NOTIFY)		//server->client删除buff

		CL_DEFINE_PROTOCOLID(SCENE_INIT_SKILLS_REQ)			// 请求初始化技能
		CL_DEFINE_PROTOCOLID(SCENE_INIT_SKILLS_RES)			// 请求初始化技能返回
		CL_DEFINE_PROTOCOLID(SCENE_RECOMMEND_SKILLS_REQ)	// 请求推荐技能配置
		CL_DEFINE_PROTOCOLID(SCENE_RECOMMEND_SKILLS_RES)	// 请求推荐技能配置返回

		CL_DEFINE_PROTOCOLID(SCENE_SKILL_SLOT_UNLOCK_NOTIFY)	// 技能槽解锁
		CL_DEFINE_PROTOCOLID(SCENE_SET_SKILL_PAGE_REQ)	    // 设置技能页
		CL_DEFINE_PROTOCOLID(SCENE_SET_SKILL_PAGE_RES)	    // 设置技能页返回
		CL_DEFINE_PROTOCOLID(SCENE_BUY_SKILL_PAGE_REQ)	    // 购买技能页
		CL_DEFINE_PROTOCOLID(SCENE_BUY_SKILL_PAGE_RES)	    // 购买技能页返回


			



		//聊天相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_CHAT)
		CL_DEFINE_PROTOCOLID(SCENE_CHAT)					//聊天
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_EXEC_GMCMD)		//通知gm命令已执行
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_CHAT)				//同步聊天（内容以文本形式发送）
		CL_DEFINE_PROTOCOLID(SCENE_REQUEST)					//发出请求
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_REQUEST)			//同步请求
		CL_DEFINE_PROTOCOLID(SCENE_REPLY)					//答复
		CL_DEFINE_PROTOCOLID(SCENE_CHAT_SENDPOS)			//发送位置
		CL_DEFINE_PROTOCOLID(SCENE_CHAT_HORN_REQ)			//请求发送喇叭
		CL_DEFINE_PROTOCOLID(SCENE_CHAT_HORN_RES)			//返回发送喇叭结果


		//道具相关 client & scene
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ITEM)
		CL_DEFINE_PROTOCOLID(SCENE_USE_ITEM)				//使用道具
		CL_DEFINE_PROTOCOLID(SCENE_USE_ITEM_RET)			//使用道具返回
		CL_DEFINE_PROTOCOLID(SCENE_SELL_ITEM)				//出售道具
		CL_DEFINE_PROTOCOLID(SCENE_SELL_ITEM_RET)			//出售道具返回
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ITEM)				//同步道具
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ITEM_PROPERTY)		//同步道具属性
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_DELETE_ITEM)		//删除道具
		CL_DEFINE_PROTOCOLID(SCENE_ENLARGE_PACKAGE)			//拓展背包格子
		CL_DEFINE_PROTOCOLID(SCENE_PUSH_STORAGE)			//存入仓库
		CL_DEFINE_PROTOCOLID(SCENE_PULL_STORAGE)			//取出仓库
		CL_DEFINE_PROTOCOLID(SCENE_PUSH_STORAGE_RET)		//存入仓库返回
		CL_DEFINE_PROTOCOLID(SCENE_PULL_STORAGE_RET)		//取出仓库返回
		CL_DEFINE_PROTOCOLID(SCENE_ENLARGE_STORAGE)			//拓展仓库
		CL_DEFINE_PROTOCOLID(SCENE_TRIM_ITEM)				//整理道具
		CL_DEFINE_PROTOCOLID(SCENE_TRIM_ITEM_RET)			//整理道具返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_GETITEM)			//通知客户端得到了道具
		CL_DEFINE_PROTOCOLID(SCENE_ENLARGE_PACKAGE_RET)		//拓展背包格子返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_DECOMPOSE)			//装备分解
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_DECOMPOSE_RET)		//装备分解返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_STRENGTHEN)		//装备强化
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_STRENGTHEN_RET)	//装备强化返回
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_QUERY)				//查询商店
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_QUERY_RET)			//查询商店返回
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_BUY)				//商店购买
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_BUY_RET)			//商店购买返回
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_SYNC)				//商店同步
		CL_DEFINE_PROTOCOLID(SCENE_SHOPITEM_SYNC)			//商品同步
		CL_DEFINE_PROTOCOLID(SCENE_ONEKEY_PUSH_STORAGE)		//一键存入仓库
		CL_DEFINE_PROTOCOLID(SCENE_ONEKEY_PUSH_STORAGE_RET)	//一键存入仓库返回
		CL_DEFINE_PROTOCOLID(SCENE_ENLARGE_STORAGE_RET)		//拓展仓库返回
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_NEW_ITEM)			//更新新物品标识
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_REFRESH)			//商店刷新
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_REFRESH_RET)		//商店刷新返回
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_USE_ITEM)		//单局使用道具
		CL_DEFINE_PROTOCOLID(SCENE_ONEKEY_DECOMPOSE)		//一键分解装备
		CL_DEFINE_PROTOCOLID(SCENE_ONEKEY_DECOMPOSE_RET)	//一键分解装备返回
		CL_DEFINE_PROTOCOLID(SCENE_SEAL_EQUIP_REQ)			//请求封装
		CL_DEFINE_PROTOCOLID(SCENE_SEAL_EQUIP_RET)			//封装返回
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_SEAL_EQUIP_REQ)	//检查封装请求
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_SEAL_EQUIP_RET)	//检查封装返回
		CL_DEFINE_PROTOCOLID(SCENE_RAND_EQUIP_QLV_REQ)		//重刷装备品质等级请求
		CL_DEFINE_PROTOCOLID(SCENE_RAND_EQUIP_QLV_RET)		//重刷装备品质等级返回
		CL_DEFINE_PROTOCOLID(SCENE_USE_MAGICJAR_RET)		//开罐子返回
		CL_DEFINE_PROTOCOLID(SCENE_ADDMAGIC_REQ)			//附魔请求
		CL_DEFINE_PROTOCOLID(SCENE_ADDMAGIC_RET)			//附魔返回
		CL_DEFINE_PROTOCOLID(SCENE_MAGICCARD_COMP_REQ)		//附魔卡合成
		CL_DEFINE_PROTOCOLID(SCENE_MAGICCARD_COMP_RET)		//附魔卡合成返回
		CL_DEFINE_PROTOCOLID(SCENE_USE_MAGICJAR_REQ)		//开罐子请求
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_COSTITEM)			//通知客户端消耗道具
		CL_DEFINE_PROTOCOLID(SCENE_QUICK_USEITEM_REQ)		//请求快速使用关卡道具
		CL_DEFINE_PROTOCOLID(SCENE_QUICK_USEITEM_RET)		//请求快速使用关卡道具返回
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_MERGE_REQ)		//请求时装合成
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_MERGE_RET)		
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_MAKE_REQ)			//请求装备制作
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_MAKE_RET)
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_REFRESHNUM_REQ)		//商店可刷新次数请求
		CL_DEFINE_PROTOCOLID(SCENE_SHOP_REFRESHNUM_RES)		//商店可刷新次数返回
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_ATTR_SEL_REQ)	//时装属性选择请求
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_ATTR_SEL_RES)
		CL_DEFINE_PROTOCOLID(SCENE_JAR_POINT_REQ)			//罐子积分请求
		CL_DEFINE_PROTOCOLID(SCENE_JAR_POINT_RES)
		CL_DEFINE_PROTOCOLID(SCENE_MOVE_ITEM)				//移动道具		by huchenhui 2017.07.24
		CL_DEFINE_PROTOCOLID(SCENE_MOVE_ITEM_RES)			//移动道具返回	by huchenhui 2017.07.24
		CL_DEFINE_PROTOCOLID(SCENE_SET_DUNGEON_POTION_REQ)	//设置药水请求
		CL_DEFINE_PROTOCOLID(SCENE_SET_DUNGEON_POTION_RES)	//设置药水返回
		CL_DEFINE_PROTOCOLID(SCENE_RENEW_TIME_ITEM_REQ)		//续费时限道具
		CL_DEFINE_PROTOCOLID(SCENE_RENEW_TIME_ITEM_RES)
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_TIME_ITEM)		//通知时限道具的状态变化
		CL_DEFINE_PROTOCOLID(SCENE_OPEN_MAG_BOX_REQ)		//开启魔盒请求
		CL_DEFINE_PROTOCOLID(SCENE_OPEN_MAG_BOX_RES)		//开启魔盒返回
		CL_DEFINE_PROTOCOLID(SCENE_ADD_PRECIOUS_BEAD_REQ)	//添加宝珠请求
		CL_DEFINE_PROTOCOLID(SCENE_ADD_PRECIOUS_BEAD_RET)	//添加宝珠返回
		CL_DEFINE_PROTOCOLID(SCENE_SELL_ITEM_BAT_REQ)	//批量出售道具请求
		CL_DEFINE_PROTOCOLID(SCENE_SELL_ITEM_BAT_RES)	//批量出售道具返回
		// 道具world & scene
		CL_DEFINE_PROTOCOLID(SCENE_AUTOUSE_ITEM)			//副本快捷(自动)使用道具
		CL_DEFINE_PROTOCOLID(SCENE_REMAKE_EQUIP)			//改造装备
		CL_DEFINE_PROTOCOLID(SCENE_PICKUP_ITEM)				//捡起道具
		CL_DEFINE_PROTOCOLID(SCENE_REMAKE_EQUIP_RESULT)		//改造装备结果
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_ITEMNUM_REQ)		//向场景服务器发起请求检查道具数量
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_ITEMNUM_RET)		//场景服务器返回
		CL_DEFINE_PROTOCOLID(SCENE_REMOVEITEM_REQ)			//向场景服务器发起请求扣除道具
		CL_DEFINE_PROTOCOLID(SCENE_UNLOCKITEM_REQ)			//通知场景服务器解锁
		CL_DEFINE_PROTOCOLID(SCENE_REMOVE_ITEMOBJ_REQ)		//通过唯一id移除道具并解锁
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_WATCH_EQUIPS)		//同步被观察装备信息
		CL_DEFINE_PROTOCOLID(SCENE_COMPOSE_ITEM_REQ)		//合成道具
		CL_DEFINE_PROTOCOLID(SCENE_SHOW_USEITEM_EFFECT)		//通知客户端显示使用道具特效
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_COINS)				//客户端向服务器同步二级货币数 --保留
		CL_DEFINE_PROTOCOLID(SCENE_COMPOSE_ITEM_RET)		//合成道具返回
		CL_DEFINE_PROTOCOLID(SCENE_SHOW_ITEM_DIALOG)		//显示道具对话框
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_USEITEM)			//通知客户端
		CL_DEFINE_PROTOCOLID(SCENE_ADD_MONEYITEM_REQ)		//通知场景服加货币道具						
		CL_DEFINE_PROTOCOLID(SCENE_STONETRANS_TARGET_NOTIFY)//=============废弃
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_CHARGE_SUCC)		//通知充值成功
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_ITEMS_REQ)		//请求可兑换道具列表
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_ITEMS_RET)		//返回可兑换道具列表
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_ITEM)			//兑换道具
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_REQ)			//客户端请求服务器道具加锁相关操作
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_RET)			//服务器通知客户端道具加锁相关操作结果
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_BUTTON_STATE)  //服务器通知客户端道具加锁按钮状态
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_INPUT_PASSWD)	//服务器通知客户端输入密码解锁
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_RANGE)			//服务器向客户端同步加锁范围
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_LOCK_QUESTION)		//服务器向客户端同步提示问题
		CL_DEFINE_PROTOCOLID(SCENE_RAND_EQUIP_SHOP_SYNC)	//同步随机装备商店
		CL_DEFINE_PROTOCOLID(SCENE_RAND_EQUIP_SHOP_BUY)		//购买随机装备
		CL_DEFINE_PROTOCOLID(SCENE_RAND_EQUIP_SHOP_DEL)		//购买后通知客户端删除一个随机装备
		CL_DEFINE_PROTOCOLID(SCENE_DRAW_PRIZE_REQ)			//抽奖请求
		CL_DEFINE_PROTOCOLID(SCENE_DRAW_PRIZE_RES)			//抽奖返回

		//装备回收相关
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_SUBCMT_REQ)   //装备回收提交请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_SUBCMT_RES)   //装备回收提交返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_REDEEM_REQ)   //装备赎回请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_REDEEM_RES)   //装备赎回返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_UPSCORE_REQ)  //装备回收积分提升请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_UPSCORE_RES)  //装备回收积分提升返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_REDEMTM_REQ)  //装备赎回刷新时间戳请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_REDEMTM_RES)  //装备赎回刷新时间戳返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_REC_NOTIFY_RSET)  //通知装备回收重置
		//装备转移
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_TRANSFER_REQ)   //装备转移请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_TRANSFER_RES)   //装备转移返回
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_MERGE_RECORD_REQ)   //时装合成记录请求
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MYSTICAL_MERCHANT) //同步神秘商人
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_RESIST_MAGIC_REQ) //同步抗魔值
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_RESIST_MAGIC)   //scene->world 同步抗魔值到world
		CL_DEFINE_PROTOCOLID(SCENE_ADD_REWARD_REQ)			//获取道具
		CL_DEFINE_PROTOCOLID(SCENE_ADD_REWARD_RES)			//获取道具返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_OP_LOCK_REQ)	//道具加锁解锁请求
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_OP_LOCK_RES)	//道具加锁解锁返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_SHOW_FASHIONWEAPON_REQ)	//设置时装武器显示请求
		CL_DEFINE_PROTOCOLID(SCENE_SET_SHOW_FASHIONWEAPON_RES)	//设置时装武器显示返回
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_CHANGEACTIVE_MERGE_REQ)	//换装节活动时装合成请求
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_CHANGEACTIVE_MERGE_RET)	//换装节活动时装合成返回
		CL_DEFINE_PROTOCOLID(SCENE_STRENGTHEN_TICKET_SYNTHESIS_REQ)	//client->scene 强化券合成请求
		CL_DEFINE_PROTOCOLID(SCENE_STRENGTHEN_TICKET_SYNTHESIS_RES)	//scene->client 强化券合成返回
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_PRECIOUSBEAD_REQ)	//装备镶嵌宝珠请求
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_PRECIOUSBEAD_RET)	//装备镶嵌宝珠返回
		CL_DEFINE_PROTOCOLID(SCENE_EXTIRPE_PRECIOUSBEAD_REQ)	//装备摘除宝珠请求
		CL_DEFINE_PROTOCOLID(SCENE_EXTIRPE_PRECIOUSBEAD_RET)	//装备摘除宝珠返回
		CL_DEFINE_PROTOCOLID(SCENE_STRENGTHEN_TICKET_FUSE_REQ)		//client->scene 强化券融合请求
		CL_DEFINE_PROTOCOLID(SCENE_STRENGTHEN_TICKET_FUSE_RES)		//scene->client 强化券融合返回
		CL_DEFINE_PROTOCOLID(SCENE_UPGRADE_PRECIOUSBEAD_REQ)		//client->scene 升级宝珠请求
		CL_DEFINE_PROTOCOLID(SCENE_UPGRADE_PRECIOUSBEAD_RES)		//scene->client 升级宝珠返回
		CL_DEFINE_PROTOCOLID(WORLD_INCREASE_PLAYER_EXP_REQ)			//world->scene 增加经验请求
		CL_DEFINE_PROTOCOLID(SCENE_REPLACE_PRECIOUSBEAD_REQ)		//装备置换宝珠请求
		CL_DEFINE_PROTOCOLID(SCENE_REPLACE_PRECIOUSBEAD_RET)		//装备置换宝珠返回
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_ITEM_REQ)	//world->scene检查道具请求
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_ITEM_RET)	//scene->world检查道具返回
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_BUY_CNT_REQ)		// client->scene神器罐购买次数请求
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_BUY_CNT_RES)		// scene->client神器罐购买次数返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIE_UPDATE_REQ)	//装备升级请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIE_UPDATE_RES)	//装备升级返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_REQ)		//client->scene物品寄存请求
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_RES)		//scene->client物品寄存返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_GET_REQ)	//client->scene物品寄存领取请求
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_GET_RES)	//scene->client物品寄存领取返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_SYNC)		//world->scene物品寄存获得
		CL_DEFINE_PROTOCOLID(SCENE_MAGIC_CARD_UPGREDE_REQ)	//client->scene附魔卡升级请求
		CL_DEFINE_PROTOCOLID(SCENE_MAGIC_CARD_UPGREDE_RES)	//scene->client附魔卡升级返回
		CL_DEFINE_PROTOCOLID(SCENE_MAGICCARD_COMP_ONEKEY_REQ) //client->server附魔卡一键合成请求
		CL_DEFINE_PROTOCOLID(SCENE_MAGICCARD_COMP_ONEKEY_RES) //client->server附魔卡一键合成返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_DEPOSIT_EXPIRE)		//scene->client物品寄存到期
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_UPGRADE)	//scene->client装备增幅
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_UPGRADE_RET)	//装备增幅返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_CLEAR)		    //scene->client气息装备清除气息
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_CLEAR_RET)		//气息装备清除气息返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_RED)		    //scene->client气息装备激活变成红字装备
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_RED_RET)		//气息装备激活变成红字装备返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_CHG)		    //scene->client红字装备属性转化
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_CHG_RET)		//红字装备属性转化返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_MATERIAL_COMBO)		    //scene->client增幅材料合成
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_ENHANCE_MATERIAL_COMBO_RET)		//增幅材料合成返回
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_FLY_UP_STATUS)		//同步飞升状态

		// 资金冻结(服务器之间协议)
		CL_DEFINE_PROTOCOLID(SCENE_CURRENCY_FROZEN_APPLY_REQ)	//node->scene 请求资金冻结
		CL_DEFINE_PROTOCOLID(SCENE_CURRENCY_FROZEN_APPLY_RES)	//scene->node
		CL_DEFINE_PROTOCOLID(SCENE_CURRENCY_FROZEN_OP_REQ)		//node->scene 资金冻结操作
		CL_DEFINE_PROTOCOLID(SCENE_CURRENCY_FROZEN_OP_RES)		//scene->node

		// 铭文
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_OPEN_REQ)		//client->server铭文开孔请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_OPEN_RES)		//server->client铭文开孔返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_MOUNT_REQ)		//client->server铭文镶嵌请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_MOUNT_RES)		//server->client铭文镶嵌返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_EXTRACT_REQ)	//client->server铭文摘取请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_EXTRACT_RES)	//server->client铭文摘取返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_SYNTHESIS_REQ)	//client->server铭文合成请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_SYNTHESIS_RES)	//server->client铭文合成返回
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_DESTROY_REQ)	//client->server铭文碎裂请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_INSCRIPTION_DESTROY_RES)	//server->client铭文碎裂返回

		// 限定商城套装
		CL_DEFINE_PROTOCOLID(SCENE_MALL_FASHION_LIMITED_SUIT_STATUS_REQ)		// 限定商城套装条件查询
		CL_DEFINE_PROTOCOLID(SCENE_MALL_FASHION_LIMITED_SUIT_STATUS_RES)		// 限定商城套装条件返回

		// 装备方案
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_SCHEME_SYNC)			// 装备方案同步
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_SCHEME_WEAR_REQ)		// 装备方案穿戴请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_SCHEME_WEAR_RES)		// 装备方案穿戴请求

		// 宝珠转换
		CL_DEFINE_PROTOCOLID(SCENE_BEAD_CONVERT_REQ)		//client->scene宝珠转换请求
		CL_DEFINE_PROTOCOLID(SCENE_BEAD_CONVERT_RES)		//scene->client宝珠转换返回

		// 装备转换
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_CONVERT_REQ)		//client->scene装备转换请求
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_CONVERT_RES)		//scene->client装备转换返回

		// 植树节种树请求
		CL_DEFINE_PROTOCOLID(SCENE_ACTVE_PLANT_REQ)			//client->scene种树请求
		CL_DEFINE_PROTOCOLID(SCENE_ACTVE_PLANT_RES)			//scene->clinet种树返回
		// 植树节鉴定请求
		CL_DEFINE_PROTOCOLID(SCENE_ACTVE_PLANT_APPRA_REQ)	//client->scene鉴定请求
		CL_DEFINE_PROTOCOLID(SCENE_ACTVE_PLANT_APPRA_RES)	//client->scene鉴定返回

		CL_DEFINE_PROTOCOLID(SCENE_UNLOCK_ROLE_STORAGE_REQ)	//解锁角色仓库请求
		CL_DEFINE_PROTOCOLID(SCENE_UNLOCK_ROLE_STORAGE_RES)	//解锁角色仓库返回

		//武器打造
		CL_DEFINE_PROTOCOLID(SCENE_WEAPON_BUILD_REQ)		//请求打造武器
		CL_DEFINE_PROTOCOLID(SCENE_WEAPON_BUILD_RES)		//请求打造武器返回

		//npc交互相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_NPC)
		CL_DEFINE_PROTOCOLID(SCENE_VISIT_NPC)				//访问npc
		CL_DEFINE_PROTOCOLID(SCENE_SHOW_NPC_DIALOG)			//显示npc对话框
		CL_DEFINE_PROTOCOLID(SCENE_CLICK_NPC_OPTION)		//点击npc选项
		CL_DEFINE_PROTOCOLID(SCENE_GATHER_RESOURCE)			//采集资源
		CL_DEFINE_PROTOCOLID(SCENE_NPCSHOP_ITEMS_REQ)		//请求npc商品列表
		CL_DEFINE_PROTOCOLID(SCENE_NPCSHOP_ITEMS_RET)		//返回npc商品列表
		CL_DEFINE_PROTOCOLID(SCENE_NPCSHOP_BUYITEM)			//购买物品
		//任务相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_TASK)
		CL_DEFINE_PROTOCOLID(SCENE_VISIT_TASK)				//访问一个任务
		CL_DEFINE_PROTOCOLID(SCENE_SHOW_TASK_DIALOG)		//显示任务对话框
		CL_DEFINE_PROTOCOLID(SCENE_ACCEPT_TASK)				//接一个任务
		CL_DEFINE_PROTOCOLID(SCENE_SUBMIT_TASK)				//提交一个任务
		CL_DEFINE_PROTOCOLID(SCENE_ABANDON_TASK)			//放弃一个任务
		CL_DEFINE_PROTOCOLID(SCENE_TASK_LIST)				//任务列表
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_NEWTASK)			//通知新接任务
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_DELETETASK)		//通知删除一个任务，交掉或放弃
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_TASK_STATUS)		//通知任务状态变更
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_TASK_VAR)			//通知任务变量
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_DAILYTASK_TIMES)	//上线同步日常任务次数
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_DAILYTASK_TIMES)	//更新日常任务次数
		CL_DEFINE_PROTOCOLID(SCENE_LEGEND_TASK_LIST_REQ)	//请求 传奇之路列表
		CL_DEFINE_PROTOCOLID(SCENE_LEGEND_TASK_LIST_RES)	//响应 传奇之路列表
		CL_DEFINE_PROTOCOLID(SCENE_SUBMIT_LEGEND_TASK)		//提交 传奇之路
		CL_DEFINE_PROTOCOLID(SCENE_RESET_TASK_SYNC)			//重置任务
		CL_DEFINE_PROTOCOLID(SCENE_TASK_QUICK_SUBMIT)		//快速提交				废弃
		CL_DEFINE_PROTOCOLID(SCENE_TASK_SYNC_DESCRIPTION)	//转换阵营时同步描述
		CL_DEFINE_PROTOCOLID(SCENE_TASK_SHOW_SYNC_PLOT)		//服务器向客户端同步任务剧情信息
		CL_DEFINE_PROTOCOLID(SCENE_TASK_SHOW_SYNC_CHAPTER)	//服务器向客户端同步任务剧情章信息
		CL_DEFINE_PROTOCOLID(SCENE_TASK_SHOW_SYNC_TASK)		//服务器向客户端同步任务剧情任务信息
		CL_DEFINE_PROTOCOLID(SCENE_TASK_SHOW_QUERY_CHAPTER) //客户端向服务器查询某章剧情任务信息
		CL_DEFINE_PROTOCOLID(SCENE_DAILY_TASK_LIST)			//日常任务列表
		CL_DEFINE_PROTOCOLID(SCENE_SUBMIT_DAILY_TASK)		//提交一个日常任务
		CL_DEFINE_PROTOCOLID(SCENE_ACHIEVEMENT_TASK_LIST)	//成就列表
		CL_DEFINE_PROTOCOLID(SCENE_SUBMIT_ACHIEVEMENT_TASK)	//提交一个成就
		//活动任务
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ACTIVETASK_STATUS)		//通知活动任务状态变更
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ACTIVETASK_VAR)			//通知活动任务变量变更
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ACTIVETASK_LIST)			//同步活动任务列表
		CL_DEFINE_PROTOCOLID(SCENE_ACTIVETASK_SUBMIT)				//提交活动任务
		CL_DEFINE_PROTOCOLID(SCENE_SIGNIN_REPAIR)					//补签

		//VIP 日常
		CL_DEFINE_PROTOCOLID(SCENE_SUBMIT_ALL_DAILY_TASK)		//完成所有日常任务
		CL_DEFINE_PROTOCOLID(SCENE_SET_TASK_ITEM_REQ)			//请求上交任务物品
		CL_DEFINE_PROTOCOLID(SCENE_SET_TASK_ITEM_RES)			//响应上交任务物品
		CL_DEFINE_PROTOCOLID(SCENE_REFRESH_CYCLE_TASK)			//刷新循环任务

		//活动
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ACTIVITIS)			//同步活动信息
		CL_DEFINE_PROTOCOLID(SCENE_REST_TIME_RET)					//七日剩余时间返回
		CL_DEFINE_PROTOCOLID(SCENE_REST_TIME_REQ)					//七日剩余时间查询

		//积分奖励
		CL_DEFINE_PROTOCOLID(SCENE_DAILY_SCORE_REWARD_REQ)			//请求领取每日积分奖励
		CL_DEFINE_PROTOCOLID(SCENE_DAILY_SCORE_REWARD_RES)			//响应领取每日积分奖励

		//进度礼包
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PHASE_GIFT)			//同步进度礼包
		CL_DEFINE_PROTOCOLID(SCENE_TAKE_PHASE_GIFT_REQ)			//领取进度礼包奖励

		//运营活动
		CL_DEFINE_PROTOCOLID(WS_SYNC_OP_ACTIVITY_DATA)			//world->scene同步运营活动配置
		CL_DEFINE_PROTOCOLID(WS_OP_ACTIVITY_CHANGE)				//world->scene运营活动状态改变
		CL_DEFINE_PROTOCOLID(SC_SYNC_OPACTIVITY_DATA)			//scene->client 同步运营活动data
		CL_DEFINE_PROTOCOLID(SC_SYNC_OPACTIVITY_TASKS)			//scene->client 同步运营活动任务
		CL_DEFINE_PROTOCOLID(SC_SYNC_OPACTIVITY_TASK_CHANGE)	//scene->client 同步运营活动任务变化
		CL_DEFINE_PROTOCOLID(CS_OPACTIVITY_TAKE_REWARD_REQ)		//client->scene 领取活动任务奖励请求
		CL_DEFINE_PROTOCOLID(SC_OPACTIVITY_STATE_CHANGE)		//scene->client 同步运营活动状态改变
		CL_DEFINE_PROTOCOLID(SC_ACTBOARD_REQ)					//client->scene 活动推荐版请求
		CL_DEFINE_PROTOCOLID(SC_ACTBOARD_RES)					//scene->client 活动推荐版返回
		CL_DEFINE_PROTOCOLID(SC_CDK_VERIFY_RES)					//center->scene CDK验证返回

		CL_DEFINE_PROTOCOLID(SCENE_INIT_NOTIFY_LIST)			//scene->client 初始化通知列表
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_NOTIFY_LIST)			//scene->client 更新通知列表
		CL_DEFINE_PROTOCOLID(SCENE_DELETE_NOTIFY_REQ)			//client->scene 请求删除通知

		//成就积分奖励
		CL_DEFINE_PROTOCOLID(SCENE_ACHIEVEMENT_SCORE_REWARD_REQ)			//请求领取成就积分奖励
		CL_DEFINE_PROTOCOLID(SCENE_ACHIEVEMENT_SCORE_REWARD_RES)			//请求领取成就积分奖励
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_TASK_INFO_REQ)	//client->scene 运营活动任务信息请求

		//师门任务相关
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MASTER_DAILY_TASK_LIST)		//scene->client 同步师门任务数据
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MASTER_ACADEMIC_TASK_LIST) //scene->client 同步师门学业成长任务数据
		
		//设置相关
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN)					//client->scene 签到/补签
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN_RET)				//scene->client 签到/补签结果返回
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN_QUERY)					//client->scene 查询签到情况
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN_QUERY_RET)				//scene->client 查询签到情况返回
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN_COLLECT)                  //client->scene 领取累计签到奖励
		CL_DEFINE_PROTOCOLID(SCENE_NEW_SIGNIN_COLLECT_RET)              //scene->clien 领取累计签到奖励返回


		CL_DEFINE_PROTOCOLID(SCENE_SECRET_COIN_REQ)              //神秘卖场硬币查询
		CL_DEFINE_PROTOCOLID(SCENE_SECRET_COIN_RES)              //神秘卖场硬币查询
		
		//设置相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_SETTING)
		//CL_DEFINE_PROTOCOLID(SCENE_SET_QUICKBAR)			//设置快捷栏
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_SKILLBAR_REQ)	//请求技能栏交换位置  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_SKILLBAR_RES)	//响应技能栏交换位置  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_ITEMBAR_REQ)	//请求物品栏交换位置  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_EXCHANGE_ITEMBAR_RES)	//响应物品栏交换位置  noted by hch
		CL_DEFINE_PROTOCOLID(SCENE_SAVEOPTIONS_REQ)			//设置选项请求
		CL_DEFINE_PROTOCOLID(SCENE_CHANGENAME_REQ)			//改名
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_CHANGENAME_TOWORLD)	//通知world改名
		CL_DEFINE_PROTOCOLID(SCENE_SET_FASHION_SHOW)		//客户端向服务器请求设置时装显示开关
		CL_DEFINE_PROTOCOLID(SCENE_CHANGESEX_REQ)			//改性别
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_CHANGESEX_TOWORLD)	//通知world改性别
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_APPONPANEL)		//通知服务器图标设置到qq面板上了
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_OCCU)				//请求转职			by huchenhui
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_FUNC_UNLOCK)		//功能解锁
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SERVICE_SWITCH)		//同步系统开关
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_SERVICE_SWITCH)	//修改系统开关
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_CHANGENAME_REQ)	//检查改名合法性
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_CHANGENAME_RES)
		CL_DEFINE_PROTOCOLID(SCENE_CHANGENAME_RES)			//改名返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_WEAPON_BAR_REQ)			//设置武器栏
		CL_DEFINE_PROTOCOLID(SCENE_SET_WEAPON_BAR_RES)			//设置武器栏返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_PVP_SKILL_CONFIG_REQ)	//设置pvp技能配置请求
		CL_DEFINE_PROTOCOLID(SCENE_SET_PVP_SKILL_CONFIG_RES)	//设置pvp技能配置返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_GAME_SET_REQ)		//修改游戏设置请求
		CL_DEFINE_PROTOCOLID(SCENE_SET_GAME_SET_RES)		//修改游戏设置返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_GAME_SET_SYNC)		//游戏设置同步
		CL_DEFINE_PROTOCOLID(SCENE_SET_EQUAL_PVP_SKILL_CONFIG_REQ)		//设置公平竞技技能配置请求 0表示查询设置情况 1表示第一次设置
		CL_DEFINE_PROTOCOLID(SCENE_SET_EQUAL_PVP_SKILL_CONFIG_RES)		//设置公平竞技技能配置响应 0表示未设置 1表示已设置
		CL_DEFINE_PROTOCOLID(SCENE_REPORT_NOTIFY)			//通知服务器客户端进行了举报
		CL_DEFINE_PROTOCOLID(SCENE_SET_SHORTCUT_KEY_REQ)	//游戏快捷键设置请求
		CL_DEFINE_PROTOCOLID(SCENE_SET_SHORTCUT_KEY_RES)	//游戏快捷键设置返回
		CL_DEFINE_PROTOCOLID(SCENE_SET_SHORTCUT_KEY_SYNC)	//游戏快捷键设置同步

		//持续动作相关
		//持续动作相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ACTION)
		CL_DEFINE_PROTOCOLID(SCENE_BEGIN_ACTION)			//通知开始一个动作
		CL_DEFINE_PROTOCOLID(SCENE_SUSPEND_ACTION)			//中断一个动作
		//交易相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_TRADE)
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_NOTIFY_BEGIN)			//通知交易开始
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_UPDATEITEMS_REQ)		//请求更新道具
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_UPDATESILVER_REQ)		//请求更新银币
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_SYNC_SELFITEMS)		//同步自己交易道具
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_NOTIFY_OTHER_ADDITEM)	//通知对方增加道具
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_NOTIFY_OTHER_REMOVEITEM)	//通知对方移除道具
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_SYNC_SILVER)			//同步银币
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_SET_STATUS)			//设置交易状态
		CL_DEFINE_PROTOCOLID(SCENE_TRADE_SYNC_STATUS)			//同步交易状态
		
		//拍卖行
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_AUCTION)
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_REFRESH_REQ)			//刷新拍卖行时间请求
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_REFRESH_RES)			//刷新拍卖行时间返回
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_BUY_BOOTH_REQ)		//购买拍卖行栏位请求
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_BUY_BOOTH_RES)		//购买拍卖行栏位返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_AUCTION_ABNORMAL)		//通知拍卖行异常
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_ABNORMAL_RECORD_REQ)	//拍卖行异常记录查询
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_ABNORMAL_RECORD_RES)	//拍卖行异常记录返回
		CL_DEFINE_PROTOCOLID(SCENE_ABNORMAL_TRANS_REMOVE_MAIL_ITEM_REQ)	//异常交易扣除邮件中的道具
		CL_DEFINE_PROTOCOLID(SCENE_ABNORMAL_TRANS_REMOVE_MAIL_ITEM_RES)	//扣除邮件中的道具返回
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_CHECK_PACKAGE_REQ)	//拍卖行检查包裹请求
		CL_DEFINE_PROTOCOLID(SCENE_AUCTION_CHECK_PACKAGE_RET)	//拍卖行检查包裹返回

		//邮件相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_MAIL)
		CL_DEFINE_PROTOCOLID(SCENE_MAIL_CHECKPACKAGE_REQ)		//邮件检查包裹请求
		CL_DEFINE_PROTOCOLID(SCENE_MAIL_CHECKPACKAGE_RET)		//邮件检查包裹返回
		CL_DEFINE_PROTOCOLID(SCENE_MAIL_GIVEITEMS)				//给道具
		CL_DEFINE_PROTOCOLID(SCENE_MAIL_REMOVECOST_REQ)			//扣除邮件消耗
		CL_DEFINE_PROTOCOLID(SCENE_MAIL_REMOVECOST_RET)			//扣除邮件消耗返回
		//队伍系统
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_TEAM)
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_TEAMMEMBER_LEAVESCENE)//通知队友离开场景
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_TEAMMEMBER_POS)			//同步队友位置变化
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_TEAMMEMBER_AVATAR)		//同步队员外观
		CL_DEFINE_PROTOCOLID(SCENE_TEAM_MATCH_START_REQ)		//请求开始组队匹配
		CL_DEFINE_PROTOCOLID(SCENE_TEAM_MATCH_START_RES)		//组队匹配开始返回
		CL_DEFINE_PROTOCOLID(SCENE_TEAM_MATCH_CANCEL_REQ)		//请求取消组队匹配
		CL_DEFINE_PROTOCOLID(SCENE_TEAM_MATCH_CANCEL_RES)		//取消组队匹配返回

		//关系相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_RELATION)
		CL_DEFINE_PROTOCOLID(SCENE_MASTER_GIVE_EQUIP)			//师傅赠送装备
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_SYNC)				//上线或切场景同步关系列表
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_NOTIFY_NEW)			//通知新关系
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_NOTIFY_DEL)			//通知删除关系
		CL_DEFINE_PROTOCOLID(SCENE_ADDONPAYREQ)					//请求代付


		// 没用了
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_SYNC_INTIMACY)		//同步亲密度
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_FIND_PLAYER_REQ)	//追杀时查询目标玩家
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_FIND_PLAYER_RET)	//查询目标玩家返回
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_CHASEKILL)			//场景处理追杀
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_GET_BLESSING_EXP)	//领取祝福经验
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_ADD_BLESSING_EXP)	//加祝福经验
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_ADD_BEBLESSED_EXP)	//加被祝福经验
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_SYNC_BLESSTIMES)	//同步祝福次数
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_INFO_REQ)	//请求好友互赠信息
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_INFO_RET)	//返回好友互赠信息
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_DRAW)		//领取 
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_GIVE)		//赠送
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_TOFRIEND_REQ)	//给好友请求
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_PRESENT_TOFRIEND_RET)	//给好友返回
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_GIVE_FLOWER)        //赠送鲜花
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_GIVE_FLOWER_REQ)	//赠送鲜花请求scene-world-scene
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_GIVE_FLOWER_RET)	//赠送鲜花返回
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_SYNC_MARRY)			//同步婚姻到场景
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_NOTI_BLESSING_EXP)	//通知客户端祝福获得的经验
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_QUERY_PLAYER_REQ)	//查询玩家信息
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_QUERY_PLAYER_RET)	//查询玩家信息
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_QUERY_PLAYER_DETAILS_REQ)	//查询玩家详细信息
		CL_DEFINE_PROTOCOLID(SCENE_RELATION_QUERY_PLAYER_DETAILS_RET)	//查询玩家详细信息
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_HIRE_RED_POINT_REQ)	//设置招募红点

		// 道具事务
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ITEM_THING)
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_THING_START_REQ)	// 开始事务
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_THING_START_RES)	// 开始事务返回
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_THING_START_CANCEL)// 开始事务取消
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_THING_COMMIT_REQ)	// 事务提交
		CL_DEFINE_PROTOCOLID(SCENE_ITEM_THING_COMMIT_RES)	// 事务提交返回

		//公会相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_GUILD)
		CL_DEFINE_PROTOCOLID(SCENE_GUILD_EXCHANGE_REQ)			//公会兑换

		// 没用了
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_CONTRIBUTE)			//部落捐献
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_GIVE_TRIBE_ITEM)		//检查放置道具到部落
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_GIVE_TRIBE_ITEM_RET)	//检查放置道具到部落返回
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_TAKE_TRIBE_ITEM)		//检查从部落取出道具
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_TAKE_TRIBE_ITEM_RET)	//检查从部落取出道具返回
		CL_DEFINE_PROTOCOLID(SCENE_TAKE_TRIBE_ITEM)				//从部落取出道具
		CL_DEFINE_PROTOCOLID(SCENE_SEND_TRIBE_LOG)				//发送部落日志
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MEMBER_POWER)			//--废弃
		CL_DEFINE_PROTOCOLID(SCENE_GET_TRIBE_EXP)				//获得部落经验
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_GET_TRIBE_EXP_TIMES)	//获得部落经验的次数
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_USE_TRANSSKILL_REQ)	//使用护送技能请求
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_USE_TRANSSKILL_RET)	//使用护送技能返回
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_SUMMON_ESCORT_REQ)		//请求召出护送目标
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_CHANGENAME_REQ)		//部落改名
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_PICK_CHEST_REQ)		//客户端向服务器请求拾取部落宝箱
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_SUMMON_ANIMAL_REQ)		//世界服务器向场景服务器请求召唤部落神兽
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_ENTER_MAP_REQ)			//世界服务器向场景服务器请求进入部落营地
		CL_DEFINE_PROTOCOLID(SCENE_TRIBE_RECRUIT)				//世界服务器通知场景服务器部落招募
		//副本相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_COPYSCENE)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_COPYSCENE_LEFTTIME)		//通知副本剩余时间
		CL_DEFINE_PROTOCOLID(SCENE_ASK_RESET_CUSTOMSPASS)		//询问重置关卡
		CL_DEFINE_PROTOCOLID(SCENE_RESET_CUSTOMSPASS)			//重置关卡
		CL_DEFINE_PROTOCOLID(SCENE_COPYSCENE_NOTIFY_PASSED)		//通知副本通关
		CL_DEFINE_PROTOCOLID(SCENE_SEND_COPYSCENE_TIMES)		//上线发送副本次数
		CL_DEFINE_PROTOCOLID(SCENE_SYNS_COPYSCENE_TIMES)		//同步副本次数
		CL_DEFINE_PROTOCOLID(SCENE_NOITYF_BOSSKILLED)			//通知boss击杀
		CL_DEFINE_PROTOCOLID(SCENE_COPYSCENE_REGISTER_TEAM)		//副本队伍登记
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_COPYSCENE)				//进入副本
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_KICKOUT_COPYSCENE)	//通知要被踢出副本
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_COPYSCENE_PARAM)		//同步副本参数
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PLAYER_TMP_DATA)		//同步玩家临时数据
		CL_DEFINE_PROTOCOLID(SCENE_COPYSCENE_OPERATE)			//副本操作
		CL_DEFINE_PROTOCOLID(SCENE_QUICK_PASS_COPYSCENE)		//副本立即完成
		CL_DEFINE_PROTOCOLID(SCENE_QUICK_PASS_DROPITEM)			//副本立即完成掉落
		CL_DEFINE_PROTOCOLID(SCENE_BABEL_INFO_REQ)				//请求同步通天塔信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_BABEL_INFO)				//同步通天塔信息
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_BABEL_REQ)				//请求进入通天塔
		CL_DEFINE_PROTOCOLID(SCENE_MERCHANT_INFO_REQ)           //请求神秘商店物品信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MERCHANT_INFO)			//同步神秘商店物品信息
		CL_DEFINE_PROTOCOLID(SCENE_BUY_MERCHANT_ITEM)			//购买神秘商店信息
		CL_DEFINE_PROTOCOLID(SCENE_GET_BABEL_REWAR_REQ)			//请求获取奖励
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_DAY_REWARD_INFO)        //同步每日领取信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MERCHANT_BUY_INFO)		//同步神秘商店购买信息
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_MERCHANT_REQ)			//更新神秘商店
		CL_DEFINE_PROTOCOLID(SCENE_RESET_BABEL_REQ)             //金贝重置通天塔
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_OPENBABEL_INFO)         //同步开启的通天塔
		CL_DEFINE_PROTOCOLID(SCENE_PASS_BABEL_TIMES_IFNO)		//通层对应的奖励倍数
		CL_DEFINE_PROTOCOLID(SCENE_BC_PLAYER_TMP_DATA)			//广播玩家临时数据到场景服
		CL_DEFINE_PROTOCOLID(SCENE_GROWTH_SYNC_SCENE_INFO)		//同步传送点成长副本信息
		CL_DEFINE_PROTOCOLID(SCENE_GROWTH_CLEAN_REQ)			//扫荡开始请求
		CL_DEFINE_PROTOCOLID(SCENE_GROWTH_STOPCLEAN_REQ)		//停止扫荡请求
		CL_DEFINE_PROTOCOLID(SCENE_GROWTH_QUICK_PASS_REQ)		//立即完成请求
		CL_DEFINE_PROTOCOLID(SCENE_GROWTH_SYNC_CLEAN_INFO)	    //同步扫荡信息
		CL_DEFINE_PROTOCOLID(SCENE_DRAGON_TOWER_INFO_REQ)       //封龙塔信息请求
		CL_DEFINE_PROTOCOLID(SCENE_DRAGON_TOWER_INFO_RET)       //封龙塔信息返回
		CL_DEFINE_PROTOCOLID(SCENE_CLEAN_DRAGON_TOWER_REQ)		//扫荡封龙塔请求
		CL_DEFINE_PROTOCOLID(SCENE_RESET_CLEANCOUNTS_REQ)		//重置封龙塔扫荡次数
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_DRAGON_TOWER_REQ)		//挑战封龙塔请求
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_CLEAN_ITEMS_INFO)		//同步扫荡封龙塔获得物品

		CL_DEFINE_PROTOCOLID(SCENE_SYNC_COPYSCENE_PLAYERDATA)	//同步指定玩家的副本参数
		
		//宠物探险
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_PETEXPLORE)
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_SEND_INFO)		//上线发送宠物探险信息
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_MAKETEAM_REQ)		//组建队伍请求
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_MAKETEAM_RET)		//组建队伍返回
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_START_REQ)		//请求出发
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_START_RET)		//出发返回
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_STOP_REQ)			//请求停止
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_ACCELERATE_REQ)	//加速请求
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_SEND_RESULTS)		//发送收获
		CL_DEFINE_PROTOCOLID(SCENE_PETEXPLORE_NOTIFY_EVENT)		//通知新事件
		// 坐骑相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_MOUNT)
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_OPERATE_REQ)			//客户端向服务端请求坐骑相关操作
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_SYNC_ATTR)				//服务端向客户端同步坐骑属性
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_SYNC_TRANS_SHOW)		//服务端向客户端同步坐骑幻化升级
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_SYNC_SAMPLE)			//服务端向客户端同步坐骑样本
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_SYNC_RIDE_COMBAT_STATE)//服务端向客户端同步骑乘战斗状态开关
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_CULTURE_THUMP_NOTIFY)	//服务端通知客户端培养产生暴击
		CL_DEFINE_PROTOCOLID(SCENE_MOUNT_INC_EXP_NOTIFY)		//服务端通知客户端增加经验
		//战场相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_BATTLESCENE)
		CL_DEFINE_PROTOCOLID(SCENE_SEND_BATTLEPLAYER_LIST)		//发送战场玩家列表
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_NEW_BATTLEPLAYER)		//通知新到战场玩家
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_DEL_BATTLEPLAYER)		//通知删除战场玩家
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_BATTLEPLAYER_SCORE)	//更新战场玩家积分
		CL_DEFINE_PROTOCOLID(SCENE_SEND_BATTLEGROUP_LIST)		//发送战场阵营列表
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_BATTLEGROUP_DATA)		//更新战场阵营的数据
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_ENTER_REQ)		//玩家请求进入战场
		CL_DEFINE_PROTOCOLID(SCENE_REMOVE_BATTLEPLAYER)			//移除战场玩家信息
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_SUMMON_NPC)		//创建部落战的功能NPC
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_UPGRADE_NPC)		//升级部落战的功能NPC
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_UPGRADE_NPC_SUC)	//升级部落战的功能NPC成功返回消息
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_SYNC_PLAYERDATAS)//进入场景同步玩家所有数据
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_SYNC_PLAYERDATA)	//同步玩家单个数据
		CL_DEFINE_PROTOCOLID(SCENE_SEND_BATTLETRIBE_LIST)		//发送战场部落列表
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_NEW_BATTLETRIBE)		//通知新增战场部落
		CL_DEFINE_PROTOCOLID(SCENE_UPDATE_BATTLETRIBE_SCORE)	//更新战场部落积分
		CL_DEFINE_PROTOCOLID(SCENE_BATTLESCENE_SEND_PLAYERS_DATA)	//发送所有玩家自定义数据
		//排行榜相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_SORTLIST)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SORTLISTS)				//向场景同步排行榜
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SORTLIST_MINVALUE)		//同步排行榜值
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SORTLIST_ENTRY)			//同步排行榜项
		CL_DEFINE_PROTOCOLID(SCENE_SORTLIST_WATCH_DATA_REQ)		//观察数据
		CL_DEFINE_PROTOCOLID(SCENE_SORTLIST_WATCH_DATA_RET)		//观察数据返回
		CL_DEFINE_PROTOCOLID(SCENE_SORTLIST_DAILY_REWARD)		//在线玩家领取排行榜每日奖励
		CL_DEFINE_PROTOCOLID(SCENE_SORTLIST_RESET_SEASON)		//重置赛季积分
		//龙脉宝图相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_TREASURE)
		CL_DEFINE_PROTOCOLID(SCENE_TREASURE_SEARCH)				// 挖宝
		CL_DEFINE_PROTOCOLID(SCENE_TREASURE_OPEN)				// 开宝箱
		CL_DEFINE_PROTOCOLID(SCENE_TREASURE_OPEN_RET)			// 返回开宝箱结果
		CL_DEFINE_PROTOCOLID(SCENE_TREASURE_SHOW_MAP)			// 显示藏宝图信息
		//日常
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ROUTINE)
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_TODAY_SIGNINAWARD_REQ)	//请求今日登陆奖励
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_TODAY_SIGNINAWARD_RET)	//返回今日登陆奖励
		CL_DEFINE_PROTOCOLID(SCENE_ACTIVE_DEGREE_REQ)			//活跃度请求
		CL_DEFINE_PROTOCOLID(SCENE_ACTIVE_DEGREE_RET)			//活跃度返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ACTIVEEVENT_FINISHED)	//通知活跃项完成
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_SYNC_BASEINFO)		//上线同步日常基本信息			
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_GETBOX_REQ)			//领取日常箱子
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_GETBOX_RET)			//领取日常箱子返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_RESET_ACTIVEDEGREE)	//通知重置活跃度
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_SIGNIN_AWARD_REQ)	//签到奖励请求  --废弃
		CL_DEFINE_PROTOCOLID(SCENE_ROUTINE_SIGNIN_AWARD_RET)	//签到奖励返回  --废弃
		CL_DEFINE_PROTOCOLID(SCENE_FIRST_LOGIN)					//每日首次登录通知
		CL_DEFINE_PROTOCOLID(SCENE_LAZY_EXP_REQ)				//请求经验补偿信息  --废弃
		CL_DEFINE_PROTOCOLID(SCENE_LAZY_EXP_RET)				//返回经验补偿信息  --废弃
		CL_DEFINE_PROTOCOLID(SCENE_LAZY_EXP_GET)				//获得经验补偿  --废弃
		CL_DEFINE_PROTOCOLID(SCENE_SIGNIN_INFO_REQ)				//请求签到信息
		CL_DEFINE_PROTOCOLID(SCENE_SIGNIN_INFO_RET)				//返回签到信息
		CL_DEFINE_PROTOCOLID(SCENE_SIGNIN)						//签到、补签
		CL_DEFINE_PROTOCOLID(SCENE_GET_SIGNIN_GIFTBAG)			//领取签到礼包
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_WORLD_EXP_RETRIEVE)		//服务器向客户端同步世界经验找回信息
		CL_DEFINE_PROTOCOLID(SCENE_WORLD_EXP_RETRIEVE_REQ)		//客户端向服务器请求找回世界经验
		CL_DEFINE_PROTOCOLID(SCENE_WORLD_EXP_RETRIEVE_RET)		//服务器向客户端返回找回世界经验结果
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_EXP_RETRIEVE_REQ)		//客户端向服务器请求经验找回信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_EXP_RETRIEVE_RET)		//服务器向客户端返回经验找回信息
		CL_DEFINE_PROTOCOLID(SCENE_EXP_RETRIEVE_REQ)			//客户端向服务器请求经验找回
		CL_DEFINE_PROTOCOLID(SCENE_EXP_RETRIEVE_RET)			//服务器向客户端返回经验找回结果
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ALL_GET_STATE)			//服务器向客户端同步经验找回全部领取状态

		//自动挂机
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_AUTOHOOK)
		CL_DEFINE_PROTOCOLID(SCENE_AUTOHOOK_SYNC)				// 同步自动挂机设置
		//礼包
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_GIFTBAG)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ONLINE_GIFTBAG)			//同步在线礼包
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_LEVEL_GIFTBAG)			//同步等级礼包
		CL_DEFINE_PROTOCOLID(SCENE_GET_GIFTBAG)					//领取礼包
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_ACTIVEGIFTBAG)			//同步活动礼包
		CL_DEFINE_PROTOCOLID(SCENE_GET_ACTIVEGIFTBAG)			//领取活动礼包
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_POINTUSED)				//同步Q点消费量
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_FESTIVAL_COUNT)			//同步节日活动计数
		CL_DEFINE_PROTOCOLID(SCENE_FESTIVAL_COUNT_REQ)			//节日活动计数请求
		CL_DEFINE_PROTOCOLID(SCENE_FESTIVAL_COUNT_RET)			//节日活动计数返回
		CL_DEFINE_PROTOCOLID(SCENE_BUY_GIFTBAG)					//客户端向服务端请求购买礼包
		CL_DEFINE_PROTOCOLID(SCENE_GIFT_PACK_INFO_REQ)			//礼包信息请求
		CL_DEFINE_PROTOCOLID(SCENE_GIFT_PACK_INFO_RES)			//礼包信息返回

		//vip
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_VIP)
		CL_DEFINE_PROTOCOLID(SCENE_VIP_BUY_ITEM_REQ)				//请求购买VIP物品
		CL_DEFINE_PROTOCOLID(SCENE_VIP_BUY_ITEM_RES)				//返回购买VIP物品
		CL_DEFINE_PROTOCOLID(SCENE_GIVE_MONEY_MANAGE_REWARD_REQ)	//请求获取理财奖励
		CL_DEFINE_PROTOCOLID(SCENE_GIVE_MONEY_MANAGE_REWARD_RES)	//返回理财奖励
		//数据中心
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_DATACENTER)
		CL_DEFINE_PROTOCOLID(SCENE_DATACENTER_UDPLOG)			//发送UDP日志到数据中心
		CL_DEFINE_PROTOCOLID(SCENE_CUSTOM_LOG_REPORT)			//scene上报自定义日志
		//护送
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ESCORT)
		CL_DEFINE_PROTOCOLID(SCENE_ESCORT_INFO_REQ)				//请求护送信息
		CL_DEFINE_PROTOCOLID(SCENE_ESCORT_INFO_RET)				//返回护送信息
		CL_DEFINE_PROTOCOLID(SCENE_REFRESH_ESCORT_QUALITY_REQ)	//刷新护送请求
		CL_DEFINE_PROTOCOLID(SCENE_REFRESH_ESCORT_QUALITY_RET)	//刷新护送返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ESCORT_EVENT)			//通知护送事件到world
		CL_DEFINE_PROTOCOLID(SCENE_REMOVE_ESCORTTARGET_REQ)		//请求删除护送目标
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_ESCORT_FAILED)		//通知护送失败
		CL_DEFINE_PROTOCOLID(SCENE_FIND_ESCORTTARGET_REQ)		//查找护送目标请求
		CL_DEFINE_PROTOCOLID(SCENE_FIND_ESCORTTARGET_RET)		//查找护送目标返回
		CL_DEFINE_PROTOCOLID(SCENE_ACCEPT_ESCORT_TASK)			//领取护送任务
		//称号
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_TITLE)
		CL_DEFINE_PROTOCOLID(SCENE_USE_TITLE)					//使用称号
		CL_DEFINE_PROTOCOLID(SCENE_GIVE_TITLE)					//给称号
		//祈福抽奖
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_LOTTERY)
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_DRAW)				// 抽奖
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_RESULT)				// 抽奖结果
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_RECORD)				// 保存抽奖记录
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_TAKEOUT_ALL)			// 取出祈福仓库内的全部道具
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_SYNC_STAR)			// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_OPEN_STAR)			// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_SYNC_STAR_ITEM)		// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_STAR_DRAW)			// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_STAR_DRAW_RET)		// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_GET_STAR_ITEM)		// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_TWSK_SYNC_INFO)				// 同步天外石库信息
		CL_DEFINE_PROTOCOLID(SCENE_TWSK_REFRESH_SELL_LIST)		// 刷新天外石库的购买信息
		CL_DEFINE_PROTOCOLID(SCENE_TWSK_BUY)					// 购买天外石库道具
		CL_DEFINE_PROTOCOLID(SCENE_TWSK_BUY_RET)				// 购买天外石库道具返回
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_STAR_REMOVE_ITEM)	// ==废弃
		CL_DEFINE_PROTOCOLID(SCENE_LOTTERY_STAR_REMOVE_ITEM_RET)// ==废弃
		//开服活动
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE,	FUNCTION_GSACTIVITY)
		CL_DEFINE_PROTOCOLID(SCENE_GSACTIVITY_STORE_GOLD)		//开服存金贝
		CL_DEFINE_PROTOCOLID(SCENE_GSACTIVITY_SYNC_CAISHEN)		//同步财神信息
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_HOF)					//进入名人堂
		//客服后台
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_CONSOLE)
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_QUERY_PLAYER)		//客服后台查询玩家信息
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_RELOAD_SCRIPTS)		//通知重新加载脚本
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_PLAYER_CONTROL)		//客服后台操作玩家
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_PHONE_BIND)			//手机绑定
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_CURRENCY_FROZEN)		//处理资产冻结
		CL_DEFINE_PROTOCOLID(SCENE_CONSOLE_REMOVE_CREDIT_POINT)	//移除信用点券

		//邀请好友
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_INVITEGAME)
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_DAILY_INFO_REQ)		//获取每日邀请信息
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_DAILY_INFO_RET)		//返回每日邀请信息
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_INVITEELIST_REQ)		//请求被邀请者列表
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_INVITEELIST_RET)		//返回被邀请者列表
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_NOTIFY_INVITED)		//通知已邀请新玩家
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_GET_GIFTBAG)			//领取日常礼包
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_GET_RECALLAWARD_REQ)	//领取召回奖励
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_SYNC_INVITEE_DATA)	//刷新单个邀请者状态
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_GET_CONSUMEAWARD_REQ)	//领取消费返利请求
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_GET_CONSUMEAWARD_RET)	//领取消费返利返回
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_BIND_KLPLAYER)		//绑定恐龙玩家
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_SYNC_KLACTIVITY)		//同步恐龙活动
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_NOTIFY_GIFTBAG)		//通知领取礼包
		CL_DEFINE_PROTOCOLID(SCENE_INVITE_EXCHANGE_CDKEY)		//兑换cdkey
		//支付相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_BILLING)
		CL_DEFINE_PROTOCOLID(SCENE_BILLING_SEND_GOODS)			//发货
		CL_DEFINE_PROTOCOLID(SCENE_BILLING_SEND_GOODS_RES)		//发货
		CL_DEFINE_PROTOCOLID(SCENE_BILLING_SEND_GOODS_NOTIFY)	//通知客户端发货了
		//黑暗塔
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_DARKTOWER)
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_SYNC_INFO)			//同步黑暗塔信息
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_SYNC_ITEMS)		//同步黑暗塔道具
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_GETITEM_REQ)		//领取道具
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_LEAVE_REQ)			//离开
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_LIGHTON)			//点亮
		CL_DEFINE_PROTOCOLID(SCENE_DARKTOWER_SET_EXPBOTTLE)		//设置经验瓶子
		//剧情
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_STORY)
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_STOP_STORY)			//通知结束一个剧情
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_NEW_BOOT)				//通知新手引导
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_BOOT_FLAG)			//通知弱引导
		//结婚
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_MARRIAGE)
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_VEHICLECRUISE_REQ)	//婚车巡游请求
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_VEHICLECRUISE_RET)	//婚车巡游返回
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_CAST_SUGARS_REQ)	//撒喜糖
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_RITE_REQ)			//结拜
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_INVITE_DINNER_REQ)	//宴请宾客
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_VEHICLECRUISE_END)	//婚车巡游结束
		CL_DEFINE_PROTOCOLID(SCENE_MARRIAGE_SYNC_INFO)			//同步婚礼信息
		//分享
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_FEED)
		CL_DEFINE_PROTOCOLID(SCENE_TRIGGER_FEED)				//触发feed分享
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_SENDFEED)				//通知发送了feed
		//跨服擂台
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_CROSS_GUILD_BATTLE)
		//CL_DEFINE_PROTOCOLID(SCENE_WORLDCHALLENGE_SIGNIN_REQ)
		//CL_DEFINE_PROTOCOLID(SCENE_WORLDCHALLENGE_SEND_CHALLENGERS)	
		//翅膀
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_WING)
		CL_DEFINE_PROTOCOLID(SCENE_WING_SYNC_INFO)				//同步翅膀信息
		CL_DEFINE_PROTOCOLID(SCENE_WING_LEVEL_UP)				//翅膀升级
		CL_DEFINE_PROTOCOLID(SCENE_FEATHER_LEVEL_UP)			//羽毛升级
		CL_DEFINE_PROTOCOLID(SCENE_FEATHER_INHERIT)				//羽毛传承
		CL_DEFINE_PROTOCOLID(SCENE_WING_SYNC_WATCHDATA)			//同步翅膀观察数据
		CL_DEFINE_PROTOCOLID(SCENE_FEATHER_INHERIT_SUC)			//羽毛传承成功
		//捕鱼
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_FISH)
		CL_DEFINE_PROTOCOLID(SCENE_FISH_OPERATE_REQ)			//客户端向场景服务器请求捕鱼相关操作
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_FISHING_INFO)			//场景服务器向客户端同步捕鱼进行中信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_EVENT_INFO)				//场景服务器向客户端同步捕鱼事件道具信息
		CL_DEFINE_PROTOCOLID(SCENE_TRIGGER_EVENT_REQ)			//客户端向场景服务器请求触发一个事件
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_POND_INFO)				//场景服务器向客户端同步池塘信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_FISH_INFO)				//场景服务器向客户端同步捕鱼信息(捕鱼大师界面信息)
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_FISH_MAP_SYNC_FISH)	//世界服务器向场景服务器同步个人捕鱼信息（当玩家进入捕鱼地图）
		CL_DEFINE_PROTOCOLID(SCENE_FISH_END_NOTIFY)				//世界服务器通知场景服务器捕鱼活动结束

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_DUJIE)
		CL_DEFINE_PROTOCOLID(SCENE_DUJIE_INFO_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_DUJIE_INFO_RET)
		CL_DEFINE_PROTOCOLID(SCENE_BUY_DUJIE_COUNTS_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_DUJIE_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_DUJIE_FIGHT_INFO)
		CL_DEFINE_PROTOCOLID(SCENE_ENTER_DUJIE_RET)
		CL_DEFINE_PROTOCOLID(SCENE_START_CHALLENGE_REQ)

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_DRAGONMARK)
		CL_DEFINE_PROTOCOLID(SCENE_DRAGONMARK_INFO_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_DRAGONMARK_INFO_RET)
		CL_DEFINE_PROTOCOLID(SCENE_REPAIR_DRAGONMARK_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_ACTIVATE_DRAGONMARK_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_STRENGTHEN_DRAGONMARK_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_EQUIP_DRAGONMARK_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_UNEQUIP_DRAGONMARK_REQ)
		CL_DEFINE_PROTOCOLID(SCENE_MOVE_EQUIP_MARK_REQ)

		//时装
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_FASHION)
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_OPERATE_REQ)		//客户端向服务端请求时装相关操作
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_SYNC_ATTR)		//服务端向客户端同步时装总属性
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_SYNC_COLLECT)	//服务端向客户端同步时装收集
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_SYNC_SAMPLE)		//服务端向客户端同步时装样本
		CL_DEFINE_PROTOCOLID(SCENE_FASHION_SYNC_TRANS_SHOW) //服务端向客户端同步当前幻化时装
		//跨服
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_CHANGEZONE)

		CL_DEFINE_PROTOCOLID(SCENE_CHANGEZONE_RETURN)		//请求返回原区

        // 地下城
        CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_DUNGEON)
        // 数据相关
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_INIT)		            //服务器向客户端发送地下城初始信息
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_UPDATE)		            //服务器向客户端更新地下城信息
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_HARD_INIT)	            //服务器向客户端发送地下城初始难度信息
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_HARD_UPDATE)	            //服务器向客户端更新地下城难度信息
		
        // 战斗相关
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_START_REQ)		        //客户端向服务端请求开始关卡
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_START_RES)		        //服务端返回开始关卡结果
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ENTER_NEXT_AREA_REQ)     //客户端通知服务端进入下一区域
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ENTER_NEXT_AREA_RES)     //服务端返回进入下一区域结果
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_REWARD_REQ)	            //客户端向服务端请求获取奖励
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_REWARD_RES)	            //服务端返回获取奖励结果
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RACE_END_REQ)            //客户端向服务端关卡结算
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RACE_END_RES)            //服务端返回关卡结算结果
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_OPEN_CHEST_REQ)          //客户端向服务端请求打开宝箱
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_OPEN_CHEST_RES)          //服务端向客户端返回宝箱内容
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ADD_MONSTER_DROP_ITEM)   //服务器通知客户端新增怪物掉落
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_CHEST_NOTIFY)            //服务器通知客户端开始结算宝箱流程
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_REVIVE_REQ)              //客户端请求复活
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_REVIVE_RES)              //服务器通知客户端复活返回
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_KILL_MONSTER_REQ)        //玩家杀死怪物通知
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_KILL_MONSTER_RES)        //玩家杀死怪物返回
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_CLEAR_AREA_MONSTERS)     //玩家清掉房间内所有怪了

        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_SYNC_NEW_OPENED_LIST)    //服务器向客户端同步新开放的地下城列表

		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RACE_END_DROP_REQ)		//结算掉落请求
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RACE_END_DROP_RES)		//结算掉落返回

        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_CHEST_REQ)	            //scene->world 请求结算宝箱
        CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_CHEST_RES)	            //world->scene 结算宝箱返回

        CL_DEFINE_PROTOCOLID(SCENE_RARE_ITEM_REQ)					//scene->world 请求稀有控制的物品
        CL_DEFINE_PROTOCOLID(SCENE_RARE_ITEM_RES)					//world->scene 请求稀有控制的物品
        CL_DEFINE_PROTOCOLID(SCENE_GOT_RARE_ITEM)					//scene->world 恢复稀有控制的值
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_HARD_UPDATE)	            //sceen向world更新地下城难度信息
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_BUY_TIMES_REQ)			//请求购买地下城次数
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_BUY_TIMES_RES)			//购买地下城次数返回
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RESET_AREA_INDEX_REQ)	//请求重置地下城房间索引
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_RESET_AREA_INDEX_RES)	//重置地下城房间索引返回
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ZJSL_REFRESH_BUFF_REQ)	//终极试炼地下城刷新BUFF请求
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ZJSL_REFRESH_BUFF_RES)	//终极试炼地下城刷新BUFF返回

		CL_DEFINE_PROTOCOLID(RELAY_DUNGEON_BOSS_PHASE_CHANGE)		//relay->dungeon->teamcopy地下城boss状态变化
		CL_DEFINE_PROTOCOLID(TEAMCOPY_NOTIFY_RACE_DES_DUNGEON)        //teamcopy->dungeon->relay据点被歼灭
		CL_DEFINE_PROTOCOLID(TEAMCOPY_NOTIFY_BXMS_ENER_ACC_PROG)      //teamcopy->dungeon->relay团本贝希摩斯之心能量蓄积进度
		
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ZJSL_CLEAR_GET_AWARD_REQ)	//终极试炼地下城获取全通关奖励请求
		CL_DEFINE_PROTOCOLID(SCENE_DUNGEON_ZJSL_CLEAR_GET_AWARD_RES)	//终极试炼地下城获取全通关奖励返回

		CL_DEFINE_PROTOCOLID(TEAMCOPY_ADD_RACE_REVIVE_CNT)      //teamcopy->dungeon->relay团本增加地下城的复活次数


		// 死亡之塔
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_TOWER)
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_REQ)		        //客户端向服务端请求扫荡死亡之塔
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_RES)		        //服务端返回客户端扫荡死亡之塔返回
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_RESULT_REQ)		//客户端向服务端请求死亡之塔扫荡奖励
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_RESULT_RES)		//服务端返回客户端死亡之塔扫荡奖励
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_QUICK_FINISH_REQ)	//客户端向服务端请求快速完成死亡之塔扫荡
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_QUICK_FINISH_RES)	//服务端返回客户端快速完成死亡之塔返回
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_RESET_REQ)					//客户端向服务端请求重置死亡之塔
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_RESET_RES)					//服务端返回客户端返回死亡之塔重置
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_FLOOR_AWARD_REQ)			//客户端向服务端请求死亡之塔首通奖励
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_FLOOR_AWARD_RES)			//服务端返回客户端返回死亡之塔首通奖励
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_QUERY_RESULT_REQ)		//客户端向服务端请求死亡之塔扫荡奖励（制定层数）
		CL_DEFINE_PROTOCOLID(SCENE_TOWER_WIPEOUT_QUERY_RESULT_RES)		//服务端返回客户端死亡之塔扫荡奖励

        // 匹配相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_MATCH)
        CL_DEFINE_PROTOCOLID(SCENE_MATCH_START_REQ)					//客户端请求开始匹配
        CL_DEFINE_PROTOCOLID(SCENE_MATCH_CANCEL_REQ)				//客户端请求取消匹配
        CL_DEFINE_PROTOCOLID(SCENE_SYNC_PK_STATISITC_INFO)          //向客户端同步pk统计信息
        CL_DEFINE_PROTOCOLID(SCENE_SYNC_PK_STATISITC_PROPERTY)      //向客户端同步pk统计部分信息
		CL_DEFINE_PROTOCOLID(SCENE_MATCH_PK_RACE_END)				//匹配PK结算
		CL_DEFINE_PROTOCOLID(SCENE_WUDAO_JOIN_REQ)					//客户端请求参加武道大会
		CL_DEFINE_PROTOCOLID(SCENE_WUDAO_JOIN_RES)					//参加武道大会返回
		CL_DEFINE_PROTOCOLID(SCENE_WUDAO_REWARD_REQ)				//客户端请求领取武道大会奖励
		CL_DEFINE_PROTOCOLID(SCENE_WUDAO_REWARD_RES)				//领取武道大会奖励返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_SEASON)					//通知赛季信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SEASON_LEVEL)				//通知段位变化
		CL_DEFINE_PROTOCOLID(SCENE_SEASON_PLAY_STATUS)				//通知播放状态
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SEASON_INFO)				//通知新赛季信息


		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_CHAMPION)
		CL_DEFINE_PROTOCOLID(SCENE_RECEIVE_SYNC_CHAMPION_STATUS)	//收到union同步冠军赛状态
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ENROLL_REQ)				//客户端请求报名
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ENROLL_RES)				//客户端请求报名返回
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_JOIN_PREPARE_REQ)		//客户端请求进入比赛准备区域	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_JOIN_PREPARE_RES)		//客户端请求进入比赛准备区域返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_RELIVE_REQ)				//客户端请求复活	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_RELIVE_RES)				//客户端请求复活返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_16_TABLE_REQ)			//客户端请求16强表	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_16_TABLE_RES)			//客户端请求16强表返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_16_TABLE_SYNC)			//union向scecne同步16强表	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_REQ)				//冠军赛押注	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_RES)				//冠军赛押注返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_UNION_RES)		//冠军赛押注返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_INFO_SYNC)		//冠军赛竞猜信息同步	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_OBSERVE_REQ)			//冠军赛玩家请求观战	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_OBSERVE_RES)			//冠军赛玩家请求观战返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_STATUS_REQ)			//CLIENT ->SCENE 请求冠军赛状态	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_STATUS_RES)			//请求冠军赛状态返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SELF_STATUS_REQ)			//请求自己阶段	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SELF_STATUS_RES)			//请求自己阶段返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SELF_BATTLE_RECORD_REQ)			//请求自己战绩	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SELF_BATTLE_RECORD_RES)			//请求自己战绩返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GROUP_RANK_REQ)			//请求组内排行	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GROUP_RANK_RES)			//请求组内排行返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GROUP_RECORD_REQ)			//请求一组的比赛记录	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GROUP_RECORD_RES)			//请求一组的比赛记录返回				
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_TOTAL_STATUS_REQ)			//请求冠军赛和自己阶段	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_TOTAL_STATUS_RES)			//请求冠军赛和自己阶段返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SCORE_BATTLE_RECORDS_REQ)			//请求积分赛组内战斗记录	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_SCORE_BATTLER_ECORDS_RES)			//请求积分赛组内战斗记录返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GROUP_STATUS_SYNC)			//同步16强赛单组状态	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ALL_GROUP_REQ)			//请求16强之后所有组情况	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ALL_GROUP_RES)			//请求16强之后所有组情况返回	
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ALL_GAMBLE_INFO_REQ)		//Union->Scene同步所有比赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ALL_GAMBLE_INFO_RES)		//Union->Scene同步所有比赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_RECORD_REQ)		//Union->Scene同步所有比赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GAMBLE_RECORD_RES)		//Union->Scene同步所有比赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_ALL_RACE_INFO_SYNC)		//Union->Scene同步所有比赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GEMBLE_ALREADY_BET_REQ)		//请求某押注项目中某选项已经压了多少
		CL_DEFINE_PROTOCOLID(SCENE_CHAMPION_GEMBLE_ALREADY_BET_RES)		//返回某押注项目中某选项已经压了多少
		

		//异次元石头相关  adder by huchenhui 2016.07.20
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_WARPSTONE)
		CL_DEFINE_PROTOCOLID(SCENE_WARP_STONE_UNLOCK_REQ)			//请求 客户端请求解锁次元石
		CL_DEFINE_PROTOCOLID(SCENE_WARP_STONE_UNLOCK_RES)			//响应 客户端请求解锁次元石
		CL_DEFINE_PROTOCOLID(SCENE_WARP_STONE_CHARGE_REQ)			//请求 客户端请求充能次元石
		CL_DEFINE_PROTOCOLID(SCENE_WARP_STONE_CHARGE_RES)			//响应 客户端请求充能次元石


		//随从相关  adder by huchenhui 2016.07.25
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_RETINUE)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_RETINUE_LIST)				//同步随从列表
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_RETINUE)					//同步随从
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_RETINUE_REQ)				//请求 变更跟随的随从
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_RETINUE_RES)				//响应 变更跟随的随从
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_CHANGE_SKILL_REQ)		//请求 洗练支援技能
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_CHANGE_SKILL_RES)		//响应 洗练支援技能
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_UNLOCK_REQ)				//请求 随从解锁
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_UNLOCK_RES)				//响应 随从解锁
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_LEVEL_UP_REQ)			//请求 随从升级
		CL_DEFINE_PROTOCOLID(SCENE_RETINUE_LEVEL_UP_RES)			//响应 随从升级

		//宠物相关	adder by huchenhui 2017.07.28
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_PET)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PET_LIST)					//同步宠物列表
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PET)						//增加宠物
		CL_DEFINE_PROTOCOLID(SCENE_DELELE_PET)						//删除宠物
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_PET_PROPERTY)				//同步宠物属性
		CL_DEFINE_PROTOCOLID(SCENE_SET_PET_SOLT_REQ)				//请求 设置宠物槽位
		CL_DEFINE_PROTOCOLID(SCENE_SET_PET_SOLT_RES)				//响应 设置宠物槽位
		CL_DEFINE_PROTOCOLID(SCENE_FEED_PET_REQ)					//请求 喂食宠物
		CL_DEFINE_PROTOCOLID(SCENE_FEED_PET_RES)					//响应 喂食宠物
		CL_DEFINE_PROTOCOLID(SCENE_SELL_PET_REQ)					//请求 出售宠物
		CL_DEFINE_PROTOCOLID(SCENE_SELL_PET_RES)					//响应 出售宠物
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_PET_SKILL_REQ)			//请求 变更宠物技能
		CL_DEFINE_PROTOCOLID(SCENE_CHANGE_PET_SKILL_RES)			//响应 变更宠物技能
		CL_DEFINE_PROTOCOLID(SCENE_SET_PET_FOLLOW_REQ)				//请求 宠物跟随
		CL_DEFINE_PROTOCOLID(SCENE_SET_PET_FOLLOW_RES)				//响应 宠物跟随
		CL_DEFINE_PROTOCOLID(SCENE_DEVOUR_PET_REQ)					//请求 吞食宠物
		CL_DEFINE_PROTOCOLID(SCENE_DEVOUR_PET_RES)					//响应 吞食宠物

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_ROOM)
		CL_DEFINE_PROTOCOLID(SCENE_ROOM_START_MATCH)				//开始匹配
		CL_DEFINE_PROTOCOLID(SCENE_ROOM_MATCH_PK_RACE_END)			//房间PK结算
		CL_DEFINE_PROTOCOLID(SCENE_ROOM_SYNC_INFO)					//同步房间信息到Scene

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SCORE_WAR_INFO)				//server->client 同步积分赛信息
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_SCORE_WAR_TEST)				//server->client TEST
		CL_DEFINE_PROTOCOLID(SCENE_SCORE_WAR_REWARD_REQ)			//请求积分赛奖励
		CL_DEFINE_PROTOCOLID(SCENE_SCORE_WAR_REWARD_RES)			//请求积分赛奖励响应

		//服务器间通信
		CL_DEFINE_PROTOCOLID(SCENE_CROSS_SYNC_SCORE_WAR_INFO)		//CROSS->SCENE 同步积分赛信息
		CL_DEFINE_PROTOCOLID(SCENE_CROSS_SYNC_SCORE_WAR_INFO_RES)	//SCENE->CROSS 同步积分赛信息回包
		CL_DEFINE_PROTOCOLID(SCENE_CROSS_GM_SYNC)					//SCENE->CROSS GM命令


		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_2V2_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(SCENE_2V2_SYNC_SCORE_WAR_INFO)				//server->client 同步积分赛信息
		CL_DEFINE_PROTOCOLID(SCENE_2V2_SYNC_SCORE_WAR_TEST)				//server->client TEST
		CL_DEFINE_PROTOCOLID(SCENE_2V2_SCORE_WAR_REWARD_REQ)			//请求积分赛奖励
		CL_DEFINE_PROTOCOLID(SCENE_2V2_SCORE_WAR_REWARD_RES)			//请求积分赛奖励响应
		//服务器间通信
		CL_DEFINE_PROTOCOLID(SCENE_2V2_CROSS_SYNC_SCORE_WAR_INFO)		//CROSS->SCENE 同步积分赛信息
		CL_DEFINE_PROTOCOLID(SCENE_2V2_CROSS_SYNC_SCORE_WAR_INFO_RES)	//SCENE->CROSS 同步积分赛信息回包
		CL_DEFINE_PROTOCOLID(SCENE_CROSS_2V2_GM_SYNC)					//SCENE->CROSS GM命令


		//快速购买
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_QUICKBUY)
		CL_DEFINE_PROTOCOLID(SCENE_QUICKBUY_REQ)					//client -> scene 快速购买请求
		CL_DEFINE_PROTOCOLID(SCENE_QUICKBUY_RES)					//scene -> client 快速购买返回

		CL_DEFINE_PROTOCOLID(SCENE_QUICKBUY_TRANSACTION_REQ)		//scene -> world 快速购买事务请求
		CL_DEFINE_PROTOCOLID(SCENE_QUICKBUY_TRANSACTION_RES)		//world -> scene 快速购买事务返回

		//录像
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_REPLAY)
		CL_DEFINE_PROTOCOLID(SCENE_REPLAY_LIST_REQ)					// 请求对战记录
		CL_DEFINE_PROTOCOLID(SCENE_REPLAY_LIST_RES)					// 返回对战记录
		CL_DEFINE_PROTOCOLID(SCENE_REPLAY_VIEW)						// 看了一场录像
		CL_SERVER_PROTOCOLID_END(ST_SCENE)

		//计数
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_COUNT)
		CL_DEFINE_PROTOCOLID(SCENE_SYS_RECORD_REQ)			//sysrecord数据请求
		CL_DEFINE_PROTOCOLID(SCENE_SYS_RECORD_RES)			//sysrecord数据返回
		CL_DEFINE_PROTOCOLID(SCENE_SYS_RECORD_SYNC)			//sysrecord数据同步

		//运营活动
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_OPERATION)
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_VAR_SYNC)		//world->client 运营活动变量同步
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_DISCOUNT_INFO_REQ)		//client->scene 神器罐子折扣信息请求
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_DISCOUNT_INFO_SYNC)		//scene->client 神器罐子折扣信息同步
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_EXTRACT_DISCOUNT_REQ)	//client->scene 神器罐子折扣抽取请求
		CL_DEFINE_PROTOCOLID(SCENE_ARTIFACT_JAR_EXTRACT_DISCOUNT_RES)	//scene->client 神器罐子折扣抽取返回
		CL_DEFINE_PROTOCOLID(SCENE_WEEK_SIGN_NOTIFY)					//scene->client 周签到数据通知
		CL_DEFINE_PROTOCOLID(SCENE_WEEK_SIGN_BOX_NOTIFY)				//scene->client 周签到宝箱通知
		CL_DEFINE_PROTOCOLID(SCENE_WEEK_SIGN_REWARD_REQ)				//client->scene 周签到奖励领取请求
		CL_DEFINE_PROTOCOLID(SCENE_WEEK_SIGN_REWARD_RES)				//scene->client 周签到奖励领取返回
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_ACCEPT_TASK_REQ)			//client->scene 运营活动接任务请求
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_ACCEPT_TASK_RES)			//scene->client 运营活动接任务返回
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_GET_COUNTER_REQ)			//client->scene 运营活动拉取计数请求
		CL_DEFINE_PROTOCOLID(SCENE_OP_ACTIVITY_GET_COUNTER_RES)			//scene->client 运营活动拉取计数返回
		CL_DEFINE_PROTOCOLID(SCENE_CHALLENGE_SCORE_REQ)					//client->scene 查询挑战者积分
		CL_DEFINE_PROTOCOLID(SCENE_CHALLENGE_SCORE_RET)					//scene->client 查询挑战者积分返回

		//吃鸡
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_BATTLE)
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PICK_UP_ITEM_REQ)			//client->scene 拾取物品请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PICK_UP_ITEM_RES)			//scene->client 拾取物品返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_USE_SKILL_REQ)			//client->scene 使用技能请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_USE_SKILL_RES)			//scene->client 使用技能返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_BALANCE_END)				//battle->client 吃鸡结算
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_MATCH_SYNC)				//battle->client 匹配通知
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CREATE_BATTLE_REQ)		//battle->scene 通知场景创建
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_DESTROY_BATTLE)			//battle->scene 通知场景销毁
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_KILL_SOMEONE)				//battle->scene 通知场景杀死某玩家
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_SYNC_POISON_RING)			//scene->client 同步毒圈
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PICKUP_SPOILS_REQ)		//client->scene 拾取战利品请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PICKUP_SPOILS_RES)		//scene->client 拾取战利品返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_SELECT_OCCU_REQ)			//client->scene 选择职业请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_SELECT_OCCU_RES)			//scene->client 选择职业返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_SPOILS_ITEM)		//scene->client 通知战利品
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_BIRTH_TRANSFER)			//client->scene 出生传送请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_BIRTH_TRANSFER_NOTIFY)	//scene->client 出生传送广播
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_WAVE_INFO)			//battle->scene 通知每一波的信息
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_SOMEONE_DEAD)		//scene->battle 通知某个玩家死亡
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_THROW_SOMEONE_TIEM_REQ)	//client->scene 向某个玩家扔道具请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_THROW_SOMEONE_TIEM_RES)	//scene->client 向某个玩家扔道具返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_END)						//battle->scene 结算数据到scene
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_DEL_ITEM_REQ)				//client->scene 删除物品请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_DEL_ITEM_RES)				//scene->client 删除物品返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_ENTER_BATTLE_REQ)			//client->scene 进入吃鸡战场请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_ENTER_BATTLE_RES)			//client->scene 进入吃鸡战场返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CREATE_BATTLE_RES)		//battle->scene 通知场景创建
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_BALANCE_LOG)				//battle->scene 吃鸡结算日志
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NPC_NOTIFY)				//scene->client 刷出NPC
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NPC_TRADE_REQ)			//client->scene 与NPC交易请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NPC_TRADE_RES)			//scene->client 与NPC交易返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_BE_TRAPED)			//scene->client 通知踩中陷阱
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PLACE_TRAPS_REQ)			//client->scene 放置陷阱请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_PLACE_TRAPS_RES)			//scene->client 放置陷阱返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_OPEN_BOX_REQ)				//client->scene 吃鸡开宝箱请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_OPEN_BOX_RES)				//scene->client 吃鸡开宝箱返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_BEST_RANK)			//battle->client 最佳排名通知
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NOTIFY_RANK_AWARD)		//battle->scene 最佳排名奖励通知
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_SKILL_CHOICE_LIST_NOTIFY)	//scene->client 下发技能列表
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CHOICE_SKILL_REQ)			//client->scene 选择技能请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CHOICE_SKILL_RES)			//scene->client 选择技能返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NO_WAR_OPTION)			//scene->client 免战选项
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NO_WAR_CHOICE_REQ)		//client->scene 免战选择请求		
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NO_WAR_CHOICE_RES)		//scene->client 免战选择返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NO_WAR_NOTIFY)			//scene->client 免战通知
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_NO_WAR_WAIT)				//scene->client 免战等待通知
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_OCCU_LIST_REQ)			//client->scene 职业列表请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_OCCU_LIST_RES)			//scene->client 职业列表返回
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_EQUIP_CHOICE_LIST_NOTIFY)	//scene->client 下发装备列表
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CHOICE_EQUIP_REQ)			//client->scene 选择装备请求
		CL_DEFINE_PROTOCOLID(SCENE_BATTLE_CHOICE_EQUIP_RES)			//scene->client 选择装备返回

		//头像框
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_HEAD_FRAME)
		CL_DEFINE_PROTOCOLID(SCENE_HEAD_FRAME_REQ)			// client->scene 头像框请求
		CL_DEFINE_PROTOCOLID(SCENE_HEAD_FRAME_RES)			// scene->client 头像框返回
		CL_DEFINE_PROTOCOLID(SCENE_HEAD_FRAME_USE_REQ)		// client->scene 使用头像框请求
		CL_DEFINE_PROTOCOLID(SCENE_HEAD_FRAME_USE_RES)		// scene->client 使用头像框返回
		CL_DEFINE_PROTOCOLID(SCENE_HEAD_FRAME_NOTIFY)		// scene->client 头像框通知

		//荣誉
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_HONOR)
		CL_DEFINE_PROTOCOLID(SCENE_HONOR_REQ)			// client->scene 荣誉请求
		CL_DEFINE_PROTOCOLID(SCENE_HONOR_RES)			// scene->client 荣誉返回
		CL_DEFINE_PROTOCOLID(SCENE_HONOR_RED_POINT)		// scene->client 荣誉小红点

		//金币寄售
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_GOLD_CONSIGNMENT)
		CL_DEFINE_PROTOCOLID(SCENE_GOLD_CONSIGNMENT_SUBMIT_ORDER_REQ)	// 上架订单
		CL_DEFINE_PROTOCOLID(SCENE_GOLD_CONSIGNMENT_SUBMIT_ORDER_RES)
		CL_DEFINE_PROTOCOLID(SCENE_GOLD_CONSIGNMENT_DEAL_NOTIFY)	// 成交通知
		CL_DEFINE_PROTOCOLID(SCENE_CREDIT_POINT_RECORD_REQ)	// 信用点券记录
		CL_DEFINE_PROTOCOLID(SCENE_CREDIT_POINT_RECORD_RES)
		CL_DEFINE_PROTOCOLID(SCENE_GET_CREDIT_POINT)	// 获得信用点券

		//迷失地牢
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_LOST_DUNGEON)
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_CHAGE_REQ)	// client->scene 挑战迷失地牢战场请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_CHAGE_RES)	// scene->client 挑战迷失地牢战场返回
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_OPEN_REQ)	// client->scene 开启迷失地牢请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_OPEN_RES)	// scene->client 开启迷失地牢返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_TASK_LIST_RES)	// scene->client 任务列表返回
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_CHOICE_TASK_REQ)		// client->scene 选择任务请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_CHOICE_TASK_RES)		// scene->client 选择任务返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SWITCH_DUNGE_CHAGEMODE_REQ)	// client->scene 选择地下城挑战模式请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SWITCH_DUNGE_CHAGEMODE_RES)	// scene->client 选择地下城挑战模式返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SYNC_DUNGEON_TEAM_INFO)	// scene->client 同步地下城关卡组队信息
		
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_LOSTDUNGEON_PK_REQ)				// client->battle 迷失地牢战场PK请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_LOSTDUNGEON_PK_RES)				// battle->client 迷失地牢战场PK返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_TASK_LIST_REQ)		// client->scene 任务列表请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_TASK_DATA_NOTIFY)	// scene->client 任务数据通知
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_TASK_RESULT_NOTIFY)	// scene->client 任务结果通知

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_OPENBOX_REQ)	// client->scene 地牢开宝箱请求 
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_OPENBOX_RES)	// scene->client 地牢开宝箱返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SYNC_FLOOR)  // scene->client 同步楼层数据 

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SYNC_RES_LIST)  // scene->client 同步资源数据 
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SYNC_RES_ADD)  // scene->client 添加资源
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SYNC_RES_DEL)  // scene->client 删除资源

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_BOX_CHOICE_ITEM_REQ)  // client->server 宝箱选择道具请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_BOX_CHOICE_ITEM_RES)  // client->server 宝箱选择道具返回
		
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SETTLE_FLOOR_NOTIFY) // battle->scene 结算爬塔的一层
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_GET_REWARD_REQ) // client->scene 领取奖励请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_GET_REWARD_RES) // scene->client 领取奖励返回

		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_GIVEUP_REQ) // client->scene 放弃爬塔请求
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_GIVEUP_RES) // scene->clinet 放弃爬塔返回
	
		CL_DEFINE_PROTOCOLID(BATTLE_LOSTDUNGEON_SYNC_BATTLEDATA) // scene->client 同步迷失战场数据
		CL_DEFINE_PROTOCOLID(BATTLE_LOSTDUNGEON_SEE_INTELL_REQ) // client->scene 查看玩家情报请求
		CL_DEFINE_PROTOCOLID(BATTLE_LOSTDUNGEON_SEE_INTELL_RES) // scene->client 查看玩家情报返回
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_ENEMY_IN_DUNGEON)  // scene->client 敌人是否在地下城
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_KILL_TAEGET_POS_REQ)	//client->scene 查询击杀目标坐标请求
		CL_DEFINE_PROTOCOLID(SCENE_QUERY_KILL_TAEGET_POS_RES)	//scene->client 查询击杀目标坐标返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SCENE, FUNCTION_MONOPOLY)
		CL_DEFINE_PROTOCOLID(SCEME_ON_PLAYER_MONOPOLY_ROLL)		//World->Scene 通知scene玩家roll了大富翁活动

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_BATTLE, FUNCTION_LOST_DUNGEON)
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_MATH_BATTLE_REQ)			// scene->battle 匹配迷失地牢战场请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_TEAM_RACE_VOTE_NOTIFY)	// battle->client 同步地下城关卡组队信息
		CL_DEFINE_PROTOCOLID(BATTLE_TEAM_REPORT_VOTE_CHOICE)	// client->battle 玩家上报投票选项
		CL_DEFINE_PROTOCOLID(BATTLE_TEAM_VOTE_CHOICE_NOTIFY)	// battle->client 广播玩家玩家投票选项
		CL_DEFINE_PROTOCOLID(ST_BATTLE_PVP_REQ)			// scene->battle pvp请求
		CL_DEFINE_PROTOCOLID(BATTLE_EXIT_NOTIFY)		// scene->battle 玩家离开战场
		CL_DEFINE_PROTOCOLID(SCENE_LOSTDUNGEON_SETTLE_FLOOR)  // battle->scene 结算爬塔的一层
		CL_DEFINE_PROTOCOLID(BATTLE_LOSTDUNG_SYNCDATA_TOSELFSCENE)  // scene->scene 退出战场需要同步的数据
		CL_DEFINE_PROTOCOLID(BATTLE_LOSTDUNG_SYN_TEAM_ST)  // battle->scene 同步地牢队伍状态
		CL_DEFINE_PROTOCOLID(BATTLE_DESTROY_RES)		//scene->battle 战场销毁返回
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_CLIENT_LEAVE_BATTLE)	//scene->client 通知客户端离开战场
		CL_DEFINE_PROTOCOLID(BATTLE_QUERY_PLAYER_DETAIL_ONE)	//node->battleServer 查询一个玩家详细信息
		CL_DEFINE_PROTOCOLID(BATTLE_NOTIFY_TEAM_RACE_END)   // battle->scene 通知一次队伍地下城比赛结束
		CL_DEFINE_PROTOCOLID(BATTLE_SYNC_RACE_PLAYER_INFO)   // battle->scene 同步玩家战斗数据
			

		/*
		 *@brief 世界服务器协议
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_WORLD)
		//场景相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SCENE)
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_SCENE_REQ)		//将地图注册到会话
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_SCENE_RET)		//地图注册后返回
		CL_DEFINE_PROTOCOLID(WORLD_UNREGISTER_SCENE_REQ)	//注销
		CL_DEFINE_PROTOCOLID(WORLD_UNREGISTER_SCENE_RET)	//注销返回
		CL_DEFINE_PROTOCOLID(WORLD_ENTER_DYNSCENE_REQ)		//进入动态地图请求
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_PRIVATESCENE_TIMESFULL)	//通知私有地图次数已满
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_NPC_POS)		//注册npc位置
		CL_DEFINE_PROTOCOLID(WORLD_FIGURE_STATUE_SYNC)		//人物雕像创建
		//进入游戏
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ENTERGAME)
		CL_DEFINE_PROTOCOLID(WORLD_VERIFY_UNIQUE_REQ)		//验证唯一性
		CL_DEFINE_PROTOCOLID(WORLD_VERIFY_UNIQUE_RET)		//验证返回
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_PLAYER_REQ)		//将玩家注册到world
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_PLAYER_RET)		//world注册玩家返回
		CL_DEFINE_PROTOCOLID(WORLD_ALLOW_PLAYER_LOGIN)		//world通知gate玩家可以登录了
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_PLAYER_LOGIN_WAIT_INFO)	//world通知gate玩家排队信息
		CL_DEFINE_PROTOCOLID(WORLD_PLAYER_LEAVE_LOGIN_QUEUE)	//gate通知world玩家退出排队
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_PLAYER_LOGIN_STATUS)	//同步玩家登陆状态
		CL_DEFINE_PROTOCOLID(WORLD_GET_LOGIN_PUSH_INFO_REQ)		//获取登录推送信息请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_LOGIN_PUSH_INFO_RET)		//获取登录推送信息返回

		//离开游戏
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_LEAVEGAME)
		CL_DEFINE_PROTOCOLID(WORLD_LEAVEGAME_REQ)			//网关通知离开游戏
		CL_DEFINE_PROTOCOLID(WORLD_UNREGISTER_PLAYER_REQ)	//注销
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DISCONNECT)		//通知World玩家断开连接（这里只算闪断）
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_RECONN_SUCCESS)	//通知World玩家重连成功
		//objet相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_OBJECT)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_PLAYER_BASEINFO)	//同步玩家基本等级
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_KILL_PLAYER)		//通知杀死了对方
		CL_DEFINE_PROTOCOLID(WORLD_WATCH_PLAYER_REQ)		//查看玩家
		CL_DEFINE_PROTOCOLID(WORLD_PLAYER_POWER_REQ)		//请求玩家的战斗力数据
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROLE_VALUE_SCORE)	//同步角色评分
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_COUNTER_SYNC)	// world->client/scene 账号计数同步
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_DATA_SYNC)		// world->scene 同步账号数据

		//移动相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_MOVE)
		CL_DEFINE_PROTOCOLID(WORLD_FLY_TO_NPC)				//使用小飞鞋飞到npc处
		//聊天相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_CHAT)
		CL_DEFINE_PROTOCOLID(WORLD_CACHE_CHATDATA_REQ)		//缓存聊天道具数据
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_LINKDATA_REQ)		//请求聊天链接数据 
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_LINKDATA_RET)		//聊天链接数据返回
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_PETDATA_REQ)		//请求聊天宠物数据  --废弃
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_PETDATA_RET)		//宠物数据返回		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_TRANSMIT_CHAT)			//转发聊天信息
		CL_DEFINE_PROTOCOLID(WORLD_TRANSMIT_REQUEST)		//转发请求
		CL_DEFINE_PROTOCOLID(WORLD_TRANSMIT_REPLY)			//转发答复
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_HORN_RESULT)		//喇叭发言结果(no use)
		CL_DEFINE_PROTOCOLID(WORLD_OFFLINENOTIFY_REQ)		//请求离线公告
		CL_DEFINE_PROTOCOLID(WORLD_OFFLINENOTIFY_RET)		//返回离线公告
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_OFFLINENOTIFY)		//同步离线公告
		CL_DEFINE_PROTOCOLID(WORLD_SEND_OFFLINENOTIFY)		//发送离线公告
		CL_DEFINE_PROTOCOLID(WORLD_SEND_ANNOUNCEMENT)		//发送系统公告
		CL_DEFINE_PROTOCOLID(WORLD_CHAT_HORN)				//scene通过world广播喇叭给客户端
		CL_DEFINE_PROTOCOLID(WORLD_CUSTOM_SERVICE_SIGN_REQ) //请求客服系统签名
		CL_DEFINE_PROTOCOLID(WORLD_CUSTOM_SERVICE_SIGN_RES) //请求客服系统签名

		//npc交互相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_NPC)
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_WORLD_BOSS)			//查询世界BOSS状态
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_WORLD_BOSS)				//同步世界BOSS状态
		CL_DEFINE_PROTOCOLID(WORLD_TRACE_WORLD_BOSS)			//世界BOSS提醒设置
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_WORLD_BOSS)			//注册世界boss
		CL_DEFINE_PROTOCOLID(WORLD_REFRESH_WORLD_BOSS_INFO)		//刷新世界boss信息
		CL_DEFINE_PROTOCOLID(WORLD_SUMMON_WEALTH_REQ)			//刷新财神
		CL_DEFINE_PROTOCOLID(WORLD_PUBLISH_QUESTION_REQ)        //发布题目
		CL_DEFINE_PROTOCOLID(WORLD_REGISTER_COUNTRY_BOSS)		//注册阵营boss(与超级BOSS的区别：每天多个复活时间点且分布不规则)
		//邮件系统
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_MAIL)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_UNREADMAIL_NUM)		//上线通知未读邮件
		CL_DEFINE_PROTOCOLID(WORLD_MAILLIST_REQ)			//请求邮件列表
		CL_DEFINE_PROTOCOLID(WORLD_MAILLIST_RET)			//返回邮件列表
		CL_DEFINE_PROTOCOLID(WORLD_READMAIL_REQ)			//读取邮件
		CL_DEFINE_PROTOCOLID(WORLD_READMAIL_RET)			//读取邮件返回
		CL_DEFINE_PROTOCOLID(WORLD_GET_MAILITEMS)			//获取邮件附件
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_MAILSTATUS)			//同步邮件状态
		CL_DEFINE_PROTOCOLID(WORLD_SEND_MAIL)				//发送邮件
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEWMAIL)			//通知新邮件
		CL_DEFINE_PROTOCOLID(WORLD_DELETE_MAIL)				//删除邮件
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DELETEMAIL)		//通知删除邮件	
		CL_DEFINE_PROTOCOLID(WORLD_SEND_SYSMAIL)			//发送系统邮件
		CL_DEFINE_PROTOCOLID(WORLD_SEND_SYSMAIL_TO_TRIBELEADER)	//发送系统邮件给部落首领
		CL_DEFINE_PROTOCOLID(WORLD_TEST_ITEM_MAIL)			//添加详细物品邮件,测试使用
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_MAIL)				//刷新邮件
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_COPY_SEND_MAIL)		// 团本服务器发送邮件到world
		CL_DEFINE_PROTOCOLID(WORLD_UNION_SEND_MAIL)		// union服务器发送邮件到world

		//队伍系统
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_TEAM)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMINFO)			//同步队伍信息
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEW_TEAMMEMBER)	//通知新成员加入
		CL_DEFINE_PROTOCOLID(WORLD_LEAVETEAM_REQ)			//请求离开队伍
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_TEAMMEMBER_LEAVE) //通知成员离开
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMMEMBER_STATUS)	//通知成员状态改变
		CL_DEFINE_PROTOCOLID(WORLD_SET_TEAMDISTRIBUTE_MODE)	//设置分配模式
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMDISTRIBUTE_MODE)//同步分配模式
		CL_DEFINE_PROTOCOLID(WORLD_TRANSFER_TEAMMASTER)		//转让队长
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMMASTER)			//同步新队长
		CL_DEFINE_PROTOCOLID(WORLD_CREATE_TEAM)				//自身创建队伍
		CL_DEFINE_PROTOCOLID(WORLD_DISMISS_TEAM)			//解散队伍
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_PASSWD_REQ)			//请求密码
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMINFO_TOSCENE)	//同步队伍信息到场景
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DELTEAM_TOSCENE)	//通知删除队伍
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMBASE_TOSCENE)	//同步队伍模式到场景
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_MEMBERIN_TOSCENE)	//通知成员进入
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_MEMBEROUT_TOSCENE) //通知成员离开
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAM_INTIMACYLEVEL)	//同步组队时的亲密度级别
		CL_DEFINE_PROTOCOLID(WORLD_SUMMON_TEAMBOSS_REQ)		//请求召出队伍boss
		CL_DEFINE_PROTOCOLID(WORLD_SUMMON_TEAMBOSS_RET)		//召出队伍boss返回
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_BROADCAST_NOTIFY)	//广播公告
		CL_DEFINE_PROTOCOLID(WORLD_SCENE_CREATETEAM_REQ)	//场景请求创建队伍
        CL_DEFINE_PROTOCOLID(WORLD_QUERY_TEAM_LIST)	        //查询队伍列表
        CL_DEFINE_PROTOCOLID(WORLD_QUERY_TEAM_LIST_RET)     //查询队伍列表返回
        CL_DEFINE_PROTOCOLID(WORLD_SET_TEAM_OPTION)		    //设置队伍属性
        CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAM_OPTION)	    //同步队伍目标
        CL_DEFINE_PROTOCOLID(WORLD_CREATE_TEAM_RES)         //创建队伍返回
        CL_DEFINE_PROTOCOLID(WORLD_JOIN_TEAM_RES)           //加入队伍返回
        CL_DEFINE_PROTOCOLID(WORLD_TEAM_MASTER_OPER_SYNC)   //同步队长操作
        CL_DEFINE_PROTOCOLID(WORLD_TEAM_CHANGE_POS_STATUS_REQ)  //请求修改位置状态（打开或关闭）
        CL_DEFINE_PROTOCOLID(WORLD_TEAM_CHANGE_POS_STATUS_SYNC) //同步位置状态改变
        CL_DEFINE_PROTOCOLID(WORLD_TEAM_READY_REQ)          //准备或者取消
		CL_DEFINE_PROTOCOLID(WORLD_CHANGE_TEAM_SETTINGS_REQ)		//请求修改队伍设置
		CL_DEFINE_PROTOCOLID(WORLD_CHANGE_TEAM_SETTINGS_SYNC)		//同步修改队伍设置
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMMEMBER_STATUS_TOSCENE)	//同步队员状态到SceneServer
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAMMEMBER_AVATAR)			//同步队员外观信息
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_NOTIFY_NEW_REQUESTER)		//通知有玩家请求加入
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_REQUESTER_LIST_REQ)			//请求者列表
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_REQUESTER_LIST_RES)			//返回请求者列表
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_PROCESS_REQUESTER_REQ)		//请求处理请求者（同意、拒绝）
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_PROCESS_REQUESTER_RES)		//处理请求者返回
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_RACE_VOTE_NOTIFY)			//通知开始地下城投票
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_REPORT_VOTE_CHOICE)			//玩家上报投票选项
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_INVITE_RES)					//队伍邀请返回
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_INVITE_NOTIFY)				//通知玩家队伍邀请
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_REQUEST_RESULT_NOTIFY)		//通知玩家队伍请求处理结果
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_VOTE_CHOICE_NOTIFY)			//广播玩家玩家投票选项
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_MATCH_RESULT_NOTFY)			//通知组队匹配结果
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_MATCH_START_REQ)			//请求组队匹配
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_MATCH_CANCEL_REQ)			//请求取消组队匹配
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_MATCH_CANCEL_RES)			//取消组队匹配返回
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_QUERY_COND_REQ)				//向scene请求组队开启条件信息（剩余次数）
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_QUERY_COND_RES)				//scene返回组队开启条件信息（剩余次数）
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TEAM_MEMBER_PROPERTY)		//同步成员属性
		CL_DEFINE_PROTOCOLID(WORLD_CHANGE_ASSIST_MODE_REQ)			//修改助战选项
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_INVITE_CLEAR_NOTIFY)		//清除队伍邀请
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_INVITE_SYNC_ATTR)			//同步队伍属性给被邀请者
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_DUNGEON_RACE_START)			//组队地下城开始
		CL_DEFINE_PROTOCOLID(WORLD_TEAM_DUNGEON_RACE_OVER)			//组队地下城结束
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_TEAM_KICK)				//组队解散倒计时状态

			

		//关系系统
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_RELATION)
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_PLAYER_REQ)		//通过名字查询玩家
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_PLAYER_RET)		//返回玩家信息
		CL_DEFINE_PROTOCOLID(WORLD_ADDTO_BLACKLIST)			//添加到黑名单
		CL_DEFINE_PROTOCOLID(WORLD_REMOVE_RELATION)			//移除关系
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEWRELATION)		//通知新关系
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DELRELATION)		//通知删除关系
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_RELATIONDATA)		//同步关系数据
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_RELATION_LIST)		//同步关系列表
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_FIND_PLAYERS_REQ)	//查找玩家列表请求
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_FIND_PLAYERS_RET)	//查找玩家列表返回
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_PRESENT_GIVE)		//赠送
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_RELATION)			//client->sever 更新关系
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ONOFFLINE)			//同步上下线状态
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_PLAYER_ONLINE_REQ)	//client->ws 请求更新玩家上下线状态
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_PLAYER_ONLINE_RES)	//ws->client 返回更新玩家上下线状态
		CL_DEFINE_PROTOCOLID(WORLD_SET_MASTER_NOTE_REQ)			//师傅设置收徒公告
		CL_DEFINE_PROTOCOLID(WORLD_SET_MASTER_NOTE_RES)			//师傅设置收徒公告返回
		CL_DEFINE_PROTOCOLID(WORLD_SET_RECV_DISCIPLE_STATE_REQ)		//师傅设置是否收徒
		CL_DEFINE_PROTOCOLID(WORLD_SET_RECV_DISCIPLE_STATE_RES)		//师傅设置是否收徒返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_MASTER_SETTING_REQ)	//请求师傅设置信息
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_MASTER_SETTING_RES)	//请求师傅设置信息返回
		CL_DEFINE_PROTOCOLID(WORLD_ADDONPAYREQ)					//请求代付
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ADDONPAY_DATA)			//同步一条新增代付
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ALL_ADDONPAY_DATA)			//初始化同步所有的代付消息
		CL_DEFINE_PROTOCOLID(WORLD_ADDONPAYREPLY)					//回复代付
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_PLAYER_DETAILS_REQ)		//通过查询玩家详细信息
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_PLAYER_DETAILS_RET)		//返回玩家详细信息
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_MASTER_GIVE_REQ)				//scene->world 师傅赠送检查次数
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_MASTER_GIVE_RES)			//world->scene 师傅赠送检查次数返回

		CL_DEFINE_PROTOCOLID(WORLD_CHASE_KILL)				//追杀仇人
		CL_DEFINE_PROTOCOLID(WORLD_SET_ONLINE_NOTIFY)		//设置上线通知
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_ADD_INTIMACY)	//增加亲密度
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_QUICK_MAKE_FRIENDS)	//一键征友
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_NOTIFY_BLESSED)		//通知被祝福
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_SET_CLOSEFRIEND)	//设置为密友
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_REPORT_CHEAT)		//汇报自己作弊了
	
		CL_DEFINE_PROTOCOLID(WORLD_SET_PLAYER_REMARK_REQ)				 //client->world	 设置玩家备注请求
		CL_DEFINE_PROTOCOLID(WORLD_SET_PLAYER_REMARK_RES)				 //world->client	 设置玩家备注返回

		//师徒相关
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_DISCIPLE_QUESTIONNAIRE_REQ)	//client->world设置徒弟问卷调查
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_DISCIPLE_QUESTIONNAIRE_RES)  //world->client设置徒弟问卷调查返回
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_MASTER_QUESTIONNAIRE_REQ)	//client->world设置师傅问卷调查
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_MASTER_QUESTIONNAIRE_RES)    //world->client设置师傅问卷调查返回
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEW_MASTERSECT_RELATION)        //world->client通知新同门关系
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_MASTERSECT_RELATIONDATA)         //world->client同步同门关系数据
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_MASTERSECT_RELATION_LIST)        //world->client同步同门关系列表
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_MASTERSECT_RELATION_REQ)		 //client->world 更新同门关系
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DEL_MASTERSECT_RELATION)		 //world->client 删除同门关系同步
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_RELATION_QUESTIONNAIRE)			 //world->client 同步师徒问卷调查
		CL_DEFINE_PROTOCOLID(WORLD_DISCIPLE_FINISH_SCHOOL_REQ)			 //client->world 请求徒弟出师
		CL_DEFINE_PROTOCOLID(WORLD_DISCIPLE_FINISH_SCHOOL_RES)			 //world->client 请求徒弟出师返回
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_MASTERDISCIPLE_PUNISH_TIME)		 //world->client 同步师徒拜师收徒惩罚时间

		//师门任务相关
		CL_DEFINE_PROTOCOLID(WORLD_PUBLISH_MASTER_DAILY_TASK_REQ)	     //client->world 发布师门日常任务请求
		CL_DEFINE_PROTOCOLID(WORLD_PUBLISH_MASTER_DAILY_TASK_RES)	     //world->client 发布师门日常任务返回
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_PUBLISH_MASTERTASK_TO_SCENE)	 //world->scene  通知scene发布师门任务
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_PUBLISH_MASTERTASKRES_TO_WORLD)	 //scene->world  通知world发布师门任务结果
		CL_DEFINE_PROTOCOLID(WORLD_GET_DISCIPLE_MASTERTASKS_REQ)         //client->world  获取徒弟师门任务数据请求	
		CL_DEFINE_PROTOCOLID(WORLD_GET_DISCIPLE_MASTERTASKS_RES)         //world->client  获取徒弟师门任务数据返回	
		CL_DEFINE_PROTOCOLID(WORLD_GET_DISCIPLE_MASTERTASKS_TOSCENE_REQ) //world->scene  请求scene获取徒弟师门任务数据
		CL_DEFINE_PROTOCOLID(WORLD_GET_DISCIPLE_MASTERTASKS_TOSCENE_RES) //scene->world  scene获取徒弟师门任务数据请求返回
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MASTERTASKSHAREDATA_TO_WORLD)   //scene->world scene同步师门离线数据到world
		CL_DEFINE_PROTOCOLID(WORLD_REPORT_MASTER_DAILY_TASK_REQ)	    //client->world 徒弟汇报师门任务完成请求
		CL_DEFINE_PROTOCOLID(WORLD_REPORT_MASTER_DAILY_TASK_RES)	    //world->client 徒弟汇报师门任务完成返回
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_MASTERDAILYTASK_REQ_TOSCENE)   //world->scene  检查师门任务是否完成
		CL_DEFINE_PROTOCOLID(SCENE_CHECK_MASTERDAILYTASK_REQ_TOWORLD)   //scene->world  检查师门任务是否完成返回
		CL_DEFINE_PROTOCOLID(WORLD_RECEIVE_MASTERDAILYTASK_REWARD_REQ)	//client->world  领取师门日常任务完成奖励请求
		CL_DEFINE_PROTOCOLID(WORLD_RECEIVE_MASTERDAILYTASK_REWARD_RES)	//world->client  领取师门日常任务完成奖励返回
		CL_DEFINE_PROTOCOLID(WORLD_RECEIVE_MASTERACADEMIC_REWARD_REQ)   //client->world  徒弟领取师门成长奖励请求
		CL_DEFINE_PROTOCOLID(WORLD_RECEIVE_MASTERACADEMIC_REWARD_RES)   //world->client  徒弟领取师门成长奖励返回
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_GIVE_MASTERGIFT_REQ_TOSCENE)	//world->scene	 通知scene发放师徒任务礼包
		CL_DEFINE_PROTOCOLID(SCENE_NOTIFY_GIVE_MASTERGIFT_RES_TOWORLD)	//scene->world	 通知world发放师徒任务结果
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_FINSCHOOL_REWARD)				//world->client  通知出师奖励信息
		CL_DEFINE_PROTOCOLID(WORLD_AUTOMATIC_FINSCHOOL_REQ)				//client->world	 自动出师请求
		CL_DEFINE_PROTOCOLID(WORLD_AUTOMATIC_FINSCHOOL_RES)				//world->client	 自动出师返回
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MASTERSYS_DATA_TOWORLD)			//scene->world	 同步师门系统相关值

		CL_DEFINE_PROTOCOLID(WORLD_RELATION_PRESENT_GIVE_RES)			//world->client  好友赠送返回
		CL_DEFINE_PROTOCOLID(WORLD_RELATION_MASTERDISCIPLE_ANNOUNCE_REQ) //client->world 师徒公告
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_FINSCH_EVENT)					//world->client 通知出师事件

		CL_DEFINE_PROTOCOLID(WORLD_1)		   // 暂时废弃
		CL_DEFINE_PROTOCOLID(WORLD_2)
		CL_DEFINE_PROTOCOLID(WORLD_3)	
		CL_DEFINE_PROTOCOLID(WORLD_4)

		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_INFO_REQ)					//查询招募信息
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_INFO_RES)
		CL_DEFINE_PROTOCOLID(WORLD_USE_HIRE_CODE_REQ)					//使用邀请码
		CL_DEFINE_PROTOCOLID(WORLD_USE_HIRE_CODE_RES)
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_TASK_STATUS_REQ)			//招募任务完成情况
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_TASK_STATUS_RES)
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_TASK_ACCID_LIST_REQ)		//指定id的任务完成名单
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_TASK_ACCID_LIST_RES)
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_LIST_REQ)					//查询招募列表
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_LIST_RES)
		CL_DEFINE_PROTOCOLID(WORLD_SUBMIT_HIRE_TASK_REQ)				//提交招募任务
		CL_DEFINE_PROTOCOLID(WORLD_SUBMIT_HIRE_TASK_RES)

		CL_DEFINE_PROTOCOLID(WORLD_ON_SCENE_TRIGE_TASK)					//Scene触发了招募任务同步给world
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_COIN_REQ)					//查询招募硬币数量
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_PUSH_REQ)					//查询或设置招募是否已推送
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_ALREADY_BIND_REQ)			//查询有没有在别的服绑定
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_HIRE_ALREADY_BIND_RES)			//查询有没有在别的服绑定返回
			
		CL_DEFINE_PROTOCOLID(SCENE_SYNC_MASTER_DAILY_TASK_COMP)			//scene->world 通知师门日常任务完成

		//公会
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_GUILD)
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CREATE_REQ)			//创建公会
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CREATE_RES)			//创建公会返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LEAVE_REQ)				//离开公会
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LEAVE_RES)				//离开公会返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_JOIN_REQ)				//加入公会
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_JOIN_RES)				//加入公会返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LIST_REQ)				//请求公会列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LIST_RES)				//返回公会列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_REQUESTERS_REQ)		//查询请求入公会的列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_REQUESTERS_RES)		//返回请求入公会的列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_NEW_REQUESTER)			//通知新的入公会请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_PROCESS_REQUESTER)		//处理公会请求者
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_PROCESS_REQUESTER_RES)	//处理公会请求者
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHANGE_POST_REQ)		//修改职务
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHANGE_POST_RES)		//修改职务返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_KICK_REQ)				//踢人
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_KICK_RES)				//踢人返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SYNC_BASE_INFO)		//上线或新加入公会发送初始数据
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MEMBER_LIST_REQ)		//请求部落成员列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MEMBER_LIST_RES)		//返回部落成员列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MODIFY_DECLARATION)	//修改公会宣言
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MODIFY_NAME)			//修改公会名
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MODIFY_ANNOUNCEMENT)	//修改公会公告
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SEND_MAIL)				//发送公会邮件
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SYNC_INFO)				//同步公会修改信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_OPER_RES)				//通用操作返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_UPGRADE_BUILDING)		//升级建筑
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DONATE_REQ)			//请求捐赠
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DONATE_LOG_REQ)		//请求捐赠日志
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DONATE_LOG_RES)		//返回捐赠日志
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_UPGRADE_SKILL)			//升级技能
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DISMISS_REQ)			//解散公会
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CANCEL_DISMISS_REQ)	//取消公会解散
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LEADER_INFO_REQ)		//请求会长信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_LEADER_INFO_RES)		//返回会长信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_ORZ_REQ)				//请求膜拜
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_TABLE_JOIN_REQ)		//请求加入圆桌会议
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_TABLE_NEW_MEMBER)		//通知客户端有新的圆桌会议成员
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_TABLE_DEL_MEMBER)		//通知客户端删除圆桌会议成员
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_TABLE_FINISH)			//通知客户端的圆桌会议完成
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_PAY_REDPACKET_REQ)		//请求发自费红包
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_REQ)			//请求公会战报名
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RES)			//公会战报名返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_INSPIRE_REQ)	//请求鼓舞
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_INSPIRE_RES)	//鼓舞返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RECEIVE_REQ)	//请求领取奖励
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RECEIVE_RES)	//领取奖励返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RECORD_REQ)		//请求领地战斗记录
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RECORD_RES)		//领地战斗记录返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RECORD_SYNC)	//领地战斗记录同步
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_TERRITORY_REQ)	//请求公会领地信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_TERRITORY_RES)	//返回公会领地信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_RACE_END)		//单次战斗结束
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_END)			//公会战战斗结束
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_SELF_SORTLIST_REQ)	//公会战自身排行请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_SELF_SORTLIST_RES)	//公会战自身排行返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_INVITE_NOTIFY)				//公会邀请通知
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_STATUS_SYNC)		//公会战状态通知
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHALLENGE_REQ)				//公会宣战报名
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHALLENGE_RES)				//公会宣战返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHALLENGE_INFO_REQ)		//请求公会宣战信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_CHALLENGE_INFO_SYNC)		//同步公会宣战信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_INSPIRE_INFO_REQ)	//请求公会战鼓舞信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_INSPIRE_INFO_RES)	//返回公会战鼓舞信息
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_STORAGE_SETTING_REQ)			//请求公会仓库设置
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_STORAGE_SETTING_RES)			//返回公会仓库设置
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_LOTTERY_REQ)			//请求公会战抽奖
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_BATTLE_LOTTERY_RES)			//返回公会战抽奖
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_STORAGE_LIST_REQ)				//请求公会仓库列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_STORAGE_LIST_RES)				//返回公会仓库列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_STORAGE_ITEM_SYNC)				//同步公会仓库物品
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_ADD_STORAGE_REQ)				//请求放入公会仓库
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_ADD_STORAGE_RES)				//返回放入公会仓库
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DEL_STORAGE_REQ)				//请求删除公会仓库物品
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DEL_STORAGE_RES)				//返回删除公会仓库物品
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_WATCH_STORAGE_ITEM_REQ)			//查看公会仓库详细

		CL_DEFINE_PROTOCOLID(WORLD_GUILD_WATCH_CAN_MERGER_REQ)			                   //查看可兼并的公会列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_WATCH_CAN_MERGER_RET)			                   //查看可兼并的公会列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MERGER_REQUEST_OPERATOR_REQ)                      //兼并操作，包括申请兼并，取消申请兼并
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_MERGER_REQUEST_OPERATOR_RET)                      //兼并操作，包括申请兼并，取消申请兼并
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_RECEIVE_MERGER_REQUEST_REQ)                       //收到兼并请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_RECEIVE_MERGER_REQUEST_RET)                       //收到兼并请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_WATCH_HAVED_MERGER_REQUEST_REQ)                   //查看本公会收到的兼并申请列表的协议
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_WATCH_HAVED_MERGER_REQUEST_RET)                   //查看本公会收到的兼并申请列表的协议
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_ACCEPT_OR_REFUSE_OR_CANCLE_MERGER_REQUEST_REQ)    //同意，拒绝公会兼并申请，取消已同意的申请
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_ACCEPT_OR_REFUSE_OR_CANCLE_MERGER_REQUEST_RET)    //同意，拒绝公会兼并申请，取消已同意的申请
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SYNC_MERGER_INFO)                                 //同步公会兼并相关信息
		
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SET_JOIN_LEVEL_REQ)		//设置加入公会等级请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SET_JOIN_LEVEL_RES)		//设置加入公会等级返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_EMBLEM_UP_REQ)				//公会徽记升级请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_EMBLEM_UP_RES)				//公会徽记升级返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SET_DUNGEON_TYPE_REQ)		//设置公会副本难度请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SET_DUNGEON_TYPE_RES)		//设置公会副本难度返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_GET_TERR_DAY_REWARD_REQ)	//公会领地每日奖励请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_GET_TERR_DAY_REWARD_RES)	//公会领地每日奖励返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_EVENT_LIST_REQ)			//client->world 获取公会事件列表
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_EVENT_LIST_RES)			//world->client 获取公会事件列表返回


		// 与其它服务器之间的协议
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SYNC_TO_SCENE)		//同步成员信息到scene
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_UPDATE_CONTRI)		//world->scene通知更新公会贡献
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_SYNC_SKILL)		//scene->world同步公会技能
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_UPDATE_SKILL)		//world->scene通知更新公会技能
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_GIVE_ITEM_REQ)		//world->scene通知领取奖励
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_GIVE_ITEM_RES)		//scene->world领取奖励回包
		CL_DEFINE_PROTOCOLID(WS_GUILD_ADDSTORAGEITEM_REQ)			//world->scene 公会仓库加道具请求
		CL_DEFINE_PROTOCOLID(SW_GUILD_ADDSTORAGEITEM_RES)			//scene->world 公会仓库加道具返回
		CL_DEFINE_PROTOCOLID(WS_GUILD_GETSTORAGEITEM_REQ)			//world->scene 公会仓库拿道具请求
		CL_DEFINE_PROTOCOLID(SW_GUILD_GETSTORAGEITEM_RES)			//scene->world 公会仓库拿道具返回
		CL_DEFINE_PROTOCOLID(SW_GUILDSTORAGE_ADD_REQ)					//scene->world 商店购买放入公会仓库请求
		CL_DEFINE_PROTOCOLID(WS_GUILDSTORAGE_ADD_RES)				//world->scene 商店购买放入公会仓库返回

		CL_DEFINE_PROTOCOLID(WORLD_GUILD_EMBLEM_SYNC_TO_SCENE)		//公会徽记同步到Scene

		CL_DEFINE_PROTOCOLID(SYNC_GUILD_EVENT_TO_WORLD)				//server->world 同步公会日志
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_HONOR_INFO_REQ)             //客户端请求公会荣誉
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_HONOR_INFO_RES)             //world -> client 公会荣誉

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_CROSS_GUILD_BATTLE)
		

		//与其他服务器之间的协议
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_TERRITORY_LIST_INFO_SYNC)	//cross->world 同步跨服领地列表信息
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_TERRITORY_INFO_SYNC)		//cross->world 同步跨服领地信息
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_RECORD_INFO_SYNC)			//cross->world 同步跨服领地战斗信息
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_END_INFO_SYNC)			//cross->world 同步结算信息
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_ENROLL_INFO_REQ)			//cross->world 拉取报名信息
		CL_DEFINE_PROTOCOLID(WORLD_CROSS_GUILD_BATTLE_ENROLL_INFO_RES)			//world->cross 拉取报名信息返回

		// 公会地下城
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_GUILD_DUNGEON)
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_INFO_REQ)			//公会地下城信息请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_INFO_RES)			//公会地下城信息返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_DAMAGE_RANK_REQ)	//公会地下城伤害排行请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_DAMAGE_RANK_RES)	//公会地下城伤害排行返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_COPY_REQ)			//公会地下城副本信息请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_COPY_RES)			//公会地下城副本信息返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_LOTTERY_REQ)		//公会地下城抽奖请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_LOTTERY_RES)		//公会地下城抽奖返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_STATUS_SYNC)		//公会地下城状态同步
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_STATUE_REQ)		//公会地下城雕像请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_STATUE_RES)		//公会地下城雕像返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_BOSS_DEAD_NOTIFY)	//公会地下城boss死亡通知

		// 公会拍卖
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_ITEM_REQ)		//拍卖行物品请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_ITEM_RES)		//拍卖行物品返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_BID_REQ)		//拍卖行出价请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_BID_RES)		//拍卖行出价返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_FIX_REQ)		//拍卖行一口价请求
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_FIX_RES)		//拍卖行一口价返回
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_AUCTION_NOTIFY)		//拍卖行通知

		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_END_NOTIFY)	//公会地下城结束通知
		CL_DEFINE_PROTOCOLID(WORLD_GUILD_DUNGEON_BOSS_ODD_BLOOD)//公会地下城boss剩余血量通知

		//副本
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_COPYSCENE)
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_TEAMLIST_REQ)		//副本队伍列表请求
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_TEAMLIST_RET)		//副本队伍列表返回
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_RECRUIT)			//副本招募
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_REGISTER_TEAM)		//副本注册队伍
		CL_DEFINE_PROTOCOLID(WORLD_ASK_COPYSCENE_DIFFICULTY)	//询问副本难度  --暂时去掉
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_SYNC_BOSS)			//同步副本boss
		CL_DEFINE_PROTOCOLID(WORLD_ASK_ENTER_COPYSCENE)			//询问进入副本
		CL_DEFINE_PROTOCOLID(WORLD_COPYSCENE_UNREGISTER_TEAM)	//取消副本注册队伍
		CL_DEFINE_PROTOCOLID(WORLD_UPDATEBABEL_INFO_REQ)		//更新通天塔信息
		CL_DEFINE_PROTOCOLID(WORLD_SYN_BABEL_INFO)				//同步通天塔信息
		CL_DEFINE_PROTOCOLID(WORLD_SYN_BABEL_INFO_REQ)			//请求同步通天塔信息	
		CL_DEFINE_PROTOCOLID(WORLD_MERCHANT_BUY_RECORD)			//请求保存神秘商店购买信息
		CL_DEFINE_PROTOCOLID(WORLD_MERCHANT_BUY_RECORD_REQ)		//请求同步神秘商店购买信息
		//战场
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_BATTLESCENE)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_ENTER_BATTLESCENE)	//通知玩家进入战场
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_LEAVE_BATTLESCENE)	//通知玩家离开战场
		CL_DEFINE_PROTOCOLID(WORLD_BATTLESCENE_ENTER_REQ)		//请求进入战场
		CL_DEFINE_PROTOCOLID(WORLD_BATTLESCENE_INFO_REQ)		//请求战场信息
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_BATTLESCENE_INFO)		//更新战场信息
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_BATTLE_FINISHED)		//通知战斗结束
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_PLAYER_BATTLE_RESULT)	//同步玩家战场结果
		//排行榜
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SORTLIST)
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_REQ)				//排行榜请求
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_RET)				//排行榜返回
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_WATCH_DATA_REQ)		//查看排行榜数据
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_UPDATE_REQ)			//请求更新排行榜
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_DELETEENTRY_REQ)	//删除排序项
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_OWNER_CHANGED_REQ)	//更新拥有者
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_SUMMONSPIRIT_REQ)	//随机召唤等级排行榜前几名替身
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_SUMMONSPIRIT_RET)	//召唤等级排行榜替身返回
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_REMOVESPIRIT_REQ)	//删除排行榜替身
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_SELFINFO_REQ)		//查询自身的排行榜信息
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_SELFINFO_RET)		//自身排行榜信息返回
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_BATTLE_REQ)			//--废弃
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_BATTLE_RET)			//--废弃
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_NEAR_REQ)			//请求自身名次附件排名列表
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_VISIT_REQ)			
		CL_DEFINE_PROTOCOLID(WORLD_SORTLIST_VISIT_RET)			
		//商城
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_MALL)
		CL_DEFINE_PROTOCOLID(WORLD_MALL_BUY)					// 购买商城道具
		CL_DEFINE_PROTOCOLID(WORLD_MALL_BUY_RET)				// 购买商城道具返回
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_ITEM_REQ)			// 请求商城商品
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_ITEM_RET)			// 请求商城商品返回
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_ITEM_DETAIL_REQ)	// 请求商城商品礼包详细
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_ITEM_DETAIL_RET)	// 请求商城商品礼包详细返回

		CL_DEFINE_PROTOCOLID(WORLD_MALL_CHECK_BUY)				// 检查购买商城道具请求
		CL_DEFINE_PROTOCOLID(WORLD_MALL_CHECK_BUY_RET)			// 检查购买商城道具请求返回
		CL_DEFINE_PROTOCOLID(WORLD_MALL_LIMITED_ITEM_CHANGE)	// 同步限量商品数量变化
		CL_DEFINE_PROTOCOLID(WS_REFRESH_LIMITEBUYNUM)			// w->s刷新限购数量
		CL_DEFINE_PROTOCOLID(SW_REFRESH_LIMITEBUYNUM)			// s->w刷新限购数量返回

		CL_DEFINE_PROTOCOLID(CW_MALL_BATCH_BUY_FASHION_REQ)			// c->w批量买商城时装
		CL_DEFINE_PROTOCOLID(WC_MALL_BATCH_BUY_FASHION_RES)			// s->c批量买商城时装

		CL_DEFINE_PROTOCOLID(WORLD_MALL_GIFT_PACK_ACTIVATE_REQ)		// 请求激活商城限时礼包(cliet-->world)
		CL_DEFINE_PROTOCOLID(WORLD_MALL_GIFT_PACK_ACTIVATE_RET)		// 请求激活商城限时礼包返回
		CL_DEFINE_PROTOCOLID(MALL_GIFT_PACK_ACTIVATE_REQ)			// 请求激活商城限时礼包(scene-->world)
		CL_DEFINE_PROTOCOLID(MALL_GIFT_PACK_ACTIVITY_SYNC_STATE)	// 同步商城限时礼包活动状态
		CL_DEFINE_PROTOCOLID(WORLD_MALL_PERSONAL_TAILOR_SYNC_STATE)	// 同步商城私人订制状态
		CL_DEFINE_PROTOCOLID(WORLD_MALL_ACTIVATE_COND_REQ)			// 商城触发条件请求
		CL_DEFINE_PROTOCOLID(WORLD_LOAD_CONDITION_ACTIVATE_NOTIFY)	// 加载商城触发条件数据库返回
		CL_DEFINE_PROTOCOLID(WORLD_GET_MALL_ITEMS_BY_ITEM_ID_REQ)	// 获取商城道具请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_MALL_ITEMS_BY_ITEM_ID_RES)	// 获取商城道具返回
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_SINGLE_ITEM_REQ)		// 商城查询单个商品请求
		CL_DEFINE_PROTOCOLID(WORLD_MALL_QUERY_SINGLE_ITEM_RES)		// 商城查询单个商品返回
		CL_DEFINE_PROTOCOLID(WORLD_PLAYER_MALL_BUY_GOT_INFO_SYNC)	// world->client 玩家拥有的商城购买获得物同步
		CL_DEFINE_PROTOCOLID(WORLD_PUSH_MALL_ITEMS)					// world->client 推送商城商品
		CL_DEFINE_PROTOCOLID(WORLD_GET_RECHARGE_PUSH_ITEMS_REQ)		// 获取充值推送道具列表请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_RECHARGE_PUSH_ITEMS_RES)		// 获取充值推送道具列表返回
		CL_DEFINE_PROTOCOLID(WORLD_BUY_RECHARGE_PUSH_ITEM_REQ)		// 购买充值推送道具请求
		CL_DEFINE_PROTOCOLID(WORLD_BUY_RECHARGE_PUSH_ITEM_RES)		// 购买充值推送道具返回
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_RECHARGE_PUSH_REQ)			// 检测充值推送请求
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_RECHARGE_PUSH_RES)			// 检测充值推送返回
		CL_DEFINE_PROTOCOLID(WORLD_SCENE_BUY_RECHARGE_PUSH_REQ)		// 场景购买充值推送请求
		CL_DEFINE_PROTOCOLID(WORLD_SCENE_BUY_RECHARGE_PUSH_RES)		// 场景购买充值推送返回


		//日常
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ROUTINE)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_CLIENT_ACTIVITY)		//通知活动
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_SCENE_ACTIVITY)		//通知场景活动

		CL_DEFINE_PROTOCOLID(WORLD_SYNC_CLIENT_ACTIVITIES)		//同步活动列表到客户端
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_DETAIL_REQ)			//活动详情请求
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_DETAIL_RET)			//活动详情返回
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_TAKE_REWARD_REQ)	//活动领取奖励请求
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_TAKE_REWARD_RET)	//活动领取奖励返回
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_SCENE_ACTIVITIES)		//同步活动列表到场景
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ACTIVITITY_COUNTER)     //scene-world同步活动变量
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_COUNTER_WINDOW)       //client-world通知窗口状态
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_TASK_SEND_REWARDS)  //world->scene 发送活动任务奖励
		
		//运营活动
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_OPERATION)
		CL_DEFINE_PROTOCOLID(CW_CDK_VERIFY_REQ)					//client->world CDK验证请求
		CL_DEFINE_PROTOCOLID(CS_CDK_VERIFY_RES)					//scene->client CDK验证返回
		CL_DEFINE_PROTOCOLID(WC_CDK_VERIFY_REQ)					//world->center CDK验证请求
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_MONSTER_REQ)		//client->world 请求活动怪物信息
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_MONSTER_RES)		//client->world 返回活动怪物信息
		CL_DEFINE_PROTOCOLID(WORLD_GM_OP_ACTIVITY_REQ)			//world->center 向gm请求运营活动
		CL_DEFINE_PROTOCOLID(WORLD_ACTIVITY_TABS_SYNC)			//world->client 活动页签信息同步
		CL_DEFINE_PROTOCOLID(WORLD_FIRST_RETURN_SYNC)			//world->scene 首次回归同步


		//部落战争
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_TRIBEWAR)
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_QUERY_ALLTERRITORIES)		// 查询全部领土信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_SYNC_ALLTERRITORIES)		// 同步全部领土信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_QUERY_TERRITORY)			// 查询领土竞价信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_SYNC_TERRITORY)				// 同步领土竞价信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_BID)						// 竞价
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_LIST_REQ)					// 请求领土战列表
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_LIST_RET)					// 返回领土战列表
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_TERRITORY_ONWER)				// 同步领土所有者到scene
		CL_DEFINE_PROTOCOLID(WORLD_GET_TERRITORY)						// 部落获得领土
		CL_DEFINE_PROTOCOLID(WORLD_LOSE_TERRITORY)						// 部落失去领土
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_QUERY_SIMPLE_INFO)			// 查询全部领土的简单信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_SYNC_SIMPLE_INFO)			// 同步全部领土的简单信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_QUERY_BID_LIST)				// 查询领土的出价部落列表
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_SYNC_BID_LIST)				// 同步领土的出价部落列表
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_MELEE_INFO_REQ)				// 请求部落混战信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_MELEE_INFO_RET)				// 返回部落混战信息
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_MELEE_ENROLL)				// 部落混战报名
		CL_DEFINE_PROTOCOLID(WORLD_TRIBEWAR_MELEE_CAN_ENTER)			// 通知玩家可以进入部落混战
		//护送		
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ESCORT)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEW_ESCORTTARGET)			//通知新的护送目标
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ESCORTTARGET_POS)			//同步护送目标位置
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DEL_ESCORTTARGET)			//通知删除护送目标
		CL_DEFINE_PROTOCOLID(WORLD_REMOVE_ESCORTTARGET_REQ)			//请求删除护送目标
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_ESCORT_FAILED)			//通知护送失败(无用)
		CL_DEFINE_PROTOCOLID(WORLD_CHECK_ESCORT_STATUS)				//检查护送状态
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ESCORTTARGET_POS_ONONLLINE)	//上线同步护送目标位置
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_ESCORTTARGET_ATTACKED)	//提示运送目标受到攻击
		CL_DEFINE_PROTOCOLID(WORLD_REPLY_ESCORTTARGET_ATTACKED)		//回复护送目标受到攻击
		//拍卖行
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD,	FUNCTION_AUCTION)
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_LIST_REQ)				// 查询拍卖列表
        CL_DEFINE_PROTOCOLID(WORLD_AUCTION_LIST_RET)				// 查询拍卖列表返回
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_LIST_SYNC)				// 同步拍卖列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_SELF_LIST_REQ)			// 查询自己的拍卖列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_SELF_LIST_RES)			// 同步自己的拍卖列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_REQUEST)					// 拍卖道具
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_ADD)						// 增加一条自己的拍卖信息
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_BUY)						// 购买一个拍卖道具
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_CANCEL)					// 撤销一项拍卖
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_DEL)						// 删除一条自己的拍卖信息
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_NOTIFY_REFRESH)			// 通知客户端需要刷新拍卖列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_CHECK)					// 检查拍卖的条件
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_CHECK_RET)				// 检查拍卖返回
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_FIND_BYID)				// 根据guid查找商品
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_FIND_RET)				// 查找商品返回
        CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_REQ)          // 查找拍卖物品信息请求
        CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_RET)          // 查找拍卖物品信息返回
        CL_DEFINE_PROTOCOLID(WORLD_AUCTION_RECOMMEND_PRICE_REQ)     // 查询物品的推荐价格
        CL_DEFINE_PROTOCOLID(WORLD_AUCTION_RECOMMEND_PRICE_RES)     // 返回物品的推荐价格
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_ITEM_NUM_REQ)			// 查询拍卖行道具数量
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_ITEM_NUM_RES)			// 返回拍卖行道具数量
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_PRICES_REQ)   // 查询物品拍卖价格情况,近期交易平均价，其它玩家出售价
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_PRICES_RES)   // 查询物品拍卖价格情况,近期交易平均价，其它玩家出售价
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_GET_TRANS_TRANSACTION_REQ)	//拉取珍品交易记录请求 client->world
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_GET_TRANS_TRANSACTION_RES)	//拉取珍品交易记录返回 world->client
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_RUSY_BUY)				//抢购一个珍品拍卖道具
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_QUEYR_WAIT_HANDLE_ABNORMAL_TRANS)		// world->scene 通知查询待处理异常交易
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_SYNC_PUBDISPLAY_PAGEIDS)		//同步拍卖行公示商品显示子页签id
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_ATTENT_REQ)					//关注
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_ATTENT_RES)					//关注返回
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_PRICELIST_REQ)    //查询物品拍卖价格情况,最低售价列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_PRICELIST_RES)    //查询物品拍卖价格情况,最低售价列表
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_MAGIC_ONSALES_REQ)     //查询拍卖行指定附魔卡各等级数量请求
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_MAGIC_ONSALES_RES)     //查询拍卖行指定附魔卡各等级数量返回
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_TRANS_LIST_REQ)   //查询道具拍卖行交易记录请求
		CL_DEFINE_PROTOCOLID(WORLD_AUCTION_QUERY_ITEM_TRANS_LIST_RES)   //查询道具拍卖行交易记录返回

		//支付相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_BILLING)
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_GIVEITEM_REQ)			//发货请求
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_GIVEITEM_RET)			//返回返回
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_SIG_REQ)					//请求签名
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_SIG_RET)					//返回签名
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_ROLEINFO_REQ)			//角色信息请求
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_ROLEINFO_RET)			//角色信息返回
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_GOODS_REQ)				//获取充值商品
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_GOODS_RES)				//返回充值商品
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_CHARGE_PACKET_REQ)		//获取充值礼包商品
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_CHARGE_PACKET_RES)		//返回充值礼包商品
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_CHARGE_REQ)				//请求购买商品(这里只判断能不能买)
		CL_DEFINE_PROTOCOLID(WORLD_BILLING_CHARGE_RES)				//返回能否购买商品

		//祈福抽奖
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_LOTTERY)
		CL_DEFINE_PROTOCOLID(WORLD_LOTTERY_REC_REQ)					// 查询全服的抽奖信息
		CL_DEFINE_PROTOCOLID(WORLD_LOTTERY_REC_SYNC)				// 同步全服的抽奖信息
		// 开服活动
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_GSACTIVITY)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_GAME_STARTTIME)			// 通知客户端开服时间
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_GAME_STARTTIME_TOS)		// 通知场景服开服时间
		CL_DEFINE_PROTOCOLID(WORLD_HOF_REQ)							// 查询名人堂信息
		CL_DEFINE_PROTOCOLID(WORLD_HOF_RET)							// 返回名人堂信息
		CL_DEFINE_PROTOCOLID(WORLD_HOF_SYNC_TOS)					// 同步名人堂信息到场景服
		//世界等级
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD,	FUNCTION_WORLDLEVEL)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_WORLD_LEVEL)				// 通知客户端世界等级
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_WORLD_LEVEL_TOS)			// 通知场景服世界等级
		//竞标拍卖
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD,FUNCTION_BIDAUCTION)
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_OPEN)					//客户端通知服务器打开竞标拍卖界面		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_CLOSE)				//客户端通知服务器关闭竞标拍卖界面		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_OPEN_RET)				//打开竞标拍卖界面,服务器向客户端返回竞标拍卖公共信息		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_CONFIRM_REQ)			//客户端通知服务器竞标拍卖品			--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_CONFIRM_RET)			//服务器通知客户端竞标拍卖品结果		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_QUERY_REQ)			//客户端请求查询某个拍卖场				--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_QUERY_RET)			//服务器向客户端返回查询拍卖场结果		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_SYNC_BID_INFO)		//竞标成功服务器向客户端同步信息		--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_STATE_NOTIFY)			//服务器向客户端通知拍卖场状态			--废弃
		CL_DEFINE_PROTOCOLID(WORLD_BIDAUCTION_SAMPLE_NOTIFY)		//服务器向客户端通知接下来三天的暗拍物品		--废弃
		//结婚
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD,FUNCTION_MARRIAGE)
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_CELEBRATION_LIST_REQ)	//请求庆典列表
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_CELEBRATION_LIST_RET)	//庆典列表返回
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_ORDER_CELEBRATION_REQ)	//预约庆典请求
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_ORDER_CELEBRATION_RET)	//预约庆典返回
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GUEST_LIST_REQ)			//请求宾客列表
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GUEST_LIST_RET)			//宾客列表返回
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GUEST_INVITE_REQ)		//邀请宾客请求
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GUEST_INVITE_RET)		//邀请宾客返回
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_SYNC_GIFTLIST)			//上线同步贺礼列表
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GETGIFT_REQ)			//请求领取贺礼
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_JOIN_CELEBRATION_REQ)	//请求进入庆典
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_DIVORCE_REQ)			//强制离婚
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_VEHICLE_CRUISE_REQ)		//婚车巡游
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_SYNC_MARRYINFO)			//同步婚礼信息
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_SYNC_MARRYSTATUS)		//同步婚礼状态
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_CAST_SUGARS)			//撒喜糖
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_INVITE_DINNER_REQ)		//宴请来宾
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_SYNC_PROGRESS)			//同步婚礼进度
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GET_GUESTAWARD_REQ)		//请求领取宾客奖励
		CL_DEFINE_PROTOCOLID(WORLD_MARRIAGE_GET_GUESTAWARD_RET)		//领取宾客奖励返回
		//跨服挑战
		/*
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_CORSS_GUILD_BATTLE)
		
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SIGNIN_REQ)		//跨服挑战报名请求
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SIGNIN_RET)		//跨服挑战报名返回
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SIGNOUT)			//跨服挑战取消报名
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_INFO_REQ)			//请求今日挑战信息
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_INFO_RET)			//返回今日挑战信息
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SORTLIST_REQ)		//跨服挑战赛排名信息请求
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SORTLIST_RET)		//跨服挑战赛排名信息返回
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_GETAWARD_REQ)		//领取奖励
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_GETAWARD_RET)		//返回奖励
		CL_DEFINE_PROTOCOLID(WORLD_WORLDCHALLENGE_SYNC_RESULT)		//同步结
		*/


		//冒险通行证
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ADVENTURE_PASS)
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_STATUS_REQ)				//client->world 查询冒险通行证情况
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_STATUS_RET)				//world -> client 查询冒险通行证情况返回
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_BUY_REQ)					//client->world 购买冒险通行证
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_BUY_RET)					//world -> client 购买冒险通行证返回
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_BUY_LV_REQ)				//client->world 购买通行证等级
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_BUY_LV_RET)				//world -> client 购买冒险通行证等级返回
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_EXP_PACK_REQ)				//client->world 领取查询经验包
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_EXP_PACK_RET)				//world -> client 领取查询经验包返回
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_REWARD_REQ)				//client->world 领取通行证等级奖励
		CL_DEFINE_PROTOCOLID(WORLD_AVENTURE_PASS_REWARD_RET)				//world -> client 领取通行证等级奖励返回

		//大富翁
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_MONOPOLY)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_COIN_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_COIN_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_STATUS_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_STATUS_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_ROLL_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_ROLL_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_EXCHANGE_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_EXCHANGE_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_LIST_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_LIST_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_SELL_CARD_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_SELL_CARD_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_NOTIFY_RESULT)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_EXCHANGED_LIST_REQ)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_CARD_EXCHANGED_LIST_RES)
		CL_DEFINE_PROTOCOLID(WORLD_MONOPOLY_GM_JOIN_DUNGEON)
			

		//捕鱼
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_FISH)
		CL_DEFINE_PROTOCOLID(WORLD_FISH_OPERATE_REQ)				//客户端向世界服务器请求捕鱼积分榜的相关操作
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_FISH_SORTLIST_INFO)			//世界服务器向客户端同步捕鱼排名信息
		CL_DEFINE_PROTOCOLID(WORLD_ENTER_FISH_MAP_NOTIFY)			//场景服务器通知世界服务器玩家进入捕鱼地图
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_FISH_INFO)					//场景服务器向世界服务器同步玩家个人信息
		//跨服
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_CHANGEZONE)		
		CL_DEFINE_PROTOCOLID(WORLD_CHANGEZONE_NOTIFY)				//通知world跨服
		CL_DEFINE_PROTOCOLID(WORLD_CHANGEZONE_NOTIFY_CLIENT)		//通知客户端跨服
		CL_SERVER_PROTOCOLID_END(ST_WORLD)
		
		// 匹配相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_MATCH)
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_RACE_START)				//通知客户端比赛信息
        CL_DEFINE_PROTOCOLID(WORLD_MATCH_START_RES)                 //开始匹配返回
        CL_DEFINE_PROTOCOLID(WORLD_MATCH_CANCEL_RES)                //取消匹配返回
        CL_DEFINE_PROTOCOLID(WORLD_MATCH_RACE_START)                //通知scene玩家比赛开始
        CL_DEFINE_PROTOCOLID(WORLD_MATCH_PRACTICE_REQ)              //开始练习赛
		CL_DEFINE_PROTOCOLID(WORLD_MATCH_QUERY_FRIEND_STATUS_REQ)   //请求查询好友状态
		CL_DEFINE_PROTOCOLID(WORLD_MATCH_QUERY_FRIEND_STATUS_RES)   //请求查询好友状态
		CL_DEFINE_PROTOCOLID(WORLD_MATCH_CHANGE_SCORE)				//修改匹配积分
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_SEASON)					//同步赛季信息

		// 地下城
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_DUNGEON)
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_START_RACE_REQ)			//请求地下城战斗
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_START_RACE_RES)			//地下城战斗返回
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_LEAVE_RACE)				//离开地下城

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_RACE_END)			//通知地下城结算
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_CLEAR_AREA_MONSTER)//杀死当前房间所有怪
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_CONSUME_FATIGUE)	//消耗体力
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_KILL_MONSTER)		//杀怪事件
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_GOT_ITEMS)				//获得物品

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_ENTER_RACE_REQ)			//玩家通知服务器进入比赛了
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_ENTER_RACE_RES)			//服务器返回玩家进入比赛

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_REPORT_FRAME_REQ)		//玩家上报帧数据
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_REPORT_FRAME_RES)		//返回玩家上报帧结果

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_CAL_DROP)				//计算掉落概率
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_RESET_AREA_INDEX)	//通知地下城房间Index重置

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_GET_AREA_INDEX_REQ)		//请求地下城房间索引
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_GET_AREA_INDEX_RES)		//地下城房间索引返回
		
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_ROLL_ITEM_REQ)		//公共掉落roll请求
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_ROLL_ITEM_RES)		//公共掉落roll请求返回	
		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_ROLL_ITEM_RESULT)	//公共掉落roll结算信息	

		CL_DEFINE_PROTOCOLID(WORLD_DUNGEON_NOTIFY_GET_YELLOW_EQUIP)	//通知地下城获得橙色装备
			
		// 红包
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_REDPACKET)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_REDPACKET)					//登录时同步红包基础信息
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_GET_NEW_REDPACKET)		//通知获得新红包
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_NEW_REDPACKET)			//通知有新红包可领
		CL_DEFINE_PROTOCOLID(WORLD_NOTIFY_DEL_REDPACKET)			//通知删除红包
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SYNC_STATUS)			//通知修改红包状态
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SEND_REQ)				//请求发送红包
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SEND_RES)				//返回发送红包请求
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_OPEN_REQ)				//请求打开红包
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_OPEN_RES)				//返回打开红包请求
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SEND_CUSTOM_REQ)		//请求发送自费红包
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SEND_CUSTOM_RES)		//发送自费红包返回
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_SYNC_RECORD)		    //同步红包记录
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_GUILD_INFO_REQ)		//获取公会红包人数信息
		CL_DEFINE_PROTOCOLID(WORLD_REDPACKET_GUILD_INFO_RES)		//获取公会红包人数返回

		// 与其他服务器之间的交互
		CL_DEFINE_PROTOCOLID(SCENE_ADD_RED_PACEKT_REQ)				//scene server请求添加红包
		CL_DEFINE_PROTOCOLID(SW_ENLARGE_STORAGE_REQ)				//scene -> world 请求扩展仓库格子
		CL_DEFINE_PROTOCOLID(WS_ENLARGE_STORAGE_RET)				//world -> scene 请求扩展仓库格子返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ITEM)
		CL_DEFINE_PROTOCOLID(WORLD_OPEN_JAR_RECORD_REQ)		//client->world开罐子记录请求
		CL_DEFINE_PROTOCOLID(WORLD_OPEN_JAR_RECORD_RES)		//world->client开罐子记录请求返回
		CL_DEFINE_PROTOCOLID(WORLD_ADD_JAR_RECORD_REQ)		//scene->world添加开罐子记录
		CL_DEFINE_PROTOCOLID(WORLD_EQRECO_OPENJARS_RECORD_REQ)     //client->world开罐子记录请求
		CL_DEFINE_PROTOCOLID(WORLD_EQRECO_OPENJARS_RECORD_RES)	//world->client开罐子记录请求返回
		CL_DEFINE_PROTOCOLID(WORLD_GOT_ACCOUNT_MONEY_REQ)		//scene->world 获得账号货币请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_SYS_RECORD_REQ)		//client->world拉取系统记录请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_SYS_RECORD_RES)		//world->client拉取系统记录返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_PREMIUM_LEAGUE)
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_SYNC_STATUS)		//world->client 同步赏金联赛状态
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_REWARD_POOL_REQ)	//client->world 请求赏金联赛奖金池
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_REWARD_POOL_RES)	//world->client 返回赏金联赛奖金池
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_ENROLL_REQ)		//client->world 赏金联赛报名请求
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_ENROLL_RES)		//world->client 赏金联赛报名返回
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BATTLE_GAMER_INIT)//world->client 初始化淘汰赛玩家列表
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BATTLE_GAMER_UPDATE)//world->client 更新淘汰赛玩家信息
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_SELF_INFO)		//world->client 玩家自己的赏金联赛信息
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BTTTLE_RECORD_REQ)//client->world 请求赏金联赛战斗记录
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BTTTLE_RECORD_RES)//world->client 返回赏金联赛战斗记录
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BTTTLE_RECORD_SYNC)//world->client 同步赏金联赛战斗记录
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_RACE_END)			//world->client 赏金联赛战斗结算
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BATTLE_INFO_INIT)	//world->client 初始化淘汰赛对战列表
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_BATTLE_INFO_UPDATE)//world->client 更新淘汰赛对战列表
		CL_DEFINE_PROTOCOLID(WORLD_PREMIUM_LEAGUE_END_TO_SCENE)	 //world->scene 赏金联赛结算到scene

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ROOM)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_INFO)					//server->client 同步房间信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_SIMPLE_INFO)			//server->client 同步房间简单信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_SLOT_INFO)				//server->client 同步房间玩家信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_INVITE_INFO)			//server->client 通知被邀请玩家 邀请信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_KICK_OUT_INFO)			//server->client 通知被踢出玩家
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_BE_INVITE_INFO)		//server->client 通知邀请者,被邀请玩家的返回
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_SWAP_SLOT_INFO)		//server->client 通知交换位置信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_SWAP_SLOT_RESULT_INFO)	//server->client 通知交换位置返回信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_PASSWORD_INFO)			//server->client 通知密码信息
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ROOM_EXTEND1_INFO)			//server->client extend1

		CL_DEFINE_PROTOCOLID(WORLD_ROOM_LIST_REQ)					//client->server 请求房间列表
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_LIST_RES)					//server->client 请求房间列表返回
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_ROOM_REQ)					//client->server 请求创建或更新房间
		CL_DEFINE_PROTOCOLID(WORLD_UPDATE_ROOM_RES)					//server->client 请求创建或更新房间返回
		CL_DEFINE_PROTOCOLID(WORLD_JOIN_ROOM_REQ)					//client->server 请求进入房间
		CL_DEFINE_PROTOCOLID(WORLD_JOIN_ROOM_RES)					//server->client 请求进入房间返回
		CL_DEFINE_PROTOCOLID(WORLD_QUIT_ROOM_REQ)					//client->server 请求退出房间
		CL_DEFINE_PROTOCOLID(WORLD_QUIT_ROOM_RES)					//server->client 请求退出房间返回
		CL_DEFINE_PROTOCOLID(WORLD_KICK_OUT_ROOM_REQ)				//client->server 请求踢出房间
		CL_DEFINE_PROTOCOLID(WORLD_KICK_OUT_ROOM_RES)				//server->client 请求踢出房间返回
		CL_DEFINE_PROTOCOLID(WORLD_DISMISS_ROOM_REQ)				//client->server 请求解散房间
		CL_DEFINE_PROTOCOLID(WORLD_DISMISS_ROOM_RES)				//server->client 请求解散房间返回
		CL_DEFINE_PROTOCOLID(WORLD_INVITE_JOIN_ROOM_REQ)			//client->server 请求邀请进入房间
		CL_DEFINE_PROTOCOLID(WORLD_INVITE_JOIN_ROOM_RES)			//server->client 请求邀请进入房间返回
		CL_DEFINE_PROTOCOLID(WORLD_CHANGE_ROOM_OWNER_REQ)			//client->server 请求转让房主
		CL_DEFINE_PROTOCOLID(WORLD_CHANGE_ROOM_OWNER_RES)			//server->client 请求转让房主返回
		CL_DEFINE_PROTOCOLID(WORLD_BE_INVITE_ROOM_REQ)				//client->server 被邀请请求
		CL_DEFINE_PROTOCOLID(WORLD_BE_INVITE_ROOM_RES)				//server->client 被邀请请求返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_CLOSE_SLOT_REQ)				//client->server 请求关闭打开位置
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_CLOSE_SLOT_RES)				//server->client 请求关闭打开位置返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_SWAP_SLOT_REQ)				//client->server 请求房间交换位置
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_SWAP_SLOT_RES)				//server->client 请求房间交换位置返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_RESPONSE_SWAP_SLOT_REQ)		//client->server 请求响应房间交换位置
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_RESPONSE_SWAP_SLOT_RES)		//server->client 请求响应房间交换位置返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_START_REQ)			//client->server 请求匹配战斗
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_START_RES)			//server->client 请求匹配战斗返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_CANCEL_REQ)			//client->server 请求取消匹配战斗
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_CANCEL_RES)			//server->client 请求取消匹配战斗返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_READY_REQ)			//client->server 请求战斗准备
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_BATTLE_READY_RES)			//server->client 请求战斗准备返回
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_SEND_INVITE_LINK_REQ)		//client->server 发送邀请信息
		CL_DEFINE_PROTOCOLID(WORLD_ROOM_SEND_INVITE_LINK_RES)		//server->client 发送邀请信息返回


		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_SCORE_WAR_TEST)				//server->client 同步积分赛信息

		//服务器间通信
		CL_DEFINE_PROTOCOLID(WORLD_SCORE_WAR_RANKING_REWARD)		//CROSS->WORLD 排行榜奖励
		CL_DEFINE_PROTOCOLID(WORLD_SCORE_WAR_SYNC_BATTLE_INFO)		//SECEN->WORLD 同步战斗信息


		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_2V2_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(WORLD_2V2_SYNC_SCORE_WAR_TEST)				//server->client 同步积分赛信息
		//服务器间通信
		CL_DEFINE_PROTOCOLID(WORLD_2V2_SCORE_WAR_RANKING_REWARD)		//CROSS->WORLD 排行榜奖励
		CL_DEFINE_PROTOCOLID(WORLD_2V2_SCORE_WAR_SYNC_BATTLE_INFO)		//SECEN->WORLD 同步战斗信息

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_DIG)
		CL_DEFINE_PROTOCOLID(WORLD_DIG_INFO_SYNC)					//server->client 同步宝藏信息
		CL_DEFINE_PROTOCOLID(WORLD_DIG_REFRESH_SYNC)				//server->client 同步宝藏刷新信息
		CL_DEFINE_PROTOCOLID(WORLD_DIG_PLAYER_SIZE_SYNC)			//server->client 同步玩家数量
		CL_DEFINE_PROTOCOLID(WORLD_DIG_RECORD_INFO_SYNC)			//server->client 同步挖宝记录

		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_OPEN_REQ)				//client->server 请求打开宝藏地图
		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_OPEN_RES)				//server->client 请求打开宝藏地图返回
		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_CLOSE_REQ)				//client->server 请求关闭宝藏地图
		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_CLOSE_RES)				//server->client 请求关闭宝藏地图返回
		CL_DEFINE_PROTOCOLID(WORLD_DIG_WATCH_REQ)					//client->server 请求查看宝藏
		CL_DEFINE_PROTOCOLID(WORLD_DIG_WATCH_RES)					//server->client 请求查看宝藏返回
		CL_DEFINE_PROTOCOLID(WORLD_DIG_OPEN_REQ)					//client->server 请求打开宝藏
		CL_DEFINE_PROTOCOLID(WORLD_DIG_OPEN_RES)					//server->client 请求打开宝藏返回
		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_INFO_REQ)				//client->server 请求宝藏地图信息
		CL_DEFINE_PROTOCOLID(WORLD_DIG_MAP_INFO_RES)				//server->client 请求宝藏地图信息返回
		CL_DEFINE_PROTOCOLID(WORLD_DIG_RECORDS_REQ)					//client->server 请求挖宝记录信息
		CL_DEFINE_PROTOCOLID(WORLD_DIG_RECORDS_RES)					//server->client 请求挖宝记录信息返回


		// 安全锁
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SECURITY_LOCK)

		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_STATUS_SYNC)		// world->scene 同步安全锁状态

		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_DATA_REQ)		//client->server 请求安全锁信息
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_DATA_RES)		//server->client 请求安全锁信息返回
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_OP_REQ)		//client->server 请求操作安全锁
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_OP_RES)		//server->client 请求操作安全锁返回
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_CHANGE_PASSWD_REQ)	// client->server 请求修改安全锁密码
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_CHANGE_PASSWD_RES)	// server->client 请求修改安全锁密码返回
		CL_DEFINE_PROTOCOLID(WORLD_BIND_DEVICE_REQ)				// client->server 请求绑定设备
		CL_DEFINE_PROTOCOLID(WORLD_BIND_DEVICE_RES)				// server->client 请求绑定设备返回

		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_FORBID)		// server->client 提示客户端安全锁禁止操作
		CL_DEFINE_PROTOCOLID(WORLD_SECURITY_LOCK_PASSWD_ERROR_NUM)	// server->client 安全锁密码错误次数

		// 冒险队
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ADVENTURE_TEAM)
		CL_DEFINE_PROTOCOLID(WORLD_ADVENTURE_TEAM_RENAME_REQ)   // client->world 冒险队队名修改请求
		CL_DEFINE_PROTOCOLID(WORLD_ADVENTURE_TEAM_RENAME_RES)	// world->client 冒险队队名修改返回
		CL_DEFINE_PROTOCOLID(WORLD_BLESS_CRYSTAL_INFO_REQ)		// client->world 赐福水晶信息请求
		CL_DEFINE_PROTOCOLID(WORLD_BLESS_CRYSTAL_INFO_RES)		// world->client 赐福水晶信息返回
		CL_DEFINE_PROTOCOLID(WORLD_INHERIT_BLESS_INFO_REQ)		// client->world 传承祝福信息请求
		CL_DEFINE_PROTOCOLID(WORLD_INHERIT_BLESS_INFO_RES)		// world->client 传承祝福信息返回
		CL_DEFINE_PROTOCOLID(WORLD_INHERIT_EXP_REQ)				// client->world 传承经验请求
		CL_DEFINE_PROTOCOLID(WORLD_INHERIT_EXP_RES)				// world->client 传承经验返回
		CL_DEFINE_PROTOCOLID(WORLD_ADVENTURE_TEAM_EXTRA_INFO_REQ)	// client->world 冒险队扩展信息请求
		CL_DEFINE_PROTOCOLID(WORLD_ADVENTURE_TEAM_EXTRA_INFO_RES)	// world->client 冒险队扩展信息返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_EXPEDITION_MAP_REQ)		// client->world 远征地图查询请求
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_EXPEDITION_MAP_RES)		// world->client 远征地图查询返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_OPTIONAL_EXPEDITION_ROLES_REQ)	// client->world 可选远征角色查询请求
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_OPTIONAL_EXPEDITION_ROLES_RES)	// world->client 可选远征角色查询返回
		CL_DEFINE_PROTOCOLID(WORLD_DISPATCH_EXPEDITION_TEAM_REQ)		// client->world 派遣远征队请求
		CL_DEFINE_PROTOCOLID(WORLD_DISPATCH_EXPEDITION_TEAM_RES)		// world->client 派遣远征队返回
		CL_DEFINE_PROTOCOLID(WORLD_CANCEL_EXPEDITION_REQ)				// client->world 取消远征请求
		CL_DEFINE_PROTOCOLID(WORLD_CANCEL_EXPEDITION_RES)				// world->client 取消远征返回
		CL_DEFINE_PROTOCOLID(WORLD_GET_EXPEDITION_REWARDS_REQ)			// client->world 远征奖励领取请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_EXPEDITION_REWARDS_RES)			// world->client 远征奖励领取返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_ALL_EXPEDITION_MAPS_REQ)		// client->world 查询全部远征地图请求
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_ALL_EXPEDITION_MAPS_RES)		// world->client 查询全部远征地图返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_OWN_OCCUPATIONS_REQ)			// client->world 请求查询拥有的职业
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_OWN_OCCUPATIONS_RES)			// world->client 查询拥有的职业返回
		CL_DEFINE_PROTOCOLID(WORLD_QUERY_OWN_NEW_OCCUPATIONS_SYNC)		// world->client 同步拥有的新职业
		CL_DEFINE_PROTOCOLID(WORLD_REMOVE_UNLOCKED_NEW_OCCUPATIONS_REQ)	// client->world 请求清除解锁的新职业
		CL_DEFINE_PROTOCOLID(WORLD_ADVENTURE_TEAM_INFO_SYNC)			// world->server 同步冒险队信息
		CL_DEFINE_PROTOCOLID(WORLD_ALL_EXPEDITION_MAPS_SYNC)			// world->client 同步全部远征地图信息

		// 角色
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_ROLE)
		CL_DEFINE_PROTOCOLID(WORLD_EXTENSIBLE_ROLE_FIELD_UNLOCK_REQ)		// client->world 角色扩展栏位解锁请求
		CL_DEFINE_PROTOCOLID(WORLD_EXTENSIBLE_ROLE_FIELD_UNLOCK_RES)		// world->client 角色扩展栏位解锁返回

		// 商店
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SHOP)
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_SHOP_ITEM_QUERY_REQ)					// client->world 账号商店商品查询请求
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_SHOP_ITEM_QUERY_RES)					// world->client 账号商店商品查询返回
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_SHOP_ITEM_BUY_REQ)					// client->world 账号商店商品购买请求
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_SHOP_ITEM_BUY_RES)					// world->client 账号商店商品购买返回
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_SHOP_ITEM_BUYED_NOTIFY_SCENE)	    // world->scene  账号商店商品购买成功

		//黑市商人
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_BLACKMARKET)
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_SYNC_TYPE)		   // world->client 同步黑市商人类型
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_LIST_REQ)   // client->world 请求黑市商人竞拍列表
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_LIST_RES)   // world->client 黑市商人竞拍列表返回
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_REQ)		   // client->world 请求竞拍
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_RES)		   // world->client 竞拍返回
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_CANCEL_REQ) // client->world 取消竞拍请求
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_AUCTION_CANCEL_RES) // world->client 取消竞拍返回
		CL_DEFINE_PROTOCOLID(WORLD_BLACKMARKET_NOTIFY_REFRESH)	   // world->client 通知客户端重新拉去列表

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_TASK)
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_TASK_CHECK_PACKAGE_ENOUGH_REQ)	// world->scene 账号任务检查背包容量充足请求
		CL_DEFINE_PROTOCOLID(WORLD_ACCOUNT_TASK_CHECK_PACKAGE_ENOUGH_RES)	// scene->world 账号任务检查背包容量充足返回
		CL_DEFINE_PROTOCOLID(WORLD_SUBMIT_ACCOUNT_TASK)						// client->world 提交一个账号任务
			CL_DEFINE_PROTOCOLID(WORLD_SET_TASK_ITEM_REQ)					// client->world 请求提交任务物品
			CL_DEFINE_PROTOCOLID(WORLD_SET_TASK_ITEM_RES)					// server->client 响应提交任务物品

		//头衔
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUCTIION_NEW_TITLE)
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_SYNC_LIST)		       // world->client 同步头衔,上线
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_TAKEUP_REQ)		   // client->world 头衔穿戴请求
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_TAKEUP_RES)		   // world->client 头衔穿戴返回
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_TAKEOFF_REQ)		   // client->world 头衔脱掉请求
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_TAKEOFF_RES)		   // world->client 头衔脱掉返回
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_SYNC_UPDATE)		   // world->client 同步头衔新增或删除
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_UPDATE_DATA)		   // world->client 更新头衔数据
		CL_DEFINE_PROTOCOLID(WORLD_NEW_TITLE_MODIFY_SCENE)		   //world->scene  设置头衔
		CL_DEFINE_PROTOCOLID(SCENE_NEW_TITLE_MODIFY_WORLD)		   //scene->world  设置头衔返回
		CL_DEFINE_PROTOCOLID(SCENE_NEW_TITLE_ADD_WORLD)		       //scene->world	添加头衔
		CL_DEFINE_PROTOCOLID(SCENE_NEW_TITLE_TAKEUP_GUILD_POST_REQ)//client->world	穿上公会职位的头衔请求
		CL_DEFINE_PROTOCOLID(SCENE_NEW_TITLE_TAKEUP_GUILD_POST_RES)//world->client	穿上公会职位的头衔返回

		//设置相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_SETTING)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_FUNC_UNLOCK)		// world->client 功能解锁

		//客服后台
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_CONSOLE)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_PLAYER_GM_AUTHORITY)		// world->scene 同步玩家gm权限

		//每日必做
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUCTIION_DAIIY_TODO)
		CL_DEFINE_PROTOCOLID(WORLD_GET_PLAYER_DAILY_TODOS_REQ)	//client->world 每日必做请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_PLAYER_DAILY_TODOS_RES)	//world->client 每日必做返回
		CL_DEFINE_PROTOCOLID(WORLD_DAILYTODO_SYNC_DATA)	//scene->world 每日必做数据变化通知world

		//账号相关
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUCTIION_ACCOUNT)
		CL_DEFINE_PROTOCOLID(WORLD_SYNC_ACCOUNT_INFO)	//world->scene 同步账号数据
		
		//好友赠送道具
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_WORLD, FUNCTION_FRIEND_PRESENT_ITEM)
		CL_DEFINE_PROTOCOLID(WORLD_GET_ITEM_FRIEND_PRESENT_INFO_REQ)	//client->world 拉去道具好友赠送数据请求
		CL_DEFINE_PROTOCOLID(WORLD_GET_ITEM_FRIEND_PRESENT_INFO_RES)	//world->client 拉去道具好友赠送数据返回
		CL_DEFINE_PROTOCOLID(WORLD_ITEM_FRIEND_PRESENT_REQ)				//client->world 赠送请求
		CL_DEFINE_PROTOCOLID(WORLD_ITEM_FRIEND_PRESENT_RES)			    //world->client 赠送返回


		/**
		 *@brief 社交服务器协议
		 */ 
		CL_SERVER_PROTOCOLID_BEGIN(ST_SOCIAL)
		//好友邀请协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_SOCIAL, FUNCTION_INVITEGAME)
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_REPORT_ONLINE)			//上报在线
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_NOTIFY_LEVELUP)			//通知升级
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_NOTIFY_CONSUME)			//通知消费
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_NOTIFY_INVITEE_ENTERGAME)	//通知被邀请者进入游戏
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_INVITEELIST_REQ)			//请求被邀请者列表
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_INVITEELIST_RET)			//返回被邀请者列表
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_GIFTBAG_REQ)		//检查是否满足领取礼包条件请求
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_GIFTBAG_RET)		//检查是否满足领取礼包条件返回
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_RECALLAWARD_REQ)	//检查召回奖励领取
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_RECALLAWARD_RET)	//检查召回奖励返回
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_CONSUMEAWARD_REQ)	//检查消费返利
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_CONSUMEAWARD_RET)	//检查消费返利返回
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_KLACTIVITY_REQ)	//检查恐龙活动请求
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_CHECK_KLACTIVITY_RET)	//检查恐龙活动返货
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_BIND_KLACTIVITY)			//绑定恐龙账号
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_BEGIN_EXCHANGECDKEY_REQ)	//请求兑换cdkey
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_BEGIN_EXCHANGECDKEY_RET)	//返回兑换cdkey
		CL_DEFINE_PROTOCOLID(SOCIAL_INVITE_END_EXCHANGECDKEY_REQ)	//结束兑换
		CL_SERVER_PROTOCOLID_END(ST_SOCIAL)

		/**
		 *@brief 中心服务器协议
		 */
		 CL_SERVER_PROTOCOLID_BEGIN(ST_CENTER)
		 CL_DEFINE_PROTOCOLID(CENTER_FORBIDTALK_LIST_REQ)			//禁言列表请求
		 CL_DEFINE_PROTOCOLID(CENTER_FORBIDTALK_LIST_RET)			//禁言列表返回
		 CL_DEFINE_PROTOCOLID(CENTER_NOTIFY_NEW_FORBIDTALK)			//通知新的禁言玩家
		 CL_DEFINE_PROTOCOLID(CENTER_NOTIFY_DEL_FORBIDTALK)			//通知删除禁言玩家
		 CL_DEFINE_PROTOCOLID(CENTER_FORBIDTALK_REQ)				//请求禁言
		 CL_DEFINE_PROTOCOLID(CENTER_UNFORBIDTALK_REQ)				//取消禁言
		 CL_DEFINE_PROTOCOLID(CENTER_CHATMONITOR_LOGIN)				//聊天监控登陆
		 CL_DEFINE_PROTOCOLID(CENTER_CHATMONITOR_SETSERVERS)		//设置监控的服务器id
		 CL_DEFINE_PROTOCOLID(CENTER_SYNC_CHATINFO)					//同步聊天信息
		 CL_DEFINE_PROTOCOLID(CENTER_TRANSMIT_TO_ZONE)				//转发到指定区
		 CL_DEFINE_PROTOCOLID(CENTER_BROADCAST_TO_ZONES)			//广播到所有区
		 CL_DEFINE_PROTOCOLID(CENTER_PUSH_NOTIFY)					//接收推送通知并通过http发到客户端
		 CL_DEFINE_PROTOCOLID(WORLD_PUSH_NOTIFY)					//接收推送通知并发到world
		 CL_DEFINE_PROTOCOLID(FORBIDACCOUNT_REQ)					//请求center转发封号
		 CL_DEFINE_PROTOCOLID(FORBIDACCOUNT_NOTIFY)					//center通知封号
		 CL_DEFINE_PROTOCOLID(CENTER_CUSTOM_SERVICE_SIGN_REQ)		//请求客服系统签名
		 CL_DEFINE_PROTOCOLID(CENTER_CUSTOM_SERVICE_SIGN_RES)		//客服系统签名返回
		 CL_DEFINE_PROTOCOLID(CENTER_REPORT_PLAYER_ROLE_LIST)		//上报角色列表
		 CL_DEFINE_PROTOCOLID(CENTER_REPORT_PLAYER_CHEAT)			//上报玩家作弊
		 CL_DEFINE_PROTOCOLID(CENTER_GLOBAL_SERVER_INFO_REQ)		//请求GlobalServer信息
		 CL_DEFINE_PROTOCOLID(CENTER_GLOBAL_SERVER_INFO_RET)		//请求GlobalServer信息返回
		 CL_DEFINE_PROTOCOLID(CENTER_SYNC_PLAYER_ADDICT_TIME)		//同步玩家沉迷时间到GlobalServer
		 CL_DEFINE_PROTOCOLID(CENTER_QUERY_CONVERT_ACCOUNT_REQ)		//请求获取转换的账号
		 CL_DEFINE_PROTOCOLID(CENTER_QUERY_CONVERT_ACCOUNT_RES)		//返回转换的账号
		 CL_DEFINE_PROTOCOLID(CENTER_PUNISH_INFO_REQ)				//请求惩罚信息
		 CL_DEFINE_PROTOCOLID(CENTER_SYNC_RED_PACKET_INFO_REQ)		//同步个人总红包信息
		 CL_DEFINE_PROTOCOLID(CENTER_DELETE_RED_PACKET_INFO_REQ)	//删除个人总红包信息
		 CL_DEFINE_PROTOCOLID(CENTER_ACCOUNT_LOGIN_TIME_SYNC)		//账号登陆时间同步


		 CL_FUNCTION_PROTOCOLID_BEGIN(ST_CENTER, FUNCTION_AWARDPOOL)
		 CL_DEFINE_PROTOCOLID(CENTER_NOTIFY_CONNECTED)				//通知已连接
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_INFO_REQ)			//请求奖池信息
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_INFO_RET)			//返回奖池信息
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_SYNC_GOLDNUM)		//同步金贝数
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_NOTIFY_NEWROUND)		//通知新一轮开始
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_NOTIFY_FAILED)		//通知失败
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_PUTSTONE_REQ)		//捐彩石
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_PUTSTONE_RET)		//返回
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_GETAWARD_REQ)		//领取奖励
		 CL_DEFINE_PROTOCOLID(CENTER_AWARDPOOL_GETAWARD_RET)		//领取奖励返回

		 CL_FUNCTION_PROTOCOLID_BEGIN(ST_CENTER, FUNCTION_SORTLIST)
		 CL_DEFINE_PROTOCOLID(CENTER_SYNC_ACTIVITY_SORT_LIST)				//活动排行榜

		 CL_SERVER_PROTOCOLID_END(ST_CENTER)

		 /**
		  *@brief 跨服服务器协议
		  */

        CL_SERVER_PROTOCOLID_BEGIN(ST_CROSS)
		CL_DEFINE_PROTOCOLID(ST_CROSS_ENTER_SCENE_REQ)	//请求进入跨服场景
		CL_DEFINE_PROTOCOLID(ST_CROSS_ENTER_SCENE_RES)	//进入跨服场景返回
		CL_DEFINE_PROTOCOLID(ST_CROSS_EXIT_SCENE_REQ)	//退出跨服场景
		CL_DEFINE_PROTOCOLID(ST_CROSS_EXIT_SCENE_RES)	//退出跨服场景

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_CROSS, FUNCTION_CHAT)
		CL_DEFINE_PROTOCOLID(CROSS_TRANSMIT_CHAT)						//WORLD->CROSS 转发聊天信息
		
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_CROSS, FUNCTION_CROSS_GUILD_BATTLE)
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_SORT_LIST_SYNC)			//world->cross 同步排行榜数据
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_GM_SYNC)				//world->cross 同步GM命令
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_ENROLL_REQ)				//world->cross 请求报名
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_ENROLL_RES)				//cross->world 请求报名返回
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_RECORD_REQ)				//world->cross 请求领地战斗记录
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_RECORD_RES)				//cross->world 请求领地战斗记录返回
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_SORT_LIST_REQ)			//world->cross 请求领地排行榜
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_SORT_LIST_RES)			//cross->world 请求领地排行榜返回
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_SELF_SORT_LIST_REQ)		//world->cross 请求领地自身公会排行榜
		CL_DEFINE_PROTOCOLID(CROSS_GUILD_BATTLE_SELF_SORT_LIST_RES)		//cross->world 请求领地自身公会排行榜返回

		/*
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SIGNIN_REQ)
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SIGNIN_RET)
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SIGNOUT)
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_INFO_REQ)			//请求今日挑战信息
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_INFO_RET)			//返回今日挑战信息
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SORTLIST_REQ)		//跨服挑战赛排名信息请求
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SORTLIST_RET)		//跨服挑战赛排名信息返回
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_NOTIFY_BATTLE)		//通知战斗开始
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_SYNC_RESULT)		//通知战斗结果
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_GETAWARD_REQ)		//请求领取奖励
		CL_DEFINE_PROTOCOLID(CHALLENGE_WORLDCHALLENGE_GETAWARD_RET)		//领取奖励返回
		*/

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_CROSS, FUNCTION_ROOM)
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_INFO)			//CROSS->WORLD 同步玩家数据
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_LOG_INFO)				//CROSS->WORLD 同步日志数据
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_NOTIFY_INFO)			//CROSS->WORLD Notify消息
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_START_RACE)			//WORLD->CROSS 通知战斗开始
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_ONLINE)			//WORLD->CROSS 通知玩家上线
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_OFFLINE)		//WORLD->CROSS 通知玩家离线
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_DISCONNECT)		//WORLD->CROSS 通知玩家断线
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_RECONNECT)		//WORLD->CROSS 通知玩家断线重连
		CL_DEFINE_PROTOCOLID(CROSS_SYNC_ROOM_PLAYER_CHANGE_SCENE)	//WORLD->CROSS 通知玩家改变场景
		


		CL_DEFINE_PROTOCOLID(CROSS_WORLD_ROOM_LIST_REQ)				//WORLD->CROSS 请求房间列表
		CL_DEFINE_PROTOCOLID(CROSS_WORLD_ROOM_LIST_RES)				//CROSS->WORLD 请求房间列表返回
		CL_DEFINE_PROTOCOLID(CROSS_UPDATE_ROOM_REQ)					//WORLD->CROSS 请求创建或更新房间
		CL_DEFINE_PROTOCOLID(CROSS_UPDATE_ROOM_RES)					//CROSS->WORLD 请求创建或更新房间返回
		CL_DEFINE_PROTOCOLID(CROSS_JOIN_ROOM_REQ)					//WORLD->CROSS 请求进入房间
		CL_DEFINE_PROTOCOLID(CROSS_JOIN_ROOM_RES)					//CROSS->WORLD 请求进入房间返回
		CL_DEFINE_PROTOCOLID(CROSS_QUIT_ROOM_REQ)					//WORLD->CROSS 请求退出房间
		CL_DEFINE_PROTOCOLID(CROSS_QUIT_ROOM_RES)					//CROSS->WORLD 请求退出房间返回
		CL_DEFINE_PROTOCOLID(CROSS_KICK_OUT_ROOM_REQ)				//WORLD->CROSS 请求踢出房间
		CL_DEFINE_PROTOCOLID(CROSS_KICK_OUT_ROOM_RES)				//CROSS->WORLD 请求踢出房间返回
		CL_DEFINE_PROTOCOLID(CROSS_DISMISS_ROOM_REQ)				//WORLD->CROSS 请求解散房间
		CL_DEFINE_PROTOCOLID(CROSS_DISMISS_ROOM_RES)				//CROSS->WORLD 请求解散房间返回
		CL_DEFINE_PROTOCOLID(CROSS_INVITE_JOIN_ROOM_REQ)			//WORLD->CROSS 请求邀请进入房间
		CL_DEFINE_PROTOCOLID(CROSS_INVITE_JOIN_ROOM_RES)			//CROSS->WORLD 请求邀请进入房间返回
		CL_DEFINE_PROTOCOLID(CROSS_WORLD_INVITE_ROOM_REQ)			//CROSS->WORLD 邀请玩家进入房间
		CL_DEFINE_PROTOCOLID(CROSS_WORLD_INVITE_ROOM_RES)			//WORLD->CROSS 邀请玩家进入房间返回
		CL_DEFINE_PROTOCOLID(CROSS_CHANGE_ROOM_OWNER_REQ)			//WORLD->CROSS 请求转让房主
		CL_DEFINE_PROTOCOLID(CROSS_CHANGE_ROOM_OWNER_RES)			//CROSS->WORLD 请求转让房主返回
		CL_DEFINE_PROTOCOLID(CROSS_BE_INVITE_ROOM_REQ)				//WORLD->CROSS 被邀请请求
		CL_DEFINE_PROTOCOLID(CROSS_BE_INVITE_ROOM_RES)				//CROSS->WORLD 被邀请请求返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_CLOSE_SLOT_REQ)				//WORLD->CROSS 请求关闭打开位置
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_CLOSE_SLOT_RES)				//CROSS->WORLD 请求关闭打开位置返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_SWAP_SLOT_REQ)				//WORLD->CROSS 请求房间交换位置
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_SWAP_SLOT_RES)				//CROSS->WORLD 请求房间交换位置返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_RESPONSE_SWAP_SLOT_REQ)		//WORLD->CROSS 请求响应房间交换位置
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_RESPONSE_SWAP_SLOT_RES)		//CROSS->WORLD 请求响应房间交换位置返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_START_REQ)			//WORLD->CROSS 请求匹配战斗
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_START_RES)			//CROSS->WORLD 请求匹配战斗返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_CANCEL_REQ)			//WORLD->CROSS 请求取消匹配战斗
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_CANCEL_RES)			//CROSS->WORLD 请求取消匹配战斗返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_READY_REQ)			//WORLD->CROSS 请求战斗准备
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_BATTLE_READY_RES)			//CROSS->WORLD 请求战斗准备返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_SEND_INVITE_LINK_REQ)		//WORLD->CROSS 发送邀请信息
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_SEND_INVITE_LINK_RES)		//CROSS->WORLD 发送邀请信息返回
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_MATCH_INFO_REQ)				//WORLD->CROSS 请求玩家匹配信息
		CL_DEFINE_PROTOCOLID(CROSS_ROOM_MATCH_INFO_RES)				//CROSS->WORLD 请求玩家匹配信息返回


		CL_FUNCTION_PROTOCOLID_BEGIN(ST_CROSS, FUNCTION_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(CROSS_SCORE_WAR_SORT_LIST_SYNC)		//SCENE->cross 同步排行榜信息
		CL_DEFINE_PROTOCOLID(CROSS_SCORE_WAR_BATTLE_INFO_SYNC)		//WORLD->cross 同步玩家战斗信息
		CL_DEFINE_PROTOCOLID(CROSS_SCORE_WAR_SORT_LIST_REQ)			//world->cross 请求积分赛排行榜
		CL_DEFINE_PROTOCOLID(CROSS_SCORE_WAR_SORT_LIST_RES)			//cross->world 请求积分赛排行榜返回
		CL_DEFINE_PROTOCOLID(CROSS_SCORE_WAR_INFO_REQ)				//world->cross 请求积分赛状态
		

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_CROSS, FUNCTION_2V2_SCORE_WAR)
		CL_DEFINE_PROTOCOLID(CROSS_2V2_SCORE_WAR_SORT_LIST_SYNC)		//SCENE->cross 同步排行榜信息
		CL_DEFINE_PROTOCOLID(CROSS_2V2_SCORE_WAR_BATTLE_INFO_SYNC)		//WORLD->cross 同步玩家战斗信息
		CL_DEFINE_PROTOCOLID(CROSS_2V2_SCORE_WAR_SORT_LIST_REQ)			//world->cross 请求积分赛排行榜
		CL_DEFINE_PROTOCOLID(CROSS_2V2_SCORE_WAR_SORT_LIST_RES)			//cross->world 请求积分赛排行榜返回
		CL_DEFINE_PROTOCOLID(CROSS_2V2_SCORE_WAR_INFO_REQ)				//world->cross 请求积分赛状态
		


		CL_SERVER_PROTOCOLID_END(ST_CROSS)

		/*
		    RelayServer 协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_RELAY)
		CL_DEFINE_PROTOCOLID(RELAYSERVER_LOGIN_REQ)					//请求：用户登录relay server			client -> relay server
		CL_DEFINE_PROTOCOLID(RELAYSERVER_LOGIN_RES)					//响应：用户登录relay server的响应   relay server -> client

		CL_DEFINE_PROTOCOLID(RELAYSERVER_START_GAME_NOTIFY)			//relay server通知client  PK开始    relay server  -> client
			//CL_DEFINE_PROTOCOLID()

		CL_DEFINE_PROTOCOLID(RELAYSERVER_FRAMEDATA_NOTIFY)			// relay server下发pk 数据(帧数据)  relay server --> client
		CL_DEFINE_PROTOCOLID(RELAYSERVER_INPUT_REQ)					// client上报Input					client --> relay server
		CL_DEFINE_PROTOCOLID(RELAYSERVER_GAMERESULT_NOTIFY)			//relay server通知client比赛结果(胜负，结算信息) relay server --> client
		CL_DEFINE_PROTOCOLID(RELAYSERVER_ENDGAME)					// client --> relay server 请求结束对战
        CL_DEFINE_PROTOCOLID(RELAYSERVER_DUNGEON_RACE_END_REQ)      // client --> relay server 关卡结算
        CL_DEFINE_PROTOCOLID(RELAYSERVER_RACE_END_NOTIFY)			// relay --> client 比赛结束通用消息
		CL_DEFINE_PROTOCOLID(RELAYSERVER_DISCONNECT_NOTIFY)			// udp conn server与relay server之间的enmControlId_notify_disconnect 协议转换而来的

		CL_DEFINE_PROTOCOLID(RELAYSERVER_FRAMECHECKSUM_REQ)			//client --> relay server client上报给sever的帧校验

		// 断线重连相关
		CL_DEFINE_PROTOCOLID(RELAYSERVER_RECONNECT_REQ)				//client --> relay server 请求断线重连
		CL_DEFINE_PROTOCOLID(RELAYSERVER_RECONNECT_RES)				//relay server --> client 断线重连返回
		CL_DEFINE_PROTOCOLID(RELAYSERVER_RECONNECT_FRAME_DATE)		//relay server --> client 发送重连帧数据

		// 加载信息
		CL_DEFINE_PROTOCOLID(RELAYSERVER_REPORT_LOAD_PROGRESS)		//client --> relay server 上报加载进度
		CL_DEFINE_PROTOCOLID(RELAYSERVER_NOTIFY_LOAD_PROGRESS)		//relay server --> client 通知其他玩家的加载进度

		CL_DEFINE_PROTOCOLID(RELAYSERVER_RACE_INIT_PACKET)			//server -> relay 战斗初始化数据

		//与match server之间的协议
		CL_DEFINE_PROTOCOLID(RELAYSERVER_END_GAME_REQ)				//请求：PK结束，请求结算 relay server --> match server 
		CL_DEFINE_PROTOCOLID(RELAYSERVER_END_GAME_RES)				//响应：				 relay server <-- match server
        CL_DEFINE_PROTOCOLID(RELAYSERVER_DUNGEON_RACE_END)          //地下城结算 relay server --> match server

		CL_DEFINE_PROTOCOLID(RELAYSERVER_PING_NOTIFY)				// 通知客户端与udpserver的ping值

		CL_DEFINE_PROTOCOLID(RELAYSERVER_OBSERVE_REQ)				//用户请求观战
		CL_DEFINE_PROTOCOLID(RELAYSERVER_OBSERVE_RES)				//用户观战返回

		CL_DEFINE_PROTOCOLID(RELAYSERVER_KICK_OFF_CONN)				//踢掉连接
		CL_DEFINE_PROTOCOLID(RELAYSERVER_ABALITY_SYNC)				//relay同步负载

		//与Observe的协议
		CL_DEFINE_PROTOCOLID(RELAY_START_RECEIVE_RACE_FRAME)		//Observe->Relay 请求接收relay上比赛的帧数据

			
			
		CL_SERVER_PROTOCOLID_END(ST_RELAY)
		/*
		 * UdpConnServer协议
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_UDPCONNECTOR)
		CL_SERVER_PROTOCOLID_END(ST_UDPCONNECTOR)


		/*
		 * 匹配服务器协议 Match Server
		 */
		CL_SERVER_PROTOCOLID_BEGIN(ST_MATCHSERVER)

        CL_DEFINE_PROTOCOLID(MATCHSERVER_RELAY_REGISTER)                    //RelayServer的注册协议 relay server --> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_START_GAME_REQ)					//请求：Macth server要求开始一场PK   match server --> relay server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_START_GAME_RES)					//响应：开始PK的应答					relay server --> match server
        CL_DEFINE_PROTOCOLID(MATCHSERVER_TERMINATE_GAME)					//MatchServer通知结束一场比赛   match server --> relay server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_NOTIFY_RACE_PLAYER_INFO)			//MatchServer通知比赛玩家信息   match server --> relay server


        CL_DEFINE_PROTOCOLID(WORLDSERVER_TEAM_CREATE_RACE_REQ)              //队伍请求开始比赛
        CL_DEFINE_PROTOCOLID(WORLDSERVER_TEAM_CREATE_RACE_RES)              //队伍请求开始比赛返回
		CL_DEFINE_PROTOCOLID(WORLDSERVER_TEAM_START_DUNGEON_REQ)            //队伍请求开始地下城
		CL_DEFINE_PROTOCOLID(WORLDSERVER_TEAM_START_DUNGEON_RES)            //队伍请求开始地下城返回

        CL_FUNCTION_PROTOCOLID_BEGIN(ST_MATCHSERVER, FUNCTION_MATCH)

        CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_START_REQ)                   //请求： 玩家通过WorldServer请求开始匹配， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_START_RES)                   //返回匹配结果， match server -> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_DUNGEON_REQ)                 //请求： 玩家通过WorldServer请求地下城匹配， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_DUNGEON_RES)                 //返回地下城匹配结果, match server -> world server
        CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_CANCEL_REQ)                  //请求： 玩家通过WorldServer请求取消匹配， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_GUILD_BATTLE_REQ)            //请求： 玩家通过WorldServer请求公会战匹配， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_PREMIUM_LEAGUE_REQ)			//请求： 玩家通过WorldServer请求赏金联赛匹配， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_PREMIUM_LEAGUE_BATTLE_REQ)	//开始赏金联赛淘汰赛
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_PREMIUM_LEAGUE_BATTLE_RES)	//开始赏金联赛淘汰赛
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_PK_ROOM_REQ)					//Pk房间匹配
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_PK_ROOM_RES)					//Pk房间匹配

        CL_DEFINE_PROTOCOLID(MATCHSERVER_QUERY_PLAYER_INFO_REQ)             //请求： 请求玩家信息， match server -> world server
        CL_DEFINE_PROTOCOLID(MATCHSERVER_QUERY_PLAYER_INFO_RES)             //相应： 返回玩家信息， world server -> match server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_PLAYER_MATCH_SUCCESS_NOTIFY)       //玩家匹配到的通知, match server -> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_PLAYER_MATCH_CANCEL_NOTIFY)		//玩家取消匹配通知, match server -> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_CHAMPION_BATTLE_REQ)			//开始冠军赛
		CL_DEFINE_PROTOCOLID(MATCHSERVER_MATCH_CHAMPION_BATTLE_RES)			//开始冠军赛返回
		CL_DEFINE_PROTOCOLID(UNION_MATCHSERVER_QUERY_PLAYER_INFO_REQ)		//请求玩家信息冠军赛
		CL_DEFINE_PROTOCOLID(UNION_MATCHSERVER_QUERY_PLAYER_INFO_RES)		//请求玩家信息冠军赛返回
		

	    CL_DEFINE_PROTOCOLID(MATCHSERVER_RACE_END)				            //结算 match server  --> world server
        CL_DEFINE_PROTOCOLID(MATCHSERVER_DUNGEON_RACE_END)				    //关卡结算 match server  --> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_GUILD_BATTLE_RACE_END)				//工会战结算 match server  --> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_PREMIUM_LEAGUE_RACE_END)			//赏金联赛结算 match server  --> world server
		CL_DEFINE_PROTOCOLID(MATCHSERVER_PK_ROOM_RACE_END)				    //pk房间结算 match server  --> world server

        CL_DEFINE_PROTOCOLID(SCENESERVER_PLAYER_LEAVE_RACE)                 //玩家离开比赛 scene server --> relay server
		CL_DEFINE_PROTOCOLID(SCENESERVER_SYNC_PLAYER_EVENT)                 //同步玩家事件 world/scene server --> relay server
		CL_DEFINE_PROTOCOLID(SCENESERVER_GIVEUP_RECONN)						//放弃重连 world/scene server --> relay server
		CL_DEFINE_PROTOCOLID(RELAYSERVER_RACE_START)						//通知比赛开始 relay server --> scene server

		CL_DEFINE_PROTOCOLID(MATCHSERVER_SEPCIFY_PK_ROBOT)					//指定PK机器人信息 scene server --> match server

		CL_DEFINE_PROTOCOLID(MATCHSERVER_CHAMPION_RACE_END)					//冠军赛结算 match server  --> union server

		CL_SERVER_PROTOCOLID_END(FUNCTION_MATCH)

		CL_SERVER_PROTOCOLID_END(ST_MATCHSERVER)

		/**
		*@brief 世界服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_REPLAY)

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_MATCHSERVER, FUNCTION_REPLAY)
		CL_DEFINE_PROTOCOLID(REPLAY_REPORT_PLAYER_ONLINE)					// scene->replay 玩家上线
		CL_DEFINE_PROTOCOLID(REPLAY_REPORT_PLAYER_OFFLINE)					// scene->replay 玩家下线
		CL_DEFINE_PROTOCOLID(REPLAY_REPORT_RACE)							// scene->replay 上报玩家自己的战斗记录 
		CL_DEFINE_PROTOCOLID(REPLAY_LIST_REQ)								// scene->replay 请求录像列表
		CL_DEFINE_PROTOCOLID(REPLAY_LIST_RES)								// replay->scene 获取录像列表
		CL_DEFINE_PROTOCOLID(REPLAY_REPORT_VIEW)							// scene->replay scene上报玩家看了一场录像
		CL_DEFINE_PROTOCOLID(REPLAY_FILE_REQ)								// replay->relay 请求录像文件
		CL_DEFINE_PROTOCOLID(REPLAY_FILE_RES)								// relay->replay 返回录像文件
		CL_SERVER_PROTOCOLID_END(ST_REPLAY)

		/**
		*@brief 验证服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_VERIFY)

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_VERIFY, FUNCTION_VERIFY)
		CL_DEFINE_PROTOCOLID(VERIFY_CREATE_TASK_REQ)						// server -> verify 请求创建验证任务
		CL_DEFINE_PROTOCOLID(VERIFY_CREATE_TASK_RES)						// verify -> server 创建验证任务返回
		CL_DEFINE_PROTOCOLID(VERIFY_GIVEUP_TASK)							// server -> verify 放弃验证
		CL_DEFINE_PROTOCOLID(VERIFY_REPORT_FRAME)							// server -> verify 上报帧数据
		CL_DEFINE_PROTOCOLID(VERIFY_REPORT_CHECKSUM)						// server -> verify 上报校验帧
		CL_DEFINE_PROTOCOLID(VERIFY_REPORT_RACE_END)						// server -> verify 上报结算
		CL_DEFINE_PROTOCOLID(VERIFY_REPORT_RACE_DISMISS)					// server -> verify 比赛已经解散

		CL_DEFINE_PROTOCOLID(VERIFY_TASK_RESULT)							// verify -> server 验证服务器返回验证结果
		CL_DEFINE_PROTOCOLID(VERIFY_TASK_RACE_END)							// verify -> server 验证服务器返回验证结算

		CL_SERVER_PROTOCOLID_END(ST_VERIFY)

		/**
		*@brief 验证中心服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_VERIFY_CENTER)

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_VERIFY_CENTER, FUNCTION_VERIFY)
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_REGISTER_REQ)					// vs -> vc 验证服务器请求注册
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_REGISTER_RES)					// vc -> vs 注册返回
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_CREATE_TASK_REQ)					// ws/relay -> vc 请求创建验证任务
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_CREATE_TASK_RES)					// vc -> ws/relay 创建验证任务返回
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_REPORT_ABILITY)					// vs -> vc 上报负载情况
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_NOTIFY_ABILITY)					// vc -> relay/ws 通知各个节点的负载情况
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_NOTIFY_VS_INFO)					// vc -> servers 通知验证服务器的信息
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_NOTIFY_VS_ONLINE)				// vc -> servers 通知新增验证服务器
		CL_DEFINE_PROTOCOLID(VERIFY_CENTER_NOTIFY_VS_OFFLINE)				// vc -> servers 通知验证服务器下线


		CL_SERVER_PROTOCOLID_END(ST_VERIFY_CENTER)

		/**
		*@brief 全局活动服务器协议
		*/

		CL_SERVER_PROTOCOLID_BEGIN(ST_GLOBAL_ACTIVITY)
		CL_DEFINE_PROTOCOLID(GAS_NON_EXISTENT)				//globalActivity->node 服务器不存在
		CL_DEFINE_PROTOCOLID(GAS_ACTIVIYT_INFO_REQ)			//world->globalActivity 活动数据请求
		CL_DEFINE_PROTOCOLID(GAS_ACTIVITY_SYNC)				//globalActivity->node 同步活动
		CL_DEFINE_PROTOCOLID(GAS_SEND_ANNOUNCE_REQ)			//globalActivity->scene 发送公告
		CL_DEFINE_PROTOCOLID(GAS_SEND_MAIL_REQ)				//globalActivity->scene 发送邮件
		CL_DEFINE_PROTOCOLID(GAS_GM_COMMAND)				//world->globalActivity GM命令
		CL_DEFINE_PROTOCOLID(GAS_BET_HORSE_REWARD_RES)		//world->globalActivity 赌马奖励回复

		CL_DEFINE_PROTOCOLID(GAS_CHECK_HIRE_BIND_REQ)			//检查帐号是否已绑定 如果未绑定则绑定
		CL_DEFINE_PROTOCOLID(GAS_CHECK_HIRE_BIND_RET)			//检查帐号是否已绑定结果

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GLOBAL_ACTIVITY, FUNCTION_GAMBING)
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_BUY_REQ)			//client->globalActivity 购买夺宝商品请求
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_BUY_RES)			//globalActivity->client 购买夺宝商品返回
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_ITEM_QUERY_REQ)	//client->globalActivity 夺宝商品数据查询请求
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_ITEM_QUERY_RES)	//globalActivity->client 夺宝商品数据查询返回
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_MINE_QUERY_REQ)	//client->globalActivity 我的夺宝数据查询请求
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_MINE_QUERY_RES)	//globalActivity->client 我的夺宝数据查询返回
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_RECORD_QUERY_REQ)	//client->globalActivity 夺宝记录查询请求
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_RECORD_QUERY_RES)	//globalActivity->client 夺宝记录查询返回
		CL_DEFINE_PROTOCOLID(GAS_GAMBING_LOTTERY_SYNC)		//globalActivity->client 夺宝中奖同步

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GLOBAL_ACTIVITY, FUNCTION_BETHORSE)
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_INFO_REQ)				//client->globalActivity 赌马信息请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_INFO_RES)				//globalActivity->client 赌马信息返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_ODDS_REQ)		//client->globalActivity 射手赔率请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_ODDS_RES)		//globalActivity->client 射手赔率返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_HISTORY_REQ)	//client->globalActivity 射手历史战绩请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_HISTORY_RES)	//globalActivity->client 射手历史战绩返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_STAKE_REQ)			//client->globalActivity 赌马押注请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_STAKE_RES)			//globalActivity->client 赌马押注返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_PHASE_SYCN)			//globalActivity->client 赌马阶段状态同步
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_STAKE_RECORD_REQ)		//client->globalActivity 玩家押注历史请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_STAKE_RECORD_RES)		//globalActivity->client 玩家押注历史返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_BATTLE_RECORD_REQ)	//client->globalActivity 比赛历史请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_BATTLE_RECORD_RES)	//globalActivity->client 比赛历史返回
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_RANK_REQ)		//client->globalActivity 射手排行请求
		CL_DEFINE_PROTOCOLID(GAS_BETHORSE_SHOOTER_RANK_RES)		//globalActivity->client 射手排行返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GLOBAL_ACTIVITY, FUNCTION_ITEM)
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_RECORD_REQ)	// client->globalActivity 神器罐活动抽奖记录请求
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_RECORD_RES)	// globalActivity->client 神器罐活动抽奖记录返回
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_SIGN_REQ)		// scene->globalActivity  神器罐购买抽奖资格上报
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_NOTIFY)		// globalActivity->client 神器罐抽奖通知
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_CFG_REQ)		// client->globalActivity 神器罐抽奖配置请求
		CL_DEFINE_PROTOCOLID(GAS_ARTIFACT_JAR_LOTTERY_CFG_RES)		// globalActivity->client 神器罐抽奖配置返回

		CL_FUNCTION_PROTOCOLID_BEGIN(ST_GLOBAL_ACTIVITY, FUNCTION_OPERATION)
		CL_DEFINE_PROTOCOLID(GAS_WEEK_SIGN_RECORD_REQ)		// client->globalActivity 周签到活动抽奖记录请求
		CL_DEFINE_PROTOCOLID(GAS_WEEK_SIGN_RECORD_RES)		// globalActivity->client 周签到活动抽奖记录返回
		CL_DEFINE_PROTOCOLID(GAS_WEEK_SIGN_LOTTERY_REQ)		// scene->globalActivity 周签到抽奖
		CL_DEFINE_PROTOCOLID(GAS_WEEK_SIGN_LOTTERY_RES)		// scene->globalActivity 周签到抽奖

		CL_DEFINE_PROTOCOLID(GAS_WHOLE_BARGAIN_JOIN_NUM_SYNC)	// scene->globalActivity 全民抢购数量上报
		CL_DEFINE_PROTOCOLID(GAS_WHOLE_BARGAIN_DISCOUNT_SYNC)	// scene->globalActivity 全民抢购折扣下发
		CL_DEFINE_PROTOCOLID(GAS_WHOLE_BARGAIN_REQ)				// client->globalActivity 全民抢购数据请求
		CL_DEFINE_PROTOCOLID(GAS_WHOLE_BARGAIN_RES)				// globalActivity->client 全民抢购数据返回
		CL_DEFINE_PROTOCOLID(GAS_WHOLE_BARGAIN_DISCOUNT_QUERY)	// scene->globalActivity 全民抢购折扣查询

		CL_SERVER_PROTOCOLID_END(ST_GLOBAL_ACTIVITY)

		/**
		*@brief 战场服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_BATTLE)
		CL_DEFINE_PROTOCOLID(ST_BATTLE_ENTER_SCENE_REQ)		//请求进入战场场景
		CL_DEFINE_PROTOCOLID(ST_BATTLE_ENTER_SCENE_RES)		//进入战场场景返回
		CL_DEFINE_PROTOCOLID(ST_BATTLE_EXIT_SCENE_REQ)		//退出战场场景
		CL_DEFINE_PROTOCOLID(ST_BATTLE_EXIT_SCENE_RES)		//退出战场场景
		CL_DEFINE_PROTOCOLID(ST_BATTLE_ENROLL_REQ)			//战场报名请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_ENROLL_RES)			//战场报名请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_PK_SOMEONE_REQ)		//吃鸡pk请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_PK_SOMEONE_RES)		//吃鸡PK返回
		CL_DEFINE_PROTOCOLID(ST_BATTLE_NOTIFY_PREPARE_INFO)	//吃鸡通知准备场景信息
		CL_DEFINE_PROTOCOLID(ST_BATTLE_NOTIFY_BATTLE_INFO)	//吃鸡通知单场信息
		CL_DEFINE_PROTOCOLID(ST_BATTLE_SEPCIFY_PK_ROBOT)	//吃鸡指定PK机器人信息
		CL_DEFINE_PROTOCOLID(ST_BATTLE_ADD_PK_ROBOT)		//吃鸡添加PK机器人
		CL_DEFINE_PROTOCOLID(ST_BATTLE_LOCK_SOMEONE_REQ)	//吃鸡锁定目标请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_LOCK_SOMEONE_RES)	//吃鸡锁定目标返回
		CL_DEFINE_PROTOCOLID(ST_BATTLE_SORT_LIST_REQ)		//吃鸡锁排行榜请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_NOTIFY_ACTIVITY)		//吃鸡通知活动时间
		CL_DEFINE_PROTOCOLID(ST_BATTLE_OBSERVE_REQ)			//吃鸡观战请求
		CL_DEFINE_PROTOCOLID(ST_BATTLE_OBSERVE_RES)			//吃鸡观战返回
		CL_DEFINE_PROTOCOLID(ST_BATTLE_SHOP_NOTIFY)			//吃鸡商店通知

		CL_DEFINE_PROTOCOLID(ST_BATTLE_CHECK_NO_WAR_REQ)	//吃鸡免战检查
		CL_DEFINE_PROTOCOLID(ST_BATTLE_CHECK_NO_WAR_RES)	//吃鸡免战返回

		CL_DEFINE_PROTOCOLID(ST_BATTLE_NOTIFY_CHIJI_MISC)	//通知吃鸡杂项数据
		CL_DEFINE_PROTOCOLID(ST_BATTLE_OPEN_NOTIFY)			//吃鸡开关通知

		CL_SERVER_PROTOCOLID_END(ST_BATTLE)

		/**
		*@brief 团本服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_TEAMCOPY)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_ENTER_SCENE_REQ)		//请求进入团本场景
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_EXIT_SCENE_REQ)		//请求退出团本场景

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CRETAE_TEAM_REQ)		//创建团队请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CRETAE_TEAM_RES)		
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_DATA_REQ)		//团队数据请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_DATA_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_LIST_REQ)		//团队列表请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_LIST_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_REQ)		//入团请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_QUIT_REQ)		//退出团队请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_QUIT_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_BATTLE_REQ)		//开战请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_BATTLE_RES)		
		
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_BATTLE_NOTIFY)	//开战通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_BATTLE_VOTE)	//开战投票
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_VOTE_NOTIFY)			//投票通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_VOTE_FINISH)			//投票完成

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_NOTIFY)			//阶段通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FIELD_NOTIFY)			//据点通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TARGET_NOTIFY)		//目标通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_END)			//阶段结束

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_LIST_REQ)	//请求申请列表
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_LIST_RES)	
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_REPLY_REQ)	//处理申请
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_APPLY_REPLY_RES)		
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_CHALLENGE_REQ)	//开始挑战
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_START_CHALLENGE_RES)	

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FIND_TEAM_MATE_REQ)	//找队友
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FIND_TEAM_MATE_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_PLAYER)		//邀请
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_NOTIFY)		//邀请通知

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_FLOP_START_REQ)	//开始翻牌
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_FLOP_START_RES)	
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_FLOP_REQ)		//请求翻牌
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_FLOP_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_STAGE_FLOP_NOTIFY)	//翻牌通知 

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_SQUAD_STATUS_NOTIFY)	//小队状态通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_UPDATE)			//队伍修改
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_RECONNECT_NOTIFY)		//团本重连通知

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CHANGE_SEAT_REQ)		//换座位
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CHANGE_SEAT_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_DETAIL_REQ)		//队伍详情
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_DETAIL_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_KICK_REQ)				//踢出队伍
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_KICK_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_APPOINTMENT_REQ)		//任命
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_APPOINTMENT_RES)

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_MEMBER_NOTIFY)		//成员通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_AUTO_AGREE_GOLD_REQ)	//自动同意金主
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_AUTO_AGREE_GOLD_RES)

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_LIST_REQ)		//邀请列表
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_LIST_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_CHOICE_REQ)	//邀请选择
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_INVITE_CHOICE_RES)

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_APPOINTMENT_NOTIFY)	//任命通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_STATUS_NOTIFY)	//队伍状态通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_APPLY_NOTIFY)			//申请通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_INFO_NOTIFY)	//玩家团本数据下发

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_RECRUIT_REQ)			//招募
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_RECRUIT_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_LINK_JOIN_REQ)		//链接加入
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_LINK_JOIN_RES)

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FIELD_STATUS_NOTIFY)	// 据点状态通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_APPLY_REFUSE_NOTIFY)	// 申请被拒绝通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_EXPIRE_NOTIFY)	// 玩家离线通知

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FIELD_UNLOCK_RATE)	// 据点解锁比例
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PHASE_BOSS_INFO)		// 客户端上报阶段boss信息

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_FLAG)	// 强制结束标记
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_REQ)	// 强制结束
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_VOTE_NOTIFY)// 强制结束投票通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_VOTE_REQ)	// 投票
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_MEMBER_VOTE)// 有人投票
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_FORCE_END_VOTE_RESULT)// 强制投票结果

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_MODIFY_EQUIP_SCORE_REQ) // 修改队伍装备评分请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_MODIFY_EQUIP_SCORE_RES) // 修改队伍装备评分返回

		// 团本2
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_FIELD_NOTIFY)		// 格子据点数据下发
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_MONSTER_NOTIFY)		// 格子怪物数据下发
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_SQUAD_NOTIFY)		// 格子小队数据下发
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_OTHER_SQUAD_DATA)			// 其他小队的数据
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_MOVE_REQ)			// 移动
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_MOVE_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_SQUAD_BATTLE_NOTIFY)	// 小队与据点战斗同步
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GRID_MONSTER_DEAD)		// 怪物死亡
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TWO_TEAM_DATA)			// 团本2队伍数据
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_MONSTER_TRANSFER)			// 怪物传送门通知

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_ROLL_NOTIFY)			// roll奖励通知
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_ROLL_CHOICE_REQ)		// roll奖励选择
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_ROLL_CHOICE_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_ROLL_RESULT)			// roll结果下发


		/* 团本--服务器之间的协议 */
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_QUERY_PLAYER_INFO_REQ) // 查询个人信息
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_QUERY_PLAYER_INFO_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_RECONNECT)		 // 玩家重连回团本
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_CHECK_REQ)		 // 团本检查玩家
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_CHECK_RES)
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_DUNGEON_REVIVE)		 // 地下城复活
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_INFO_SYNC)		 // 玩家信息同步
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_TICKET_SYNC)	 // 门票同步
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_EQUIP_SCORE)			 // 装备评分同步
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_PLAYER_LOADING_SYNC)	 // loading
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CFG_VAL_REQ)			 // 数值配置请求
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_CFG_VAL_RES)			 // 数值配置返回
		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_GET_ITEM)				 // 团本获得道具

		CL_DEFINE_PROTOCOLID(ST_TEAM_COPY_TEAM_PLAYER_INFO)  //团本结束发送团本所有玩家id（用于公会荣誉
		CL_SERVER_PROTOCOLID_END(ST_TEAMCOPY)
			
		/**
		*@brief 跨服服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_UNION)
		CL_DEFINE_PROTOCOLID(UNION_NOTIFY_OPEN_FUNCTION)            //通知本服跨服服务器开启了哪些功能
		CL_DEFINE_PROTOCOLID(UNION_ADD_PLAYER_REQ)					//向跨服服务请求添加角色
		CL_DEFINE_PROTOCOLID(UNION_ADD_PLAYER_RES)					//向跨服服务请求添加角色返回
		CL_DEFINE_PROTOCOLID(UNION_DEL_PLAYER_REQ)					//向跨服服务请求删除角色
		CL_DEFINE_PROTOCOLID(UNION_DEL_PLAYER_RES)					//向跨服服务请求删除角色返回
		CL_DEFINE_PROTOCOLID(UNION_SCENE_IS_READY)					//通知跨服服本SCENE已初始化完成
		CL_DEFINE_PROTOCOLID(UNION_WORLD_CHG_ZONE_ID)				//通知跨服服本服ZoneID已改变
		CL_DEFINE_PROTOCOLID(UNION_PLAYER_GET_ITEM)					//通知本服玩家获得奖励
		CL_DEFINE_PROTOCOLID(UNION_NOTIFY_ACTIVITY)					//通知活动


		//冠军赛协议
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_UNION, FUNCTION_CHAMPION)
		CL_DEFINE_PROTOCOLID(UNION_TEST_REQ)                        //测试功能
		CL_DEFINE_PROTOCOLID(UNION_TEST_RES)
		CL_DEFINE_PROTOCOLID(UNION_CHECK_CHAMPION_ENROLL_REQ)			//收到Scene检查冠军赛报名
		CL_DEFINE_PROTOCOLID(UNION_CHECK_CHAMPION_ENROLL_RES)			//Union返回检查冠军赛报名结果
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_JOIN_PREPARE_REQ)			//Scene->Union 请求进入比赛准备区域
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_JOIN_PREPARE_RES)			//Union -> Scene请求进入比赛准备区域
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_OBSERVE_REQ)			//Scene->Union 请求观战
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_PLAYER_STATUS_REQ)			//Scene->Union 请求玩家状态
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_PLAYER_STATUS_RES)			//Union->Scene 请求玩家状态返回
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_BATTLE_COUNTDOWN_SYNC)			//Union->Cline 战斗开始结束时间同步(用于客户端倒计时)
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_SCORE_RANK_TOP_SYNC)			//Union->Cline 积分排行前5名(用于显示小排行)
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_GROUPID_SYNC)					//Union->Cline 分组ID
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_KNOCKOUT_SCORE)					//Union->Cline 淘汰赛比分
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_CHECK_RELIVE_REQ)				//Scene->Union 请求玩家能否复活
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_CHECK_RELIVE_RES)				//Union->Scene 请求玩家能否复活返回
		CL_DEFINE_PROTOCOLID(UNION_CHAMPION_NULL_TRUN_NOTIFY)				//Union->Clinet 同步本轮轮空

		//金币寄售
		CL_FUNCTION_PROTOCOLID_BEGIN(ST_UNION, FUNCTION_GOLD_CONSIGNMENT)
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_ORDER_PAGE_REQ)		// 请求订单页面
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_ORDER_PAGE_RES)
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_DEAL_RECORD_REQ)	// 请求成交记录
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_DEAL_RECORD_RES)
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_OWNER_ORDER_REQ)	// 请求我的订单
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_OWNER_ORDER_RES)
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_CANCEL_ORDER_REQ)	// 下架订单
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_CANCEL_ORDER_RES)
		CL_DEFINE_PROTOCOLID(UNION_GOLD_CONSIGNMENT_ACTIVITY_CLOSE)		// 活动结束

		CL_SERVER_PROTOCOLID_END(ST_UNION)


		CL_SERVER_PROTOCOLID_BEGIN(ST_OBSERVE)
		CL_DEFINE_PROTOCOLID(OBSERVE_START_RACE)							//Observe->ObserveRelay 请求观战
		CL_DEFINE_PROTOCOLID(OBSERVE_SYNC_FRAME)							//Realy->Observe 同步比赛帧数据
		CL_DEFINE_PROTOCOLID(OBSERVE_CANCEL_OVERLOAD)						//ObserveRealy->Observe 取消一个负载

		CL_SERVER_PROTOCOLID_END(ST_OBSERVE)

		CL_SERVER_PROTOCOLID_BEGIN(ST_OBSERVE_RELAY)
		CL_DEFINE_PROTOCOLID(OBSERVEREALY_ADD_OBSERVE_PLAYER_REQ)			//Observe->ObserveRelay 请求观战
		CL_DEFINE_PROTOCOLID(OBSERVEREALY_ADD_OBSERVE_PLAYER_RES)			//ObserveRelay->Observe 请求观战返回
		CL_DEFINE_PROTOCOLID(OBSERVEREALY_CREATE_RACE_REQ)					//ObserveRelay->Observe 请求创建比赛
		CL_DEFINE_PROTOCOLID(OBSERVEREALY_CREATE_RACE_RES)					//Observe->ObserveRelay 请求创建比赛返回
		

		CL_SERVER_PROTOCOLID_END(ST_OBSERVE_RELAY)
			

		/**
		*@brief 地下城服务器协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_DUNGEON_SVR)
		//CL_DEFINE_PROTOCOLID(DUNGEON_SVR_TEAM_CREATE_RACE_REQ)		//队伍请求地下城服务器创建比赛
		//CL_DEFINE_PROTOCOLID(DUNGEON_SVR_TEAM_CREATE_RACE_RES)		//队伍地下城服务器创建比赛返回
		CL_DEFINE_PROTOCOLID(DUNGEON_SVR_TEAM_START_RACE_REQ)       //队伍请求开始地下城
		CL_DEFINE_PROTOCOLID(DUNGEON_SVR_TEAM_START_RACE_RES)       //队伍请求开始地下城返回

		CL_DEFINE_PROTOCOLID(DUNGEON_SVR_DUNGEON_RACE_END)		    //关卡结算 dungeon server  --> server
		CL_DEFINE_PROTOCOLID(DUNGEON_SVR_END_RACE)					//结束比赛
		CL_DEFINE_PROTOCOLID(DUNGEON_SVR_REVIVE_REQ)				//请求复活
		CL_DEFINE_PROTOCOLID(SCENE_TO_DUNGEON_QUICKBUY_TRANSACTION_REQ)	//scene -> dungeon 快速购买事务请求
		
		CL_SERVER_PROTOCOLID_END(ST_DUNGEON_SVR)
		
		/**
		*@brief 跨服中转协议
		*/
		CL_SERVER_PROTOCOLID_BEGIN(ST_TRANSFER)
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_TIPS_ONE)	//跨服查询玩家装备tips
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_TIPS_TWO)
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_ONE)		    //跨服查询玩家信息
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_TWO)
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_DETAIL_ONE)	//跨服查询玩家详细信息
		CL_DEFINE_PROTOCOLID(TRANSFER_QUERY_PLAYER_DETAIL_TWO)

		CL_SERVER_PROTOCOLID_END(ST_TRANSFER)

	CL_PROTOCOLID_END()

}

#endif
